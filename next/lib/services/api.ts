/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {number}
     * @memberof Article
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'documentId'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof Article
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'slug'?: string;
    /**
     * 
     * @type {any}
     * @memberof Article
     */
    'content'?: any;
    /**
     * 
     * @type {Array<ArticleCategoriesInner>}
     * @memberof Article
     */
    'categories'?: Array<ArticleCategoriesInner>;
    /**
     * 
     * @type {Array<ArticleRequestDataDynamicZoneInner>}
     * @memberof Article
     */
    'dynamic_zone'?: Array<ArticleRequestDataDynamicZoneInner>;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInner}
     * @memberof Article
     */
    'image'?: ArticleCategoriesInnerProductImagesInner;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Article
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Article
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Article
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ArticleCategoriesInner
 */
export interface ArticleCategoriesInner {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInner
     */
    'name'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProduct}
     * @memberof ArticleCategoriesInner
     */
    'product'?: ArticleCategoriesInnerProduct;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerArticlesInner>}
     * @memberof ArticleCategoriesInner
     */
    'articles'?: Array<ArticleCategoriesInnerArticlesInner>;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ArticleCategoriesInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ArticleCategoriesInnerArticlesInner
 */
export interface ArticleCategoriesInnerArticlesInner {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'slug'?: string;
    /**
     * 
     * @type {any}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'content'?: any;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'categories'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleRequestDataDynamicZoneInner>}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'dynamic_zone'?: Array<ArticleRequestDataDynamicZoneInner>;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInner}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'image'?: ArticleCategoriesInnerProductImagesInner;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ArticleCategoriesInnerArticlesInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ArticleCategoriesInnerProduct
 */
export interface ArticleCategoriesInnerProduct {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInnerProduct
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProduct
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProduct
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInnerProduct
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProduct
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProduct
     */
    'slug'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInner>}
     * @memberof ArticleCategoriesInnerProduct
     */
    'images'?: Array<ArticleCategoriesInnerProductImagesInner>;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof ArticleCategoriesInnerProduct
     */
    'perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductPlansInner>}
     * @memberof ArticleCategoriesInnerProduct
     */
    'plans'?: Array<ArticleCategoriesInnerProductPlansInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ArticleCategoriesInnerProduct
     */
    'categories'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductDynamicZoneInner>}
     * @memberof ArticleCategoriesInnerProduct
     */
    'dynamic_zone'?: Array<ArticleCategoriesInnerProductDynamicZoneInner>;
    /**
     * 
     * @type {boolean}
     * @memberof ArticleCategoriesInnerProduct
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProduct
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProduct
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProduct
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInnerProduct
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInnerProduct
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProduct
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ArticleCategoriesInnerProduct
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ArticleCategoriesInnerProductDynamicZoneInner
 */
export interface ArticleCategoriesInnerProductDynamicZoneInner {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInnerProductDynamicZoneInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductDynamicZoneInner
     */
    '__component'?: ArticleCategoriesInnerProductDynamicZoneInnerComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductDynamicZoneInner
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductDynamicZoneInner
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ArticleCategoriesInnerProductDynamicZoneInner
     */
    'products'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<SharedButtonComponent>}
     * @memberof ArticleCategoriesInnerProductDynamicZoneInner
     */
    'CTAs'?: Array<SharedButtonComponent>;
}

export const ArticleCategoriesInnerProductDynamicZoneInnerComponentEnum = {
    DynamicZoneCta: 'dynamic-zone.cta'
} as const;

export type ArticleCategoriesInnerProductDynamicZoneInnerComponentEnum = typeof ArticleCategoriesInnerProductDynamicZoneInnerComponentEnum[keyof typeof ArticleCategoriesInnerProductDynamicZoneInnerComponentEnum];

/**
 * 
 * @export
 * @interface ArticleCategoriesInnerProductImagesInner
 */
export interface ArticleCategoriesInnerProductImagesInner {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'related'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'folder'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ArticleCategoriesInnerProductImagesInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ArticleCategoriesInnerProductImagesInnerRelatedInner
 */
export interface ArticleCategoriesInnerProductImagesInnerRelatedInner {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInnerProductImagesInnerRelatedInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductImagesInnerRelatedInner
     */
    'documentId'?: string;
}
/**
 * 
 * @export
 * @interface ArticleCategoriesInnerProductPlansInner
 */
export interface ArticleCategoriesInnerProductPlansInner {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'sub_text'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'featured'?: boolean;
    /**
     * 
     * @type {SharedButtonComponent}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'CTA'?: SharedButtonComponent;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'additional_perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'product'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ArticleCategoriesInnerProductPlansInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ArticleListResponse
 */
export interface ArticleListResponse {
    /**
     * 
     * @type {Array<Article>}
     * @memberof ArticleListResponse
     */
    'data'?: Array<Article>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof ArticleListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface ArticleListResponseMeta
 */
export interface ArticleListResponseMeta {
    /**
     * 
     * @type {ArticleListResponseMetaPagination}
     * @memberof ArticleListResponseMeta
     */
    'pagination'?: ArticleListResponseMetaPagination;
}
/**
 * 
 * @export
 * @interface ArticleListResponseMetaPagination
 */
export interface ArticleListResponseMetaPagination {
    /**
     * 
     * @type {number}
     * @memberof ArticleListResponseMetaPagination
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArticleListResponseMetaPagination
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArticleListResponseMetaPagination
     */
    'pageCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArticleListResponseMetaPagination
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ArticleRequest
 */
export interface ArticleRequest {
    /**
     * 
     * @type {ArticleRequestData}
     * @memberof ArticleRequest
     */
    'data': ArticleRequestData;
}
/**
 * 
 * @export
 * @interface ArticleRequestData
 */
export interface ArticleRequestData {
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof ArticleRequestData
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof ArticleRequestData
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRequestData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRequestData
     */
    'slug'?: string;
    /**
     * 
     * @type {any}
     * @memberof ArticleRequestData
     */
    'content'?: any;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof ArticleRequestData
     */
    'categories'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {Array<ArticleRequestDataDynamicZoneInner>}
     * @memberof ArticleRequestData
     */
    'dynamic_zone'?: Array<ArticleRequestDataDynamicZoneInner>;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof ArticleRequestData
     */
    'image'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {string}
     * @memberof ArticleRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof ArticleRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * @type ArticleRequestDataCategoriesInner
 * @export
 */
export type ArticleRequestDataCategoriesInner = number | string;

/**
 * 
 * @export
 * @interface ArticleRequestDataDynamicZoneInner
 */
export interface ArticleRequestDataDynamicZoneInner {
    /**
     * 
     * @type {number}
     * @memberof ArticleRequestDataDynamicZoneInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleRequestDataDynamicZoneInner
     */
    '__component'?: ArticleRequestDataDynamicZoneInnerComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof ArticleRequestDataDynamicZoneInner
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRequestDataDynamicZoneInner
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ArticleRequestDataDynamicZoneInner
     */
    'articles'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<SharedButtonComponent>}
     * @memberof ArticleRequestDataDynamicZoneInner
     */
    'CTAs'?: Array<SharedButtonComponent>;
}

export const ArticleRequestDataDynamicZoneInnerComponentEnum = {
    DynamicZoneCta: 'dynamic-zone.cta'
} as const;

export type ArticleRequestDataDynamicZoneInnerComponentEnum = typeof ArticleRequestDataDynamicZoneInnerComponentEnum[keyof typeof ArticleRequestDataDynamicZoneInnerComponentEnum];

/**
 * 
 * @export
 * @interface ArticleResponse
 */
export interface ArticleResponse {
    /**
     * 
     * @type {Article}
     * @memberof ArticleResponse
     */
    'data'?: Article;
    /**
     * 
     * @type {object}
     * @memberof ArticleResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface AuthChangePasswordPostRequest
 */
export interface AuthChangePasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'currentPassword': string;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'passwordConfirmation': string;
}
/**
 * 
 * @export
 * @interface AuthForgotPasswordPost200Response
 */
export interface AuthForgotPasswordPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthForgotPasswordPost200Response
     */
    'ok'?: AuthForgotPasswordPost200ResponseOkEnum;
}

export const AuthForgotPasswordPost200ResponseOkEnum = {
    True: 'true'
} as const;

export type AuthForgotPasswordPost200ResponseOkEnum = typeof AuthForgotPasswordPost200ResponseOkEnum[keyof typeof AuthForgotPasswordPost200ResponseOkEnum];

/**
 * 
 * @export
 * @interface AuthForgotPasswordPostRequest
 */
export interface AuthForgotPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthForgotPasswordPostRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface AuthLocalPostRequest
 */
export interface AuthLocalPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthLocalPostRequest
     */
    'identifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AuthLocalRegisterPostRequest
 */
export interface AuthLocalRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AuthResetPasswordPostRequest
 */
export interface AuthResetPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'passwordConfirmation'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface AuthSendEmailConfirmationPost200Response
 */
export interface AuthSendEmailConfirmationPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthSendEmailConfirmationPost200Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSendEmailConfirmationPost200Response
     */
    'sent'?: AuthSendEmailConfirmationPost200ResponseSentEnum;
}

export const AuthSendEmailConfirmationPost200ResponseSentEnum = {
    True: 'true'
} as const;

export type AuthSendEmailConfirmationPost200ResponseSentEnum = typeof AuthSendEmailConfirmationPost200ResponseSentEnum[keyof typeof AuthSendEmailConfirmationPost200ResponseSentEnum];

/**
 * 
 * @export
 * @interface BlogPage
 */
export interface BlogPage {
    /**
     * 
     * @type {number}
     * @memberof BlogPage
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogPage
     */
    'documentId'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogPage
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogPage
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPage
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<BlogPageRequestDataDynamicZoneInner>}
     * @memberof BlogPage
     */
    'dynamic_zone'?: Array<BlogPageRequestDataDynamicZoneInner>;
    /**
     * 
     * @type {string}
     * @memberof BlogPage
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPage
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPage
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof BlogPage
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof BlogPage
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof BlogPage
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<BlogPageLocalizationsInner>}
     * @memberof BlogPage
     */
    'localizations'?: Array<BlogPageLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface BlogPageListResponse
 */
export interface BlogPageListResponse {
    /**
     * 
     * @type {Array<BlogPage>}
     * @memberof BlogPageListResponse
     */
    'data'?: Array<BlogPage>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof BlogPageListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface BlogPageLocalizationsInner
 */
export interface BlogPageLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof BlogPageLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogPageLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogPageLocalizationsInner
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogPageLocalizationsInner
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPageLocalizationsInner
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<BlogPageRequestDataDynamicZoneInner>}
     * @memberof BlogPageLocalizationsInner
     */
    'dynamic_zone'?: Array<BlogPageRequestDataDynamicZoneInner>;
    /**
     * 
     * @type {string}
     * @memberof BlogPageLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPageLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPageLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof BlogPageLocalizationsInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof BlogPageLocalizationsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof BlogPageLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof BlogPageLocalizationsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface BlogPageRequest
 */
export interface BlogPageRequest {
    /**
     * 
     * @type {BlogPageRequestData}
     * @memberof BlogPageRequest
     */
    'data': BlogPageRequestData;
}
/**
 * 
 * @export
 * @interface BlogPageRequestData
 */
export interface BlogPageRequestData {
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogPageRequestData
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogPageRequestData
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPageRequestData
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<BlogPageRequestDataDynamicZoneInner>}
     * @memberof BlogPageRequestData
     */
    'dynamic_zone'?: Array<BlogPageRequestDataDynamicZoneInner>;
    /**
     * 
     * @type {string}
     * @memberof BlogPageRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof BlogPageRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface BlogPageRequestDataDynamicZoneInner
 */
export interface BlogPageRequestDataDynamicZoneInner {
    /**
     * 
     * @type {number}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    '__component'?: BlogPageRequestDataDynamicZoneInnerComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'testimonials'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'products'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'articles'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'plans'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<SharedLaunchesComponent>}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'launches'?: Array<SharedLaunchesComponent>;
    /**
     * 
     * @type {Array<SharedStepsComponent>}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'steps'?: Array<SharedStepsComponent>;
    /**
     * 
     * @type {Array<SharedButtonComponent>}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'CTAs'?: Array<SharedButtonComponent>;
    /**
     * 
     * @type {SharedFormComponent}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'form'?: SharedFormComponent;
    /**
     * 
     * @type {SharedSectionComponent}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'section'?: SharedSectionComponent;
    /**
     * 
     * @type {Array<SharedSocialMediaIconLinksComponent>}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'social_media_icon_links'?: Array<SharedSocialMediaIconLinksComponent>;
    /**
     * 
     * @type {CardsGlobeCardComponent}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'globe_card'?: CardsGlobeCardComponent;
    /**
     * 
     * @type {CardsRayCardComponent}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'ray_card'?: CardsRayCardComponent;
    /**
     * 
     * @type {CardsGraphCardComponent}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'graph_card'?: CardsGraphCardComponent;
    /**
     * 
     * @type {CardsSocialMediaCardComponent}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'social_media_card'?: CardsSocialMediaCardComponent;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'faqs'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof BlogPageRequestDataDynamicZoneInner
     */
    'logos'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const BlogPageRequestDataDynamicZoneInnerComponentEnum = {
    DynamicZoneBrands: 'dynamic-zone.brands'
} as const;

export type BlogPageRequestDataDynamicZoneInnerComponentEnum = typeof BlogPageRequestDataDynamicZoneInnerComponentEnum[keyof typeof BlogPageRequestDataDynamicZoneInnerComponentEnum];

/**
 * 
 * @export
 * @interface BlogPageResponse
 */
export interface BlogPageResponse {
    /**
     * 
     * @type {BlogPage}
     * @memberof BlogPageResponse
     */
    'data'?: BlogPage;
    /**
     * 
     * @type {object}
     * @memberof BlogPageResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface CardsGlobeCardComponent
 */
export interface CardsGlobeCardComponent {
    /**
     * 
     * @type {number}
     * @memberof CardsGlobeCardComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CardsGlobeCardComponent
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardsGlobeCardComponent
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardsGlobeCardComponent
     */
    'span'?: CardsGlobeCardComponentSpanEnum;
}

export const CardsGlobeCardComponentSpanEnum = {
    One: 'one',
    Two: 'two',
    Three: 'three'
} as const;

export type CardsGlobeCardComponentSpanEnum = typeof CardsGlobeCardComponentSpanEnum[keyof typeof CardsGlobeCardComponentSpanEnum];

/**
 * 
 * @export
 * @interface CardsGraphCardComponent
 */
export interface CardsGraphCardComponent {
    /**
     * 
     * @type {number}
     * @memberof CardsGraphCardComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CardsGraphCardComponent
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardsGraphCardComponent
     */
    'description'?: string;
    /**
     * 
     * @type {Array<ItemsGraphCardTopItemsComponent>}
     * @memberof CardsGraphCardComponent
     */
    'top_items'?: Array<ItemsGraphCardTopItemsComponent>;
    /**
     * 
     * @type {string}
     * @memberof CardsGraphCardComponent
     */
    'highlighted_text'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardsGraphCardComponent
     */
    'span'?: CardsGraphCardComponentSpanEnum;
}

export const CardsGraphCardComponentSpanEnum = {
    One: 'one',
    Two: 'two',
    Three: 'three'
} as const;

export type CardsGraphCardComponentSpanEnum = typeof CardsGraphCardComponentSpanEnum[keyof typeof CardsGraphCardComponentSpanEnum];

/**
 * 
 * @export
 * @interface CardsRayCardComponent
 */
export interface CardsRayCardComponent {
    /**
     * 
     * @type {number}
     * @memberof CardsRayCardComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CardsRayCardComponent
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardsRayCardComponent
     */
    'description'?: string;
    /**
     * 
     * @type {ItemsRayItemsComponent}
     * @memberof CardsRayCardComponent
     */
    'before_ray_items'?: ItemsRayItemsComponent;
    /**
     * 
     * @type {ItemsRayItemsComponent}
     * @memberof CardsRayCardComponent
     */
    'after_ray_items'?: ItemsRayItemsComponent;
    /**
     * 
     * @type {string}
     * @memberof CardsRayCardComponent
     */
    'span'?: CardsRayCardComponentSpanEnum;
}

export const CardsRayCardComponentSpanEnum = {
    One: 'one',
    Two: 'two',
    Three: 'three'
} as const;

export type CardsRayCardComponentSpanEnum = typeof CardsRayCardComponentSpanEnum[keyof typeof CardsRayCardComponentSpanEnum];

/**
 * 
 * @export
 * @interface CardsSocialMediaCardComponent
 */
export interface CardsSocialMediaCardComponent {
    /**
     * 
     * @type {number}
     * @memberof CardsSocialMediaCardComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CardsSocialMediaCardComponent
     */
    'Title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardsSocialMediaCardComponent
     */
    'Description'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CardsSocialMediaCardComponent
     */
    'logos'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof CardsSocialMediaCardComponent
     */
    'span'?: CardsSocialMediaCardComponentSpanEnum;
}

export const CardsSocialMediaCardComponentSpanEnum = {
    One: 'one',
    Two: 'two',
    Three: 'three'
} as const;

export type CardsSocialMediaCardComponentSpanEnum = typeof CardsSocialMediaCardComponentSpanEnum[keyof typeof CardsSocialMediaCardComponentSpanEnum];

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name'?: string;
    /**
     * 
     * @type {CategoryProduct}
     * @memberof Category
     */
    'product'?: CategoryProduct;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Category
     */
    'articles'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Category
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Category
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Category
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface CategoryListResponse
 */
export interface CategoryListResponse {
    /**
     * 
     * @type {Array<Category>}
     * @memberof CategoryListResponse
     */
    'data'?: Array<Category>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof CategoryListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface CategoryProduct
 */
export interface CategoryProduct {
    /**
     * 
     * @type {number}
     * @memberof CategoryProduct
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProduct
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProduct
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryProduct
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProduct
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProduct
     */
    'slug'?: string;
    /**
     * 
     * @type {Array<CategoryProductImagesInner>}
     * @memberof CategoryProduct
     */
    'images'?: Array<CategoryProductImagesInner>;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof CategoryProduct
     */
    'perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductPlansInner>}
     * @memberof CategoryProduct
     */
    'plans'?: Array<ArticleCategoriesInnerProductPlansInner>;
    /**
     * 
     * @type {Array<CategoryProductCategoriesInner>}
     * @memberof CategoryProduct
     */
    'categories'?: Array<CategoryProductCategoriesInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductDynamicZoneInner>}
     * @memberof CategoryProduct
     */
    'dynamic_zone'?: Array<ArticleCategoriesInnerProductDynamicZoneInner>;
    /**
     * 
     * @type {boolean}
     * @memberof CategoryProduct
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CategoryProduct
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProduct
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProduct
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProduct
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProduct
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryProduct
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProduct
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface CategoryProductCategoriesInner
 */
export interface CategoryProductCategoriesInner {
    /**
     * 
     * @type {number}
     * @memberof CategoryProductCategoriesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductCategoriesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductCategoriesInner
     */
    'name'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductCategoriesInner
     */
    'product'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerArticlesInner>}
     * @memberof CategoryProductCategoriesInner
     */
    'articles'?: Array<ArticleCategoriesInnerArticlesInner>;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductCategoriesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductCategoriesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductCategoriesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductCategoriesInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductCategoriesInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductCategoriesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProductCategoriesInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface CategoryProductImagesInner
 */
export interface CategoryProductImagesInner {
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInner
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInner
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof CategoryProductImagesInner
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInner
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof CategoryProductImagesInner
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProductImagesInner
     */
    'related'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {CategoryProductImagesInnerFolder}
     * @memberof CategoryProductImagesInner
     */
    'folder'?: CategoryProductImagesInnerFolder;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProductImagesInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface CategoryProductImagesInnerFolder
 */
export interface CategoryProductImagesInnerFolder {
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInnerFolder
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolder
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolder
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInnerFolder
     */
    'pathId'?: number;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolder
     */
    'parent'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProductImagesInnerFolder
     */
    'children'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<CategoryProductImagesInnerFolderFilesInner>}
     * @memberof CategoryProductImagesInnerFolder
     */
    'files'?: Array<CategoryProductImagesInnerFolderFilesInner>;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolder
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolder
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolder
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolder
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolder
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolder
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolder
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProductImagesInnerFolder
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface CategoryProductImagesInnerFolderFilesInner
 */
export interface CategoryProductImagesInnerFolderFilesInner {
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'related'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'folder'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {CategoryProductImagesInnerFolderFilesInnerCreatedBy}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'createdBy'?: CategoryProductImagesInnerFolderFilesInnerCreatedBy;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProductImagesInnerFolderFilesInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface CategoryProductImagesInnerFolderFilesInnerCreatedBy
 */
export interface CategoryProductImagesInnerFolderFilesInnerCreatedBy {
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'registrationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {Array<CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner>}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'roles'?: Array<CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner>;
    /**
     * 
     * @type {boolean}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'preferedLanguage'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedBy
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
 */
export interface CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner {
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'description'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'users'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner>}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'permissions'?: Array<CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner>;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
 */
export interface CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner {
    /**
     * 
     * @type {number}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'action'?: string;
    /**
     * 
     * @type {any}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'actionParameters'?: any;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'subject'?: string;
    /**
     * 
     * @type {any}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'properties'?: any;
    /**
     * 
     * @type {any}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'conditions'?: any;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'role'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CategoryProductImagesInnerFolderFilesInnerCreatedByRolesInnerPermissionsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface CategoryRequest
 */
export interface CategoryRequest {
    /**
     * 
     * @type {CategoryRequestData}
     * @memberof CategoryRequest
     */
    'data': CategoryRequestData;
}
/**
 * 
 * @export
 * @interface CategoryRequestData
 */
export interface CategoryRequestData {
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof CategoryRequestData
     */
    'product'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof CategoryRequestData
     */
    'articles'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof CategoryRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
    /**
     * 
     * @type {Category}
     * @memberof CategoryResponse
     */
    'data'?: Category;
    /**
     * 
     * @type {object}
     * @memberof CategoryResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ClientStage
 */
export interface ClientStage {
    /**
     * 
     * @type {number}
     * @memberof ClientStage
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStage
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStage
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ClientStage
     */
    'purpose'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStage
     */
    'focus_on'?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientStage
     */
    'follow_up_automation_days'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStage
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClientStage
     */
    'isActiveStage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientStage
     */
    'isSOIStage'?: boolean;
    /**
     * 
     * @type {Array<ClientStageCustomersInner>}
     * @memberof ClientStage
     */
    'customers'?: Array<ClientStageCustomersInner>;
    /**
     * 
     * @type {string}
     * @memberof ClientStage
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStage
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStage
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStage
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStage
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStage
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStage
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ClientStageCustomersInner
 */
export interface ClientStageCustomersInner {
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInner
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInner
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInner
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInner
     */
    'source'?: ClientStageCustomersInnerSourceEnum;
    /**
     * 
     * @type {ClientStageCustomersInnerAgent}
     * @memberof ClientStageCustomersInner
     */
    'agent'?: ClientStageCustomersInnerAgent;
    /**
     * 
     * @type {ClientStageCustomersInnerStage}
     * @memberof ClientStageCustomersInner
     */
    'stage'?: ClientStageCustomersInnerStage;
    /**
     * 
     * @type {Array<ClientStageCustomersInnerDealsInner>}
     * @memberof ClientStageCustomersInner
     */
    'deals'?: Array<ClientStageCustomersInnerDealsInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInner
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInner
     */
    'lastContacted'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInner
     */
    'nextFollowUp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const ClientStageCustomersInnerSourceEnum = {
    Website: 'website',
    Facebook: 'facebook',
    Zalo: 'zalo',
    Referral: 'referral',
    Event: 'event',
    Other: 'other'
} as const;

export type ClientStageCustomersInnerSourceEnum = typeof ClientStageCustomersInnerSourceEnum[keyof typeof ClientStageCustomersInnerSourceEnum];

/**
 * 
 * @export
 * @interface ClientStageCustomersInnerAgent
 */
export interface ClientStageCustomersInnerAgent {
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerAgent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgent
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgent
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgent
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgent
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgent
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgent
     */
    'confirmationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClientStageCustomersInnerAgent
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientStageCustomersInnerAgent
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {ClientStageCustomersInnerAgentRole}
     * @memberof ClientStageCustomersInnerAgent
     */
    'role'?: ClientStageCustomersInnerAgentRole;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgent
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgent
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgent
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerAgent
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerAgent
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgent
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerAgent
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ClientStageCustomersInnerAgentRole
 */
export interface ClientStageCustomersInnerAgentRole {
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'type'?: string;
    /**
     * 
     * @type {Array<ClientStageCustomersInnerAgentRolePermissionsInner>}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'permissions'?: Array<ClientStageCustomersInnerAgentRolePermissionsInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'users'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerAgentRole
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ClientStageCustomersInnerAgentRolePermissionsInner
 */
export interface ClientStageCustomersInnerAgentRolePermissionsInner {
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerAgentRolePermissionsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRolePermissionsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRolePermissionsInner
     */
    'action'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerAgentRolePermissionsInner
     */
    'role'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRolePermissionsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRolePermissionsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRolePermissionsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {CategoryProductImagesInnerFolderFilesInnerCreatedBy}
     * @memberof ClientStageCustomersInnerAgentRolePermissionsInner
     */
    'createdBy'?: CategoryProductImagesInnerFolderFilesInnerCreatedBy;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerAgentRolePermissionsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerAgentRolePermissionsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerAgentRolePermissionsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ClientStageCustomersInnerDealsInner
 */
export interface ClientStageCustomersInnerDealsInner {
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'title'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'status'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'dealValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'dealDate'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'customer'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ClientStageCustomersInnerDealsInnerProperty}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'property'?: ClientStageCustomersInnerDealsInnerProperty;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'agent'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerDealsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ClientStageCustomersInnerDealsInnerProperty
 */
export interface ClientStageCustomersInnerDealsInnerProperty {
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'propertyType'?: ClientStageCustomersInnerDealsInnerPropertyPropertyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'location'?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'bedrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'bathrooms'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'status'?: ClientStageCustomersInnerDealsInnerPropertyStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'description'?: string;
    /**
     * 
     * @type {Array<ClientStageCustomersInnerDealsInnerPropertyImagesInner>}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'images'?: Array<ClientStageCustomersInnerDealsInnerPropertyImagesInner>;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'listedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'deals'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ClientStageCustomersInnerDealsInnerPropertyNotesInner>}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'notes'?: Array<ClientStageCustomersInnerDealsInnerPropertyNotesInner>;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerDealsInnerProperty
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const ClientStageCustomersInnerDealsInnerPropertyPropertyTypeEnum = {
    Apartment: 'apartment',
    House: 'house',
    Land: 'land',
    Villa: 'villa',
    Commercial: 'commercial',
    Other: 'other'
} as const;

export type ClientStageCustomersInnerDealsInnerPropertyPropertyTypeEnum = typeof ClientStageCustomersInnerDealsInnerPropertyPropertyTypeEnum[keyof typeof ClientStageCustomersInnerDealsInnerPropertyPropertyTypeEnum];
export const ClientStageCustomersInnerDealsInnerPropertyStatusEnum = {
    Available: 'available',
    Sold: 'sold',
    Pending: 'pending',
    OffMarket: 'off-market'
} as const;

export type ClientStageCustomersInnerDealsInnerPropertyStatusEnum = typeof ClientStageCustomersInnerDealsInnerPropertyStatusEnum[keyof typeof ClientStageCustomersInnerDealsInnerPropertyStatusEnum];

/**
 * 
 * @export
 * @interface ClientStageCustomersInnerDealsInnerPropertyImagesInner
 */
export interface ClientStageCustomersInnerDealsInnerPropertyImagesInner {
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'related'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'folder'?: ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
 */
export interface ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder {
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'pathId'?: number;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'parent'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'children'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInner>}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'files'?: Array<ArticleCategoriesInnerProductImagesInner>;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyImagesInnerFolder
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ClientStageCustomersInnerDealsInnerPropertyNotesInner
 */
export interface ClientStageCustomersInnerDealsInnerPropertyNotesInner {
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'content'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'createdByUser'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'customer'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'deal'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'property'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'task'?: ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
 */
export interface ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask {
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'dueDate'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'assignedTo'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'status'?: ClientStageCustomersInnerDealsInnerPropertyNotesInnerTaskStatusEnum;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'relatedDeal'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const ClientStageCustomersInnerDealsInnerPropertyNotesInnerTaskStatusEnum = {
    Pending: 'pending',
    InProgress: 'in_progress',
    Completed: 'completed'
} as const;

export type ClientStageCustomersInnerDealsInnerPropertyNotesInnerTaskStatusEnum = typeof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTaskStatusEnum[keyof typeof ClientStageCustomersInnerDealsInnerPropertyNotesInnerTaskStatusEnum];

/**
 * 
 * @export
 * @interface ClientStageCustomersInnerStage
 */
export interface ClientStageCustomersInnerStage {
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerStage
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerStage
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerStage
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerStage
     */
    'purpose'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerStage
     */
    'focus_on'?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientStageCustomersInnerStage
     */
    'follow_up_automation_days'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerStage
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClientStageCustomersInnerStage
     */
    'isActiveStage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientStageCustomersInnerStage
     */
    'isSOIStage'?: boolean;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerStage
     */
    'customers'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerStage
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerStage
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerStage
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerStage
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ClientStageCustomersInnerStage
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ClientStageCustomersInnerStage
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ClientStageCustomersInnerStage
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ClientStageListResponse
 */
export interface ClientStageListResponse {
    /**
     * 
     * @type {Array<ClientStage>}
     * @memberof ClientStageListResponse
     */
    'data'?: Array<ClientStage>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof ClientStageListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface ClientStageRequest
 */
export interface ClientStageRequest {
    /**
     * 
     * @type {ClientStageRequestData}
     * @memberof ClientStageRequest
     */
    'data': ClientStageRequestData;
}
/**
 * 
 * @export
 * @interface ClientStageRequestData
 */
export interface ClientStageRequestData {
    /**
     * 
     * @type {string}
     * @memberof ClientStageRequestData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageRequestData
     */
    'purpose'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStageRequestData
     */
    'focus_on'?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientStageRequestData
     */
    'follow_up_automation_days'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientStageRequestData
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClientStageRequestData
     */
    'isActiveStage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientStageRequestData
     */
    'isSOIStage'?: boolean;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof ClientStageRequestData
     */
    'customers'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {string}
     * @memberof ClientStageRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof ClientStageRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface ClientStageResponse
 */
export interface ClientStageResponse {
    /**
     * 
     * @type {ClientStage}
     * @memberof ClientStageResponse
     */
    'data'?: ClientStage;
    /**
     * 
     * @type {object}
     * @memberof ClientStageResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'source'?: CustomerSourceEnum;
    /**
     * 
     * @type {ClientStageCustomersInnerAgent}
     * @memberof Customer
     */
    'agent'?: ClientStageCustomersInnerAgent;
    /**
     * 
     * @type {CustomerStage}
     * @memberof Customer
     */
    'stage'?: CustomerStage;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Customer
     */
    'deals'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Customer
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'lastContacted'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'nextFollowUp'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Customer
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Customer
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Customer
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const CustomerSourceEnum = {
    Website: 'website',
    Facebook: 'facebook',
    Zalo: 'zalo',
    Referral: 'referral',
    Event: 'event',
    Other: 'other'
} as const;

export type CustomerSourceEnum = typeof CustomerSourceEnum[keyof typeof CustomerSourceEnum];

/**
 * 
 * @export
 * @interface CustomerListResponse
 */
export interface CustomerListResponse {
    /**
     * 
     * @type {Array<Customer>}
     * @memberof CustomerListResponse
     */
    'data'?: Array<Customer>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof CustomerListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface CustomerRequest
 */
export interface CustomerRequest {
    /**
     * 
     * @type {CustomerRequestData}
     * @memberof CustomerRequest
     */
    'data': CustomerRequestData;
}
/**
 * 
 * @export
 * @interface CustomerRequestData
 */
export interface CustomerRequestData {
    /**
     * 
     * @type {string}
     * @memberof CustomerRequestData
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRequestData
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRequestData
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRequestData
     */
    'source'?: CustomerRequestDataSourceEnum;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof CustomerRequestData
     */
    'agent'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof CustomerRequestData
     */
    'stage'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof CustomerRequestData
     */
    'deals'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof CustomerRequestData
     */
    'notes'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {string}
     * @memberof CustomerRequestData
     */
    'lastContacted'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRequestData
     */
    'nextFollowUp'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof CustomerRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}

export const CustomerRequestDataSourceEnum = {
    Website: 'website',
    Facebook: 'facebook',
    Zalo: 'zalo',
    Referral: 'referral',
    Event: 'event',
    Other: 'other'
} as const;

export type CustomerRequestDataSourceEnum = typeof CustomerRequestDataSourceEnum[keyof typeof CustomerRequestDataSourceEnum];

/**
 * 
 * @export
 * @interface CustomerResponse
 */
export interface CustomerResponse {
    /**
     * 
     * @type {Customer}
     * @memberof CustomerResponse
     */
    'data'?: Customer;
    /**
     * 
     * @type {object}
     * @memberof CustomerResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface CustomerStage
 */
export interface CustomerStage {
    /**
     * 
     * @type {number}
     * @memberof CustomerStage
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerStage
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStage
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStage
     */
    'purpose'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStage
     */
    'focus_on'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerStage
     */
    'follow_up_automation_days'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerStage
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerStage
     */
    'isActiveStage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerStage
     */
    'isSOIStage'?: boolean;
    /**
     * 
     * @type {Array<CustomerStageCustomersInner>}
     * @memberof CustomerStage
     */
    'customers'?: Array<CustomerStageCustomersInner>;
    /**
     * 
     * @type {string}
     * @memberof CustomerStage
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStage
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStage
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CustomerStage
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CustomerStage
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CustomerStage
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CustomerStage
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface CustomerStageCustomersInner
 */
export interface CustomerStageCustomersInner {
    /**
     * 
     * @type {number}
     * @memberof CustomerStageCustomersInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerStageCustomersInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStageCustomersInner
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStageCustomersInner
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStageCustomersInner
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStageCustomersInner
     */
    'source'?: CustomerStageCustomersInnerSourceEnum;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CustomerStageCustomersInner
     */
    'agent'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CustomerStageCustomersInner
     */
    'stage'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ClientStageCustomersInnerDealsInner>}
     * @memberof CustomerStageCustomersInner
     */
    'deals'?: Array<ClientStageCustomersInnerDealsInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CustomerStageCustomersInner
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof CustomerStageCustomersInner
     */
    'lastContacted'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStageCustomersInner
     */
    'nextFollowUp'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStageCustomersInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStageCustomersInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerStageCustomersInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CustomerStageCustomersInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof CustomerStageCustomersInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof CustomerStageCustomersInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof CustomerStageCustomersInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const CustomerStageCustomersInnerSourceEnum = {
    Website: 'website',
    Facebook: 'facebook',
    Zalo: 'zalo',
    Referral: 'referral',
    Event: 'event',
    Other: 'other'
} as const;

export type CustomerStageCustomersInnerSourceEnum = typeof CustomerStageCustomersInnerSourceEnum[keyof typeof CustomerStageCustomersInnerSourceEnum];

/**
 * 
 * @export
 * @interface Deal
 */
export interface Deal {
    /**
     * 
     * @type {number}
     * @memberof Deal
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Deal
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Deal
     */
    'title': string;
    /**
     * 
     * @type {DealStatus}
     * @memberof Deal
     */
    'status'?: DealStatus;
    /**
     * 
     * @type {number}
     * @memberof Deal
     */
    'dealValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof Deal
     */
    'dealDate'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Deal
     */
    'customer'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Deal
     */
    'property'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Deal
     */
    'agent'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Deal
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof Deal
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Deal
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Deal
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Deal
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Deal
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Deal
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Deal
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface DealListResponse
 */
export interface DealListResponse {
    /**
     * 
     * @type {Array<Deal>}
     * @memberof DealListResponse
     */
    'data'?: Array<Deal>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof DealListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface DealRequest
 */
export interface DealRequest {
    /**
     * 
     * @type {DealRequestData}
     * @memberof DealRequest
     */
    'data': DealRequestData;
}
/**
 * 
 * @export
 * @interface DealRequestData
 */
export interface DealRequestData {
    /**
     * 
     * @type {string}
     * @memberof DealRequestData
     */
    'title': string;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof DealRequestData
     */
    'status'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {number}
     * @memberof DealRequestData
     */
    'dealValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof DealRequestData
     */
    'dealDate'?: string;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof DealRequestData
     */
    'customer'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof DealRequestData
     */
    'property'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof DealRequestData
     */
    'agent'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof DealRequestData
     */
    'notes'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {string}
     * @memberof DealRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof DealRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface DealResponse
 */
export interface DealResponse {
    /**
     * 
     * @type {Deal}
     * @memberof DealResponse
     */
    'data'?: Deal;
    /**
     * 
     * @type {object}
     * @memberof DealResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface DealStatus
 */
export interface DealStatus {
    /**
     * 
     * @type {number}
     * @memberof DealStatus
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DealStatus
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatus
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatus
     */
    'purpose'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatus
     */
    'focus_on'?: string;
    /**
     * 
     * @type {number}
     * @memberof DealStatus
     */
    'follow_up_automation_days'?: number;
    /**
     * 
     * @type {string}
     * @memberof DealStatus
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DealStatus
     */
    'isActiveStage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DealStatus
     */
    'isSOIStage'?: boolean;
    /**
     * 
     * @type {Array<DealStatusCustomersInner>}
     * @memberof DealStatus
     */
    'customers'?: Array<DealStatusCustomersInner>;
    /**
     * 
     * @type {string}
     * @memberof DealStatus
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatus
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatus
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof DealStatus
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof DealStatus
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof DealStatus
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof DealStatus
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface DealStatusCustomersInner
 */
export interface DealStatusCustomersInner {
    /**
     * 
     * @type {number}
     * @memberof DealStatusCustomersInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DealStatusCustomersInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatusCustomersInner
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatusCustomersInner
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatusCustomersInner
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatusCustomersInner
     */
    'source'?: DealStatusCustomersInnerSourceEnum;
    /**
     * 
     * @type {ClientStageCustomersInnerAgent}
     * @memberof DealStatusCustomersInner
     */
    'agent'?: ClientStageCustomersInnerAgent;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof DealStatusCustomersInner
     */
    'stage'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ClientStageCustomersInnerDealsInner>}
     * @memberof DealStatusCustomersInner
     */
    'deals'?: Array<ClientStageCustomersInnerDealsInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof DealStatusCustomersInner
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof DealStatusCustomersInner
     */
    'lastContacted'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatusCustomersInner
     */
    'nextFollowUp'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatusCustomersInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatusCustomersInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DealStatusCustomersInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof DealStatusCustomersInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof DealStatusCustomersInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof DealStatusCustomersInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof DealStatusCustomersInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const DealStatusCustomersInnerSourceEnum = {
    Website: 'website',
    Facebook: 'facebook',
    Zalo: 'zalo',
    Referral: 'referral',
    Event: 'event',
    Other: 'other'
} as const;

export type DealStatusCustomersInnerSourceEnum = typeof DealStatusCustomersInnerSourceEnum[keyof typeof DealStatusCustomersInnerSourceEnum];

/**
 * 
 * @export
 * @interface DynamicZoneBrandsComponent
 */
export interface DynamicZoneBrandsComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZoneBrandsComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneBrandsComponent
     */
    '__component'?: DynamicZoneBrandsComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneBrandsComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneBrandsComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof DynamicZoneBrandsComponent
     */
    'logos'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const DynamicZoneBrandsComponentComponentEnum = {
    DynamicZoneBrands: 'dynamic-zone.brands'
} as const;

export type DynamicZoneBrandsComponentComponentEnum = typeof DynamicZoneBrandsComponentComponentEnum[keyof typeof DynamicZoneBrandsComponentComponentEnum];

/**
 * 
 * @export
 * @interface DynamicZoneCtaComponent
 */
export interface DynamicZoneCtaComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZoneCtaComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneCtaComponent
     */
    '__component'?: DynamicZoneCtaComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneCtaComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneCtaComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<SharedButtonComponent>}
     * @memberof DynamicZoneCtaComponent
     */
    'CTAs'?: Array<SharedButtonComponent>;
}

export const DynamicZoneCtaComponentComponentEnum = {
    DynamicZoneCta: 'dynamic-zone.cta'
} as const;

export type DynamicZoneCtaComponentComponentEnum = typeof DynamicZoneCtaComponentComponentEnum[keyof typeof DynamicZoneCtaComponentComponentEnum];

/**
 * 
 * @export
 * @interface DynamicZoneFaqComponent
 */
export interface DynamicZoneFaqComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZoneFaqComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneFaqComponent
     */
    '__component'?: DynamicZoneFaqComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneFaqComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneFaqComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof DynamicZoneFaqComponent
     */
    'faqs'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const DynamicZoneFaqComponentComponentEnum = {
    DynamicZoneFaq: 'dynamic-zone.faq'
} as const;

export type DynamicZoneFaqComponentComponentEnum = typeof DynamicZoneFaqComponentComponentEnum[keyof typeof DynamicZoneFaqComponentComponentEnum];

/**
 * 
 * @export
 * @interface DynamicZoneFeaturesComponent
 */
export interface DynamicZoneFeaturesComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZoneFeaturesComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneFeaturesComponent
     */
    '__component'?: DynamicZoneFeaturesComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneFeaturesComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneFeaturesComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {CardsGlobeCardComponent}
     * @memberof DynamicZoneFeaturesComponent
     */
    'globe_card'?: CardsGlobeCardComponent;
    /**
     * 
     * @type {CardsRayCardComponent}
     * @memberof DynamicZoneFeaturesComponent
     */
    'ray_card'?: CardsRayCardComponent;
    /**
     * 
     * @type {CardsGraphCardComponent}
     * @memberof DynamicZoneFeaturesComponent
     */
    'graph_card'?: CardsGraphCardComponent;
    /**
     * 
     * @type {CardsSocialMediaCardComponent}
     * @memberof DynamicZoneFeaturesComponent
     */
    'social_media_card'?: CardsSocialMediaCardComponent;
}

export const DynamicZoneFeaturesComponentComponentEnum = {
    DynamicZoneFeatures: 'dynamic-zone.features'
} as const;

export type DynamicZoneFeaturesComponentComponentEnum = typeof DynamicZoneFeaturesComponentComponentEnum[keyof typeof DynamicZoneFeaturesComponentComponentEnum];

/**
 * 
 * @export
 * @interface DynamicZoneFormNextToSectionComponent
 */
export interface DynamicZoneFormNextToSectionComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZoneFormNextToSectionComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneFormNextToSectionComponent
     */
    '__component'?: DynamicZoneFormNextToSectionComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneFormNextToSectionComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneFormNextToSectionComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {SharedFormComponent}
     * @memberof DynamicZoneFormNextToSectionComponent
     */
    'form'?: SharedFormComponent;
    /**
     * 
     * @type {SharedSectionComponent}
     * @memberof DynamicZoneFormNextToSectionComponent
     */
    'section'?: SharedSectionComponent;
    /**
     * 
     * @type {Array<SharedSocialMediaIconLinksComponent>}
     * @memberof DynamicZoneFormNextToSectionComponent
     */
    'social_media_icon_links'?: Array<SharedSocialMediaIconLinksComponent>;
}

export const DynamicZoneFormNextToSectionComponentComponentEnum = {
    DynamicZoneFormNextToSection: 'dynamic-zone.form-next-to-section'
} as const;

export type DynamicZoneFormNextToSectionComponentComponentEnum = typeof DynamicZoneFormNextToSectionComponentComponentEnum[keyof typeof DynamicZoneFormNextToSectionComponentComponentEnum];

/**
 * 
 * @export
 * @interface DynamicZoneHeroComponent
 */
export interface DynamicZoneHeroComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZoneHeroComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneHeroComponent
     */
    '__component'?: DynamicZoneHeroComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneHeroComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneHeroComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<SharedButtonComponent>}
     * @memberof DynamicZoneHeroComponent
     */
    'CTAs'?: Array<SharedButtonComponent>;
}

export const DynamicZoneHeroComponentComponentEnum = {
    DynamicZoneHero: 'dynamic-zone.hero'
} as const;

export type DynamicZoneHeroComponentComponentEnum = typeof DynamicZoneHeroComponentComponentEnum[keyof typeof DynamicZoneHeroComponentComponentEnum];

/**
 * 
 * @export
 * @interface DynamicZoneHowItWorksComponent
 */
export interface DynamicZoneHowItWorksComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZoneHowItWorksComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneHowItWorksComponent
     */
    '__component'?: DynamicZoneHowItWorksComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneHowItWorksComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneHowItWorksComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<SharedStepsComponent>}
     * @memberof DynamicZoneHowItWorksComponent
     */
    'steps'?: Array<SharedStepsComponent>;
}

export const DynamicZoneHowItWorksComponentComponentEnum = {
    DynamicZoneHowItWorks: 'dynamic-zone.how-it-works'
} as const;

export type DynamicZoneHowItWorksComponentComponentEnum = typeof DynamicZoneHowItWorksComponentComponentEnum[keyof typeof DynamicZoneHowItWorksComponentComponentEnum];

/**
 * 
 * @export
 * @interface DynamicZoneLaunchesComponent
 */
export interface DynamicZoneLaunchesComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZoneLaunchesComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneLaunchesComponent
     */
    '__component'?: DynamicZoneLaunchesComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneLaunchesComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneLaunchesComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<SharedLaunchesComponent>}
     * @memberof DynamicZoneLaunchesComponent
     */
    'launches'?: Array<SharedLaunchesComponent>;
}

export const DynamicZoneLaunchesComponentComponentEnum = {
    DynamicZoneLaunches: 'dynamic-zone.launches'
} as const;

export type DynamicZoneLaunchesComponentComponentEnum = typeof DynamicZoneLaunchesComponentComponentEnum[keyof typeof DynamicZoneLaunchesComponentComponentEnum];

/**
 * 
 * @export
 * @interface DynamicZonePricingComponent
 */
export interface DynamicZonePricingComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZonePricingComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZonePricingComponent
     */
    '__component'?: DynamicZonePricingComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZonePricingComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZonePricingComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof DynamicZonePricingComponent
     */
    'plans'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const DynamicZonePricingComponentComponentEnum = {
    DynamicZonePricing: 'dynamic-zone.pricing'
} as const;

export type DynamicZonePricingComponentComponentEnum = typeof DynamicZonePricingComponentComponentEnum[keyof typeof DynamicZonePricingComponentComponentEnum];

/**
 * 
 * @export
 * @interface DynamicZoneRelatedArticlesComponent
 */
export interface DynamicZoneRelatedArticlesComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZoneRelatedArticlesComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneRelatedArticlesComponent
     */
    '__component'?: DynamicZoneRelatedArticlesComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneRelatedArticlesComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneRelatedArticlesComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof DynamicZoneRelatedArticlesComponent
     */
    'articles'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const DynamicZoneRelatedArticlesComponentComponentEnum = {
    DynamicZoneRelatedArticles: 'dynamic-zone.related-articles'
} as const;

export type DynamicZoneRelatedArticlesComponentComponentEnum = typeof DynamicZoneRelatedArticlesComponentComponentEnum[keyof typeof DynamicZoneRelatedArticlesComponentComponentEnum];

/**
 * 
 * @export
 * @interface DynamicZoneRelatedProductsComponent
 */
export interface DynamicZoneRelatedProductsComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZoneRelatedProductsComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneRelatedProductsComponent
     */
    '__component'?: DynamicZoneRelatedProductsComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneRelatedProductsComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneRelatedProductsComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof DynamicZoneRelatedProductsComponent
     */
    'products'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const DynamicZoneRelatedProductsComponentComponentEnum = {
    DynamicZoneRelatedProducts: 'dynamic-zone.related-products'
} as const;

export type DynamicZoneRelatedProductsComponentComponentEnum = typeof DynamicZoneRelatedProductsComponentComponentEnum[keyof typeof DynamicZoneRelatedProductsComponentComponentEnum];

/**
 * 
 * @export
 * @interface DynamicZoneTestimonialsComponent
 */
export interface DynamicZoneTestimonialsComponent {
    /**
     * 
     * @type {number}
     * @memberof DynamicZoneTestimonialsComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneTestimonialsComponent
     */
    '__component'?: DynamicZoneTestimonialsComponentComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneTestimonialsComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicZoneTestimonialsComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof DynamicZoneTestimonialsComponent
     */
    'testimonials'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const DynamicZoneTestimonialsComponentComponentEnum = {
    DynamicZoneTestimonials: 'dynamic-zone.testimonials'
} as const;

export type DynamicZoneTestimonialsComponentComponentEnum = typeof DynamicZoneTestimonialsComponentComponentEnum[keyof typeof DynamicZoneTestimonialsComponentComponentEnum];

/**
 * @type ErrorData
 * @export
 */
export type ErrorData = Array<object> | object;

/**
 * 
 * @export
 * @interface ErrorError
 */
export interface ErrorError {
    /**
     * 
     * @type {number}
     * @memberof ErrorError
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof ErrorError
     */
    'details'?: object;
}
/**
 * 
 * @export
 * @interface Faq
 */
export interface Faq {
    /**
     * 
     * @type {number}
     * @memberof Faq
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Faq
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Faq
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof Faq
     */
    'answer'?: string;
    /**
     * 
     * @type {string}
     * @memberof Faq
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Faq
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Faq
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {CategoryProductImagesInnerFolderFilesInnerCreatedBy}
     * @memberof Faq
     */
    'createdBy'?: CategoryProductImagesInnerFolderFilesInnerCreatedBy;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Faq
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Faq
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<FaqLocalizationsInner>}
     * @memberof Faq
     */
    'localizations'?: Array<FaqLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface FaqListResponse
 */
export interface FaqListResponse {
    /**
     * 
     * @type {Array<Faq>}
     * @memberof FaqListResponse
     */
    'data'?: Array<Faq>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof FaqListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface FaqLocalizationsInner
 */
export interface FaqLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof FaqLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FaqLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqLocalizationsInner
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqLocalizationsInner
     */
    'answer'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof FaqLocalizationsInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof FaqLocalizationsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof FaqLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof FaqLocalizationsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface FaqRequest
 */
export interface FaqRequest {
    /**
     * 
     * @type {FaqRequestData}
     * @memberof FaqRequest
     */
    'data': FaqRequestData;
}
/**
 * 
 * @export
 * @interface FaqRequestData
 */
export interface FaqRequestData {
    /**
     * 
     * @type {string}
     * @memberof FaqRequestData
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqRequestData
     */
    'answer'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof FaqRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface FaqResponse
 */
export interface FaqResponse {
    /**
     * 
     * @type {Faq}
     * @memberof FaqResponse
     */
    'data'?: Faq;
    /**
     * 
     * @type {object}
     * @memberof FaqResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Global
 */
export interface Global {
    /**
     * 
     * @type {number}
     * @memberof Global
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Global
     */
    'documentId'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof Global
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {GlobalNavbarComponent}
     * @memberof Global
     */
    'navbar'?: GlobalNavbarComponent;
    /**
     * 
     * @type {GlobalFooterComponent}
     * @memberof Global
     */
    'footer'?: GlobalFooterComponent;
    /**
     * 
     * @type {string}
     * @memberof Global
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Global
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Global
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Global
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Global
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Global
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<GlobalLocalizationsInner>}
     * @memberof Global
     */
    'localizations'?: Array<GlobalLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface GlobalFooterComponent
 */
export interface GlobalFooterComponent {
    /**
     * 
     * @type {number}
     * @memberof GlobalFooterComponent
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof GlobalFooterComponent
     */
    'logo'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof GlobalFooterComponent
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalFooterComponent
     */
    'copyright'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalFooterComponent
     */
    'designed_developed_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalFooterComponent
     */
    'built_with'?: string;
    /**
     * 
     * @type {Array<SharedLinkComponent>}
     * @memberof GlobalFooterComponent
     */
    'internal_links'?: Array<SharedLinkComponent>;
    /**
     * 
     * @type {Array<SharedLinkComponent>}
     * @memberof GlobalFooterComponent
     */
    'policy_links'?: Array<SharedLinkComponent>;
    /**
     * 
     * @type {Array<SharedLinkComponent>}
     * @memberof GlobalFooterComponent
     */
    'social_media_links'?: Array<SharedLinkComponent>;
}
/**
 * 
 * @export
 * @interface GlobalListResponse
 */
export interface GlobalListResponse {
    /**
     * 
     * @type {Array<Global>}
     * @memberof GlobalListResponse
     */
    'data'?: Array<Global>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof GlobalListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface GlobalLocalizationsInner
 */
export interface GlobalLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof GlobalLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof GlobalLocalizationsInner
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {GlobalNavbarComponent}
     * @memberof GlobalLocalizationsInner
     */
    'navbar'?: GlobalNavbarComponent;
    /**
     * 
     * @type {GlobalFooterComponent}
     * @memberof GlobalLocalizationsInner
     */
    'footer'?: GlobalFooterComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof GlobalLocalizationsInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof GlobalLocalizationsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof GlobalLocalizationsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface GlobalNavbarComponent
 */
export interface GlobalNavbarComponent {
    /**
     * 
     * @type {number}
     * @memberof GlobalNavbarComponent
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof GlobalNavbarComponent
     */
    'logo'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<SharedLinkComponent>}
     * @memberof GlobalNavbarComponent
     */
    'left_navbar_items'?: Array<SharedLinkComponent>;
    /**
     * 
     * @type {Array<SharedLinkComponent>}
     * @memberof GlobalNavbarComponent
     */
    'right_navbar_items'?: Array<SharedLinkComponent>;
}
/**
 * 
 * @export
 * @interface GlobalRequest
 */
export interface GlobalRequest {
    /**
     * 
     * @type {GlobalRequestData}
     * @memberof GlobalRequest
     */
    'data': GlobalRequestData;
}
/**
 * 
 * @export
 * @interface GlobalRequestData
 */
export interface GlobalRequestData {
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof GlobalRequestData
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {GlobalNavbarComponent}
     * @memberof GlobalRequestData
     */
    'navbar'?: GlobalNavbarComponent;
    /**
     * 
     * @type {GlobalFooterComponent}
     * @memberof GlobalRequestData
     */
    'footer'?: GlobalFooterComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof GlobalRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface GlobalResponse
 */
export interface GlobalResponse {
    /**
     * 
     * @type {Global}
     * @memberof GlobalResponse
     */
    'data'?: Global;
    /**
     * 
     * @type {object}
     * @memberof GlobalResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ItemsGraphCardTopItemsComponent
 */
export interface ItemsGraphCardTopItemsComponent {
    /**
     * 
     * @type {number}
     * @memberof ItemsGraphCardTopItemsComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ItemsGraphCardTopItemsComponent
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemsGraphCardTopItemsComponent
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface ItemsInputComponent
 */
export interface ItemsInputComponent {
    /**
     * 
     * @type {number}
     * @memberof ItemsInputComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ItemsInputComponent
     */
    'type'?: ItemsInputComponentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ItemsInputComponent
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemsInputComponent
     */
    'placeholder'?: string;
}

export const ItemsInputComponentTypeEnum = {
    Text: 'text',
    Email: 'email',
    Password: 'password',
    Submit: 'submit',
    Textarea: 'textarea',
    Button: 'button',
    Checkbox: 'checkbox',
    Color: 'color',
    Date: 'date',
    DatetimeLocal: 'datetime-local',
    File: 'file',
    Hidden: 'hidden',
    Image: 'image',
    Month: 'month',
    Number: 'number',
    Radio: 'radio',
    Range: 'range',
    Reset: 'reset',
    Search: 'search',
    Tel: 'tel',
    Time: 'time',
    Url: 'url',
    Week: 'week'
} as const;

export type ItemsInputComponentTypeEnum = typeof ItemsInputComponentTypeEnum[keyof typeof ItemsInputComponentTypeEnum];

/**
 * 
 * @export
 * @interface ItemsRayItemsComponent
 */
export interface ItemsRayItemsComponent {
    /**
     * 
     * @type {number}
     * @memberof ItemsRayItemsComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ItemsRayItemsComponent
     */
    'item_1'?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemsRayItemsComponent
     */
    'item_2'?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemsRayItemsComponent
     */
    'item_3'?: string;
}
/**
 * 
 * @export
 * @interface Logo
 */
export interface Logo {
    /**
     * 
     * @type {number}
     * @memberof Logo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Logo
     */
    'documentId'?: string;
    /**
     * 
     * @type {CategoryProductImagesInner}
     * @memberof Logo
     */
    'image': CategoryProductImagesInner;
    /**
     * 
     * @type {string}
     * @memberof Logo
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof Logo
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Logo
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Logo
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Logo
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Logo
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Logo
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<LogoLocalizationsInner>}
     * @memberof Logo
     */
    'localizations'?: Array<LogoLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface LogoListResponse
 */
export interface LogoListResponse {
    /**
     * 
     * @type {Array<Logo>}
     * @memberof LogoListResponse
     */
    'data'?: Array<Logo>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof LogoListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface LogoLocalizationsInner
 */
export interface LogoLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof LogoLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LogoLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInner}
     * @memberof LogoLocalizationsInner
     */
    'image'?: ArticleCategoriesInnerProductImagesInner;
    /**
     * 
     * @type {string}
     * @memberof LogoLocalizationsInner
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogoLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogoLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogoLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof LogoLocalizationsInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof LogoLocalizationsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof LogoLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof LogoLocalizationsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface LogoRequest
 */
export interface LogoRequest {
    /**
     * 
     * @type {LogoRequestData}
     * @memberof LogoRequest
     */
    'data': LogoRequestData;
}
/**
 * 
 * @export
 * @interface LogoRequestData
 */
export interface LogoRequestData {
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof LogoRequestData
     */
    'image': ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {string}
     * @memberof LogoRequestData
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogoRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof LogoRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface LogoResponse
 */
export interface LogoResponse {
    /**
     * 
     * @type {Logo}
     * @memberof LogoResponse
     */
    'data'?: Logo;
    /**
     * 
     * @type {object}
     * @memberof LogoResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {ErrorData}
     * @memberof ModelError
     */
    'data'?: ErrorData | null;
    /**
     * 
     * @type {ErrorError}
     * @memberof ModelError
     */
    'error': ErrorError;
}
/**
 * 
 * @export
 * @interface Note
 */
export interface Note {
    /**
     * 
     * @type {number}
     * @memberof Note
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'content': string;
    /**
     * 
     * @type {ClientStageCustomersInnerAgent}
     * @memberof Note
     */
    'createdByUser'?: ClientStageCustomersInnerAgent;
    /**
     * 
     * @type {NoteCustomer}
     * @memberof Note
     */
    'customer'?: NoteCustomer;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Note
     */
    'deal'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Note
     */
    'property'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Note
     */
    'task'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Note
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Note
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Note
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface NoteCustomer
 */
export interface NoteCustomer {
    /**
     * 
     * @type {number}
     * @memberof NoteCustomer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof NoteCustomer
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteCustomer
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteCustomer
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteCustomer
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteCustomer
     */
    'source'?: NoteCustomerSourceEnum;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof NoteCustomer
     */
    'agent'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ClientStageCustomersInnerStage}
     * @memberof NoteCustomer
     */
    'stage'?: ClientStageCustomersInnerStage;
    /**
     * 
     * @type {Array<ClientStageCustomersInnerDealsInner>}
     * @memberof NoteCustomer
     */
    'deals'?: Array<ClientStageCustomersInnerDealsInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof NoteCustomer
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof NoteCustomer
     */
    'lastContacted'?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteCustomer
     */
    'nextFollowUp'?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteCustomer
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteCustomer
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteCustomer
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof NoteCustomer
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof NoteCustomer
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof NoteCustomer
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof NoteCustomer
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const NoteCustomerSourceEnum = {
    Website: 'website',
    Facebook: 'facebook',
    Zalo: 'zalo',
    Referral: 'referral',
    Event: 'event',
    Other: 'other'
} as const;

export type NoteCustomerSourceEnum = typeof NoteCustomerSourceEnum[keyof typeof NoteCustomerSourceEnum];

/**
 * 
 * @export
 * @interface NoteListResponse
 */
export interface NoteListResponse {
    /**
     * 
     * @type {Array<Note>}
     * @memberof NoteListResponse
     */
    'data'?: Array<Note>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof NoteListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface NoteRequest
 */
export interface NoteRequest {
    /**
     * 
     * @type {NoteRequestData}
     * @memberof NoteRequest
     */
    'data': NoteRequestData;
}
/**
 * 
 * @export
 * @interface NoteRequestData
 */
export interface NoteRequestData {
    /**
     * 
     * @type {string}
     * @memberof NoteRequestData
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteRequestData
     */
    'content': string;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof NoteRequestData
     */
    'createdByUser'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof NoteRequestData
     */
    'customer'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof NoteRequestData
     */
    'deal'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof NoteRequestData
     */
    'property'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof NoteRequestData
     */
    'task'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {string}
     * @memberof NoteRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof NoteRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface NoteResponse
 */
export interface NoteResponse {
    /**
     * 
     * @type {Note}
     * @memberof NoteResponse
     */
    'data'?: Note;
    /**
     * 
     * @type {object}
     * @memberof NoteResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'documentId'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof Page
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'slug': string;
    /**
     * 
     * @type {Array<PageRequestDataDynamicZoneInner>}
     * @memberof Page
     */
    'dynamic_zone'?: Array<PageRequestDataDynamicZoneInner>;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Page
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Page
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<PageLocalizationsInner>}
     * @memberof Page
     */
    'localizations'?: Array<PageLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface PageListResponse
 */
export interface PageListResponse {
    /**
     * 
     * @type {Array<Page>}
     * @memberof PageListResponse
     */
    'data'?: Array<Page>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof PageListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface PageLocalizationsInner
 */
export interface PageLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof PageLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PageLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof PageLocalizationsInner
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof PageLocalizationsInner
     */
    'slug'?: string;
    /**
     * 
     * @type {Array<PageRequestDataDynamicZoneInner>}
     * @memberof PageLocalizationsInner
     */
    'dynamic_zone'?: Array<PageRequestDataDynamicZoneInner>;
    /**
     * 
     * @type {string}
     * @memberof PageLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PageLocalizationsInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PageLocalizationsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof PageLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PageLocalizationsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface PageRequest
 */
export interface PageRequest {
    /**
     * 
     * @type {PageRequestData}
     * @memberof PageRequest
     */
    'data': PageRequestData;
}
/**
 * 
 * @export
 * @interface PageRequestData
 */
export interface PageRequestData {
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof PageRequestData
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof PageRequestData
     */
    'slug': string;
    /**
     * 
     * @type {Array<PageRequestDataDynamicZoneInner>}
     * @memberof PageRequestData
     */
    'dynamic_zone'?: Array<PageRequestDataDynamicZoneInner>;
    /**
     * 
     * @type {string}
     * @memberof PageRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof PageRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface PageRequestDataDynamicZoneInner
 */
export interface PageRequestDataDynamicZoneInner {
    /**
     * 
     * @type {number}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PageRequestDataDynamicZoneInner
     */
    '__component'?: PageRequestDataDynamicZoneInnerComponentEnum;
    /**
     * 
     * @type {string}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<SharedButtonComponent>}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'CTAs'?: Array<SharedButtonComponent>;
    /**
     * 
     * @type {CardsGlobeCardComponent}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'globe_card'?: CardsGlobeCardComponent;
    /**
     * 
     * @type {CardsRayCardComponent}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'ray_card'?: CardsRayCardComponent;
    /**
     * 
     * @type {CardsGraphCardComponent}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'graph_card'?: CardsGraphCardComponent;
    /**
     * 
     * @type {CardsSocialMediaCardComponent}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'social_media_card'?: CardsSocialMediaCardComponent;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'testimonials'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<SharedStepsComponent>}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'steps'?: Array<SharedStepsComponent>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'logos'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'plans'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<SharedLaunchesComponent>}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'launches'?: Array<SharedLaunchesComponent>;
    /**
     * 
     * @type {SharedFormComponent}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'form'?: SharedFormComponent;
    /**
     * 
     * @type {SharedSectionComponent}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'section'?: SharedSectionComponent;
    /**
     * 
     * @type {Array<SharedSocialMediaIconLinksComponent>}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'social_media_icon_links'?: Array<SharedSocialMediaIconLinksComponent>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PageRequestDataDynamicZoneInner
     */
    'faqs'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const PageRequestDataDynamicZoneInnerComponentEnum = {
    DynamicZoneFaq: 'dynamic-zone.faq'
} as const;

export type PageRequestDataDynamicZoneInnerComponentEnum = typeof PageRequestDataDynamicZoneInnerComponentEnum[keyof typeof PageRequestDataDynamicZoneInnerComponentEnum];

/**
 * 
 * @export
 * @interface PageResponse
 */
export interface PageResponse {
    /**
     * 
     * @type {Page}
     * @memberof PageResponse
     */
    'data'?: Page;
    /**
     * 
     * @type {object}
     * @memberof PageResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Plan
 */
export interface Plan {
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'sub_text'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Plan
     */
    'featured'?: boolean;
    /**
     * 
     * @type {SharedButtonComponent}
     * @memberof Plan
     */
    'CTA'?: SharedButtonComponent;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof Plan
     */
    'perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof Plan
     */
    'additional_perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {CategoryProduct}
     * @memberof Plan
     */
    'product'?: CategoryProduct;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Plan
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Plan
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Plan
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface PlanListResponse
 */
export interface PlanListResponse {
    /**
     * 
     * @type {Array<Plan>}
     * @memberof PlanListResponse
     */
    'data'?: Array<Plan>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof PlanListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface PlanRequest
 */
export interface PlanRequest {
    /**
     * 
     * @type {PlanRequestData}
     * @memberof PlanRequest
     */
    'data': PlanRequestData;
}
/**
 * 
 * @export
 * @interface PlanRequestData
 */
export interface PlanRequestData {
    /**
     * 
     * @type {string}
     * @memberof PlanRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlanRequestData
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlanRequestData
     */
    'sub_text'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlanRequestData
     */
    'featured'?: boolean;
    /**
     * 
     * @type {SharedButtonComponent}
     * @memberof PlanRequestData
     */
    'CTA'?: SharedButtonComponent;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof PlanRequestData
     */
    'perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof PlanRequestData
     */
    'additional_perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof PlanRequestData
     */
    'product'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {string}
     * @memberof PlanRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof PlanRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface PlanResponse
 */
export interface PlanResponse {
    /**
     * 
     * @type {Plan}
     * @memberof PlanResponse
     */
    'data'?: Plan;
    /**
     * 
     * @type {object}
     * @memberof PlanResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'slug'?: string;
    /**
     * 
     * @type {Array<CategoryProductImagesInner>}
     * @memberof Product
     */
    'images'?: Array<CategoryProductImagesInner>;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof Product
     */
    'perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {Array<ProductPlansInner>}
     * @memberof Product
     */
    'plans'?: Array<ProductPlansInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Product
     */
    'categories'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductDynamicZoneInner>}
     * @memberof Product
     */
    'dynamic_zone'?: Array<ArticleCategoriesInnerProductDynamicZoneInner>;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Product
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Product
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Product
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ProductListResponse
 */
export interface ProductListResponse {
    /**
     * 
     * @type {Array<Product>}
     * @memberof ProductListResponse
     */
    'data'?: Array<Product>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof ProductListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface ProductPage
 */
export interface ProductPage {
    /**
     * 
     * @type {number}
     * @memberof ProductPage
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductPage
     */
    'documentId'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof ProductPage
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof ProductPage
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPage
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<BlogPageRequestDataDynamicZoneInner>}
     * @memberof ProductPage
     */
    'dynamic_zone'?: Array<BlogPageRequestDataDynamicZoneInner>;
    /**
     * 
     * @type {string}
     * @memberof ProductPage
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPage
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPage
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ProductPage
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ProductPage
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ProductPage
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<BlogPageLocalizationsInner>}
     * @memberof ProductPage
     */
    'localizations'?: Array<BlogPageLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface ProductPageListResponse
 */
export interface ProductPageListResponse {
    /**
     * 
     * @type {Array<ProductPage>}
     * @memberof ProductPageListResponse
     */
    'data'?: Array<ProductPage>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof ProductPageListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface ProductPageRequest
 */
export interface ProductPageRequest {
    /**
     * 
     * @type {BlogPageRequestData}
     * @memberof ProductPageRequest
     */
    'data': BlogPageRequestData;
}
/**
 * 
 * @export
 * @interface ProductPageResponse
 */
export interface ProductPageResponse {
    /**
     * 
     * @type {ProductPage}
     * @memberof ProductPageResponse
     */
    'data'?: ProductPage;
    /**
     * 
     * @type {object}
     * @memberof ProductPageResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ProductPlansInner
 */
export interface ProductPlansInner {
    /**
     * 
     * @type {number}
     * @memberof ProductPlansInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductPlansInner
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInner
     */
    'sub_text'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductPlansInner
     */
    'featured'?: boolean;
    /**
     * 
     * @type {SharedButtonComponent}
     * @memberof ProductPlansInner
     */
    'CTA'?: SharedButtonComponent;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof ProductPlansInner
     */
    'perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof ProductPlansInner
     */
    'additional_perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {ProductPlansInnerProduct}
     * @memberof ProductPlansInner
     */
    'product'?: ProductPlansInnerProduct;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ProductPlansInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ProductPlansInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ProductPlansInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ProductPlansInnerProduct
 */
export interface ProductPlansInnerProduct {
    /**
     * 
     * @type {number}
     * @memberof ProductPlansInnerProduct
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInnerProduct
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInnerProduct
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductPlansInnerProduct
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInnerProduct
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInnerProduct
     */
    'slug'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInner>}
     * @memberof ProductPlansInnerProduct
     */
    'images'?: Array<ArticleCategoriesInnerProductImagesInner>;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof ProductPlansInnerProduct
     */
    'perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ProductPlansInnerProduct
     */
    'plans'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<CategoryProductCategoriesInner>}
     * @memberof ProductPlansInnerProduct
     */
    'categories'?: Array<CategoryProductCategoriesInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductDynamicZoneInner>}
     * @memberof ProductPlansInnerProduct
     */
    'dynamic_zone'?: Array<ArticleCategoriesInnerProductDynamicZoneInner>;
    /**
     * 
     * @type {boolean}
     * @memberof ProductPlansInnerProduct
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInnerProduct
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInnerProduct
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInnerProduct
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ProductPlansInnerProduct
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof ProductPlansInnerProduct
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof ProductPlansInnerProduct
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof ProductPlansInnerProduct
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface ProductRequest
 */
export interface ProductRequest {
    /**
     * 
     * @type {ProductRequestData}
     * @memberof ProductRequest
     */
    'data': ProductRequestData;
}
/**
 * 
 * @export
 * @interface ProductRequestData
 */
export interface ProductRequestData {
    /**
     * 
     * @type {string}
     * @memberof ProductRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductRequestData
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductRequestData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductRequestData
     */
    'slug'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof ProductRequestData
     */
    'images'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {Array<SharedPerksComponent>}
     * @memberof ProductRequestData
     */
    'perks'?: Array<SharedPerksComponent>;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof ProductRequestData
     */
    'plans'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof ProductRequestData
     */
    'categories'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductDynamicZoneInner>}
     * @memberof ProductRequestData
     */
    'dynamic_zone'?: Array<ArticleCategoriesInnerProductDynamicZoneInner>;
    /**
     * 
     * @type {boolean}
     * @memberof ProductRequestData
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof ProductRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface ProductResponse
 */
export interface ProductResponse {
    /**
     * 
     * @type {Product}
     * @memberof ProductResponse
     */
    'data'?: Product;
    /**
     * 
     * @type {object}
     * @memberof ProductResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * 
     * @type {number}
     * @memberof Property
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'propertyType'?: PropertyPropertyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'location'?: string;
    /**
     * 
     * @type {number}
     * @memberof Property
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof Property
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof Property
     */
    'bedrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof Property
     */
    'bathrooms'?: number;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'status'?: PropertyStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'description'?: string;
    /**
     * 
     * @type {Array<CategoryProductImagesInner>}
     * @memberof Property
     */
    'images'?: Array<CategoryProductImagesInner>;
    /**
     * 
     * @type {PropertyListedBy}
     * @memberof Property
     */
    'listedBy'?: PropertyListedBy;
    /**
     * 
     * @type {Array<PropertyDealsInner>}
     * @memberof Property
     */
    'deals'?: Array<PropertyDealsInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Property
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Property
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Property
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Property
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const PropertyPropertyTypeEnum = {
    Apartment: 'apartment',
    House: 'house',
    Land: 'land',
    Villa: 'villa',
    Commercial: 'commercial',
    Other: 'other'
} as const;

export type PropertyPropertyTypeEnum = typeof PropertyPropertyTypeEnum[keyof typeof PropertyPropertyTypeEnum];
export const PropertyStatusEnum = {
    Available: 'available',
    Sold: 'sold',
    Pending: 'pending',
    OffMarket: 'off-market'
} as const;

export type PropertyStatusEnum = typeof PropertyStatusEnum[keyof typeof PropertyStatusEnum];

/**
 * 
 * @export
 * @interface PropertyDealsInner
 */
export interface PropertyDealsInner {
    /**
     * 
     * @type {number}
     * @memberof PropertyDealsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInner
     */
    'title'?: string;
    /**
     * 
     * @type {PropertyDealsInnerStatus}
     * @memberof PropertyDealsInner
     */
    'status'?: PropertyDealsInnerStatus;
    /**
     * 
     * @type {number}
     * @memberof PropertyDealsInner
     */
    'dealValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInner
     */
    'dealDate'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInner
     */
    'customer'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInner
     */
    'property'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInner
     */
    'agent'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyDealsInner
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyDealsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface PropertyDealsInnerStatus
 */
export interface PropertyDealsInnerStatus {
    /**
     * 
     * @type {number}
     * @memberof PropertyDealsInnerStatus
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatus
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatus
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatus
     */
    'purpose'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatus
     */
    'focus_on'?: string;
    /**
     * 
     * @type {number}
     * @memberof PropertyDealsInnerStatus
     */
    'follow_up_automation_days'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatus
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PropertyDealsInnerStatus
     */
    'isActiveStage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PropertyDealsInnerStatus
     */
    'isSOIStage'?: boolean;
    /**
     * 
     * @type {Array<PropertyDealsInnerStatusCustomersInner>}
     * @memberof PropertyDealsInnerStatus
     */
    'customers'?: Array<PropertyDealsInnerStatusCustomersInner>;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatus
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatus
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatus
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatus
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatus
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatus
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyDealsInnerStatus
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface PropertyDealsInnerStatusCustomersInner
 */
export interface PropertyDealsInnerStatusCustomersInner {
    /**
     * 
     * @type {number}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'source'?: PropertyDealsInnerStatusCustomersInnerSourceEnum;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'agent'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'stage'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'deals'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<PropertyDealsInnerStatusCustomersInnerNotesInner>}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'notes'?: Array<PropertyDealsInnerStatusCustomersInnerNotesInner>;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'lastContacted'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'nextFollowUp'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyDealsInnerStatusCustomersInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const PropertyDealsInnerStatusCustomersInnerSourceEnum = {
    Website: 'website',
    Facebook: 'facebook',
    Zalo: 'zalo',
    Referral: 'referral',
    Event: 'event',
    Other: 'other'
} as const;

export type PropertyDealsInnerStatusCustomersInnerSourceEnum = typeof PropertyDealsInnerStatusCustomersInnerSourceEnum[keyof typeof PropertyDealsInnerStatusCustomersInnerSourceEnum];

/**
 * 
 * @export
 * @interface PropertyDealsInnerStatusCustomersInnerNotesInner
 */
export interface PropertyDealsInnerStatusCustomersInnerNotesInner {
    /**
     * 
     * @type {number}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'content'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'createdByUser'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'customer'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'deal'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {PropertyDealsInnerStatusCustomersInnerNotesInnerProperty}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'property'?: PropertyDealsInnerStatusCustomersInnerNotesInnerProperty;
    /**
     * 
     * @type {ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'task'?: ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
 */
export interface PropertyDealsInnerStatusCustomersInnerNotesInnerProperty {
    /**
     * 
     * @type {number}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'propertyType'?: PropertyDealsInnerStatusCustomersInnerNotesInnerPropertyPropertyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'location'?: string;
    /**
     * 
     * @type {number}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'bedrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'bathrooms'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'status'?: PropertyDealsInnerStatusCustomersInnerNotesInnerPropertyStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'description'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInner>}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'images'?: Array<ArticleCategoriesInnerProductImagesInner>;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'listedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'deals'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyDealsInnerStatusCustomersInnerNotesInnerProperty
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const PropertyDealsInnerStatusCustomersInnerNotesInnerPropertyPropertyTypeEnum = {
    Apartment: 'apartment',
    House: 'house',
    Land: 'land',
    Villa: 'villa',
    Commercial: 'commercial',
    Other: 'other'
} as const;

export type PropertyDealsInnerStatusCustomersInnerNotesInnerPropertyPropertyTypeEnum = typeof PropertyDealsInnerStatusCustomersInnerNotesInnerPropertyPropertyTypeEnum[keyof typeof PropertyDealsInnerStatusCustomersInnerNotesInnerPropertyPropertyTypeEnum];
export const PropertyDealsInnerStatusCustomersInnerNotesInnerPropertyStatusEnum = {
    Available: 'available',
    Sold: 'sold',
    Pending: 'pending',
    OffMarket: 'off-market'
} as const;

export type PropertyDealsInnerStatusCustomersInnerNotesInnerPropertyStatusEnum = typeof PropertyDealsInnerStatusCustomersInnerNotesInnerPropertyStatusEnum[keyof typeof PropertyDealsInnerStatusCustomersInnerNotesInnerPropertyStatusEnum];

/**
 * 
 * @export
 * @interface PropertyListResponse
 */
export interface PropertyListResponse {
    /**
     * 
     * @type {Array<Property>}
     * @memberof PropertyListResponse
     */
    'data'?: Array<Property>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof PropertyListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface PropertyListedBy
 */
export interface PropertyListedBy {
    /**
     * 
     * @type {number}
     * @memberof PropertyListedBy
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedBy
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedBy
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedBy
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedBy
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedBy
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedBy
     */
    'confirmationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PropertyListedBy
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PropertyListedBy
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {PropertyListedByRole}
     * @memberof PropertyListedBy
     */
    'role'?: PropertyListedByRole;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedBy
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedBy
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedBy
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyListedBy
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyListedBy
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedBy
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyListedBy
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface PropertyListedByRole
 */
export interface PropertyListedByRole {
    /**
     * 
     * @type {number}
     * @memberof PropertyListedByRole
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRole
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRole
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRole
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRole
     */
    'type'?: string;
    /**
     * 
     * @type {Array<PropertyListedByRolePermissionsInner>}
     * @memberof PropertyListedByRole
     */
    'permissions'?: Array<PropertyListedByRolePermissionsInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyListedByRole
     */
    'users'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRole
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRole
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRole
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyListedByRole
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyListedByRole
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRole
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyListedByRole
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface PropertyListedByRolePermissionsInner
 */
export interface PropertyListedByRolePermissionsInner {
    /**
     * 
     * @type {number}
     * @memberof PropertyListedByRolePermissionsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRolePermissionsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRolePermissionsInner
     */
    'action'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyListedByRolePermissionsInner
     */
    'role'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRolePermissionsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRolePermissionsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRolePermissionsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyListedByRolePermissionsInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof PropertyListedByRolePermissionsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof PropertyListedByRolePermissionsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof PropertyListedByRolePermissionsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface PropertyRequest
 */
export interface PropertyRequest {
    /**
     * 
     * @type {PropertyRequestData}
     * @memberof PropertyRequest
     */
    'data': PropertyRequestData;
}
/**
 * 
 * @export
 * @interface PropertyRequestData
 */
export interface PropertyRequestData {
    /**
     * 
     * @type {string}
     * @memberof PropertyRequestData
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PropertyRequestData
     */
    'propertyType'?: PropertyRequestDataPropertyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PropertyRequestData
     */
    'location'?: string;
    /**
     * 
     * @type {number}
     * @memberof PropertyRequestData
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyRequestData
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyRequestData
     */
    'bedrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyRequestData
     */
    'bathrooms'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyRequestData
     */
    'status'?: PropertyRequestDataStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PropertyRequestData
     */
    'description'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof PropertyRequestData
     */
    'images'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof PropertyRequestData
     */
    'listedBy'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof PropertyRequestData
     */
    'deals'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof PropertyRequestData
     */
    'notes'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {string}
     * @memberof PropertyRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof PropertyRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}

export const PropertyRequestDataPropertyTypeEnum = {
    Apartment: 'apartment',
    House: 'house',
    Land: 'land',
    Villa: 'villa',
    Commercial: 'commercial',
    Other: 'other'
} as const;

export type PropertyRequestDataPropertyTypeEnum = typeof PropertyRequestDataPropertyTypeEnum[keyof typeof PropertyRequestDataPropertyTypeEnum];
export const PropertyRequestDataStatusEnum = {
    Available: 'available',
    Sold: 'sold',
    Pending: 'pending',
    OffMarket: 'off-market'
} as const;

export type PropertyRequestDataStatusEnum = typeof PropertyRequestDataStatusEnum[keyof typeof PropertyRequestDataStatusEnum];

/**
 * 
 * @export
 * @interface PropertyResponse
 */
export interface PropertyResponse {
    /**
     * 
     * @type {Property}
     * @memberof PropertyResponse
     */
    'data'?: Property;
    /**
     * 
     * @type {object}
     * @memberof PropertyResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Redirection
 */
export interface Redirection {
    /**
     * 
     * @type {number}
     * @memberof Redirection
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Redirection
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Redirection
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof Redirection
     */
    'destination'?: string;
    /**
     * 
     * @type {string}
     * @memberof Redirection
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Redirection
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Redirection
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {CategoryProductImagesInnerFolderFilesInnerCreatedBy}
     * @memberof Redirection
     */
    'createdBy'?: CategoryProductImagesInnerFolderFilesInnerCreatedBy;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Redirection
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Redirection
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<RedirectionLocalizationsInner>}
     * @memberof Redirection
     */
    'localizations'?: Array<RedirectionLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface RedirectionListResponse
 */
export interface RedirectionListResponse {
    /**
     * 
     * @type {Array<Redirection>}
     * @memberof RedirectionListResponse
     */
    'data'?: Array<Redirection>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof RedirectionListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface RedirectionLocalizationsInner
 */
export interface RedirectionLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof RedirectionLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RedirectionLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectionLocalizationsInner
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectionLocalizationsInner
     */
    'destination'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectionLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectionLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectionLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof RedirectionLocalizationsInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof RedirectionLocalizationsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof RedirectionLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof RedirectionLocalizationsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface RedirectionRequest
 */
export interface RedirectionRequest {
    /**
     * 
     * @type {RedirectionRequestData}
     * @memberof RedirectionRequest
     */
    'data': RedirectionRequestData;
}
/**
 * 
 * @export
 * @interface RedirectionRequestData
 */
export interface RedirectionRequestData {
    /**
     * 
     * @type {string}
     * @memberof RedirectionRequestData
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectionRequestData
     */
    'destination'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectionRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof RedirectionRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface RedirectionResponse
 */
export interface RedirectionResponse {
    /**
     * 
     * @type {Redirection}
     * @memberof RedirectionResponse
     */
    'data'?: Redirection;
    /**
     * 
     * @type {object}
     * @memberof RedirectionResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface SharedButtonComponent
 */
export interface SharedButtonComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedButtonComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedButtonComponent
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedButtonComponent
     */
    'URL'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedButtonComponent
     */
    'target'?: SharedButtonComponentTargetEnum;
    /**
     * 
     * @type {string}
     * @memberof SharedButtonComponent
     */
    'variant'?: SharedButtonComponentVariantEnum;
}

export const SharedButtonComponentTargetEnum = {
    Blank: '_blank',
    Self: '_self',
    Parent: '_parent',
    Top: '_top'
} as const;

export type SharedButtonComponentTargetEnum = typeof SharedButtonComponentTargetEnum[keyof typeof SharedButtonComponentTargetEnum];
export const SharedButtonComponentVariantEnum = {
    Simple: 'simple',
    Outline: 'outline',
    Primary: 'primary',
    Muted: 'muted'
} as const;

export type SharedButtonComponentVariantEnum = typeof SharedButtonComponentVariantEnum[keyof typeof SharedButtonComponentVariantEnum];

/**
 * 
 * @export
 * @interface SharedFormComponent
 */
export interface SharedFormComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedFormComponent
     */
    'id'?: number;
    /**
     * 
     * @type {Array<ItemsInputComponent>}
     * @memberof SharedFormComponent
     */
    'inputs'?: Array<ItemsInputComponent>;
}
/**
 * 
 * @export
 * @interface SharedLaunchesComponent
 */
export interface SharedLaunchesComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedLaunchesComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedLaunchesComponent
     */
    'mission_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedLaunchesComponent
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedLaunchesComponent
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SharedLinkComponent
 */
export interface SharedLinkComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedLinkComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedLinkComponent
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedLinkComponent
     */
    'URL'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedLinkComponent
     */
    'target'?: SharedLinkComponentTargetEnum;
}

export const SharedLinkComponentTargetEnum = {
    Blank: '_blank',
    Self: '_self',
    Parent: '_parent',
    Top: '_top'
} as const;

export type SharedLinkComponentTargetEnum = typeof SharedLinkComponentTargetEnum[keyof typeof SharedLinkComponentTargetEnum];

/**
 * 
 * @export
 * @interface SharedPerksComponent
 */
export interface SharedPerksComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedPerksComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedPerksComponent
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface SharedSectionComponent
 */
export interface SharedSectionComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedSectionComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedSectionComponent
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedSectionComponent
     */
    'sub_heading'?: string;
    /**
     * 
     * @type {Array<SharedUserComponent>}
     * @memberof SharedSectionComponent
     */
    'users'?: Array<SharedUserComponent>;
}
/**
 * 
 * @export
 * @interface SharedSeoComponent
 */
export interface SharedSeoComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedSeoComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'metaTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'metaDescription'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInner}
     * @memberof SharedSeoComponent
     */
    'metaImage'?: ArticleCategoriesInnerProductImagesInner;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'keywords'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'metaRobots'?: string;
    /**
     * 
     * @type {any}
     * @memberof SharedSeoComponent
     */
    'structuredData'?: any;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'metaViewport'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'canonicalURL'?: string;
}
/**
 * 
 * @export
 * @interface SharedSocialMediaIconLinksComponent
 */
export interface SharedSocialMediaIconLinksComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedSocialMediaIconLinksComponent
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInner}
     * @memberof SharedSocialMediaIconLinksComponent
     */
    'image'?: ArticleCategoriesInnerProductImagesInner;
    /**
     * 
     * @type {Array<SharedLinkComponent>}
     * @memberof SharedSocialMediaIconLinksComponent
     */
    'link'?: Array<SharedLinkComponent>;
}
/**
 * 
 * @export
 * @interface SharedStepsComponent
 */
export interface SharedStepsComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedStepsComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedStepsComponent
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedStepsComponent
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SharedUserComponent
 */
export interface SharedUserComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedUserComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedUserComponent
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedUserComponent
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedUserComponent
     */
    'job'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInner}
     * @memberof SharedUserComponent
     */
    'image'?: ArticleCategoriesInnerProductImagesInner;
}
/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'dueDate'?: string;
    /**
     * 
     * @type {ClientStageCustomersInnerAgent}
     * @memberof Task
     */
    'assignedTo'?: ClientStageCustomersInnerAgent;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'status'?: TaskStatusEnum;
    /**
     * 
     * @type {TaskRelatedDeal}
     * @memberof Task
     */
    'relatedDeal'?: TaskRelatedDeal;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Task
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Task
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Task
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof Task
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const TaskStatusEnum = {
    Pending: 'pending',
    InProgress: 'in_progress',
    Completed: 'completed'
} as const;

export type TaskStatusEnum = typeof TaskStatusEnum[keyof typeof TaskStatusEnum];

/**
 * 
 * @export
 * @interface TaskListResponse
 */
export interface TaskListResponse {
    /**
     * 
     * @type {Array<Task>}
     * @memberof TaskListResponse
     */
    'data'?: Array<Task>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof TaskListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface TaskRelatedDeal
 */
export interface TaskRelatedDeal {
    /**
     * 
     * @type {number}
     * @memberof TaskRelatedDeal
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDeal
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDeal
     */
    'title'?: string;
    /**
     * 
     * @type {TaskRelatedDealStatus}
     * @memberof TaskRelatedDeal
     */
    'status'?: TaskRelatedDealStatus;
    /**
     * 
     * @type {number}
     * @memberof TaskRelatedDeal
     */
    'dealValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDeal
     */
    'dealDate'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDeal
     */
    'customer'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDeal
     */
    'property'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDeal
     */
    'agent'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof TaskRelatedDeal
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDeal
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDeal
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDeal
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDeal
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDeal
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDeal
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof TaskRelatedDeal
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface TaskRelatedDealStatus
 */
export interface TaskRelatedDealStatus {
    /**
     * 
     * @type {number}
     * @memberof TaskRelatedDealStatus
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatus
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatus
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatus
     */
    'purpose'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatus
     */
    'focus_on'?: string;
    /**
     * 
     * @type {number}
     * @memberof TaskRelatedDealStatus
     */
    'follow_up_automation_days'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatus
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TaskRelatedDealStatus
     */
    'isActiveStage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TaskRelatedDealStatus
     */
    'isSOIStage'?: boolean;
    /**
     * 
     * @type {Array<TaskRelatedDealStatusCustomersInner>}
     * @memberof TaskRelatedDealStatus
     */
    'customers'?: Array<TaskRelatedDealStatusCustomersInner>;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatus
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatus
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatus
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatus
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatus
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatus
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof TaskRelatedDealStatus
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface TaskRelatedDealStatusCustomersInner
 */
export interface TaskRelatedDealStatusCustomersInner {
    /**
     * 
     * @type {number}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'source'?: TaskRelatedDealStatusCustomersInnerSourceEnum;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'agent'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'stage'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'deals'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<TaskRelatedDealStatusCustomersInnerNotesInner>}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'notes'?: Array<TaskRelatedDealStatusCustomersInnerNotesInner>;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'lastContacted'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'nextFollowUp'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof TaskRelatedDealStatusCustomersInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const TaskRelatedDealStatusCustomersInnerSourceEnum = {
    Website: 'website',
    Facebook: 'facebook',
    Zalo: 'zalo',
    Referral: 'referral',
    Event: 'event',
    Other: 'other'
} as const;

export type TaskRelatedDealStatusCustomersInnerSourceEnum = typeof TaskRelatedDealStatusCustomersInnerSourceEnum[keyof typeof TaskRelatedDealStatusCustomersInnerSourceEnum];

/**
 * 
 * @export
 * @interface TaskRelatedDealStatusCustomersInnerNotesInner
 */
export interface TaskRelatedDealStatusCustomersInnerNotesInner {
    /**
     * 
     * @type {number}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'content'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'createdByUser'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'customer'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'deal'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {TaskRelatedDealStatusCustomersInnerNotesInnerProperty}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'property'?: TaskRelatedDealStatusCustomersInnerNotesInnerProperty;
    /**
     * 
     * @type {ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'task'?: ClientStageCustomersInnerDealsInnerPropertyNotesInnerTask;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface TaskRelatedDealStatusCustomersInnerNotesInnerProperty
 */
export interface TaskRelatedDealStatusCustomersInnerNotesInnerProperty {
    /**
     * 
     * @type {number}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'propertyType'?: TaskRelatedDealStatusCustomersInnerNotesInnerPropertyPropertyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'location'?: string;
    /**
     * 
     * @type {number}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'bedrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'bathrooms'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'status'?: TaskRelatedDealStatusCustomersInnerNotesInnerPropertyStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'description'?: string;
    /**
     * 
     * @type {Array<ClientStageCustomersInnerDealsInnerPropertyImagesInner>}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'images'?: Array<ClientStageCustomersInnerDealsInnerPropertyImagesInner>;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'listedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'deals'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'notes'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof TaskRelatedDealStatusCustomersInnerNotesInnerProperty
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}

export const TaskRelatedDealStatusCustomersInnerNotesInnerPropertyPropertyTypeEnum = {
    Apartment: 'apartment',
    House: 'house',
    Land: 'land',
    Villa: 'villa',
    Commercial: 'commercial',
    Other: 'other'
} as const;

export type TaskRelatedDealStatusCustomersInnerNotesInnerPropertyPropertyTypeEnum = typeof TaskRelatedDealStatusCustomersInnerNotesInnerPropertyPropertyTypeEnum[keyof typeof TaskRelatedDealStatusCustomersInnerNotesInnerPropertyPropertyTypeEnum];
export const TaskRelatedDealStatusCustomersInnerNotesInnerPropertyStatusEnum = {
    Available: 'available',
    Sold: 'sold',
    Pending: 'pending',
    OffMarket: 'off-market'
} as const;

export type TaskRelatedDealStatusCustomersInnerNotesInnerPropertyStatusEnum = typeof TaskRelatedDealStatusCustomersInnerNotesInnerPropertyStatusEnum[keyof typeof TaskRelatedDealStatusCustomersInnerNotesInnerPropertyStatusEnum];

/**
 * 
 * @export
 * @interface TaskRequest
 */
export interface TaskRequest {
    /**
     * 
     * @type {TaskRequestData}
     * @memberof TaskRequest
     */
    'data': TaskRequestData;
}
/**
 * 
 * @export
 * @interface TaskRequestData
 */
export interface TaskRequestData {
    /**
     * 
     * @type {string}
     * @memberof TaskRequestData
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TaskRequestData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRequestData
     */
    'dueDate'?: string;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof TaskRequestData
     */
    'assignedTo'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {string}
     * @memberof TaskRequestData
     */
    'status'?: TaskRequestDataStatusEnum;
    /**
     * 
     * @type {ArticleRequestDataCategoriesInner}
     * @memberof TaskRequestData
     */
    'relatedDeal'?: ArticleRequestDataCategoriesInner;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof TaskRequestData
     */
    'notes'?: Array<ArticleRequestDataCategoriesInner>;
    /**
     * 
     * @type {string}
     * @memberof TaskRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof TaskRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}

export const TaskRequestDataStatusEnum = {
    Pending: 'pending',
    InProgress: 'in_progress',
    Completed: 'completed'
} as const;

export type TaskRequestDataStatusEnum = typeof TaskRequestDataStatusEnum[keyof typeof TaskRequestDataStatusEnum];

/**
 * 
 * @export
 * @interface TaskResponse
 */
export interface TaskResponse {
    /**
     * 
     * @type {Task}
     * @memberof TaskResponse
     */
    'data'?: Task;
    /**
     * 
     * @type {object}
     * @memberof TaskResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Testimonial
 */
export interface Testimonial {
    /**
     * 
     * @type {number}
     * @memberof Testimonial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Testimonial
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Testimonial
     */
    'text'?: string;
    /**
     * 
     * @type {SharedUserComponent}
     * @memberof Testimonial
     */
    'user'?: SharedUserComponent;
    /**
     * 
     * @type {string}
     * @memberof Testimonial
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Testimonial
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Testimonial
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Testimonial
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof Testimonial
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof Testimonial
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<TestimonialLocalizationsInner>}
     * @memberof Testimonial
     */
    'localizations'?: Array<TestimonialLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface TestimonialListResponse
 */
export interface TestimonialListResponse {
    /**
     * 
     * @type {Array<Testimonial>}
     * @memberof TestimonialListResponse
     */
    'data'?: Array<Testimonial>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof TestimonialListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface TestimonialLocalizationsInner
 */
export interface TestimonialLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof TestimonialLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationsInner
     */
    'text'?: string;
    /**
     * 
     * @type {SharedUserComponent}
     * @memberof TestimonialLocalizationsInner
     */
    'user'?: SharedUserComponent;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TestimonialLocalizationsInner
     */
    'createdBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {ArticleCategoriesInnerProductImagesInnerRelatedInner}
     * @memberof TestimonialLocalizationsInner
     */
    'updatedBy'?: ArticleCategoriesInnerProductImagesInnerRelatedInner;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>}
     * @memberof TestimonialLocalizationsInner
     */
    'localizations'?: Array<ArticleCategoriesInnerProductImagesInnerRelatedInner>;
}
/**
 * 
 * @export
 * @interface TestimonialRequest
 */
export interface TestimonialRequest {
    /**
     * 
     * @type {TestimonialRequestData}
     * @memberof TestimonialRequest
     */
    'data': TestimonialRequestData;
}
/**
 * 
 * @export
 * @interface TestimonialRequestData
 */
export interface TestimonialRequestData {
    /**
     * 
     * @type {string}
     * @memberof TestimonialRequestData
     */
    'text'?: string;
    /**
     * 
     * @type {SharedUserComponent}
     * @memberof TestimonialRequestData
     */
    'user'?: SharedUserComponent;
    /**
     * 
     * @type {string}
     * @memberof TestimonialRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategoriesInner>}
     * @memberof TestimonialRequestData
     */
    'localizations'?: Array<ArticleRequestDataCategoriesInner>;
}
/**
 * 
 * @export
 * @interface TestimonialResponse
 */
export interface TestimonialResponse {
    /**
     * 
     * @type {Testimonial}
     * @memberof TestimonialResponse
     */
    'data'?: Testimonial;
    /**
     * 
     * @type {object}
     * @memberof TestimonialResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface UploadFile
 */
export interface UploadFile {
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'formats'?: number;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'provider'?: string;
    /**
     * 
     * @type {object}
     * @memberof UploadFile
     */
    'provider_metadata'?: object;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UploadIdIdPostRequestFileInfo
 */
export interface UploadIdIdPostRequestFileInfo {
    /**
     * 
     * @type {string}
     * @memberof UploadIdIdPostRequestFileInfo
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadIdIdPostRequestFileInfo
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadIdIdPostRequestFileInfo
     */
    'caption'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionsGet200Response
 */
export interface UsersPermissionsPermissionsGet200Response {
    /**
     * 
     * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
     * @memberof UsersPermissionsPermissionsGet200Response
     */
    'permissions'?: { [key: string]: UsersPermissionsPermissionsTreeValue; };
}
/**
 * every api
 * @export
 * @interface UsersPermissionsPermissionsTreeValue
 */
export interface UsersPermissionsPermissionsTreeValue {
    /**
     * every controller of the api
     * @type {{ [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue; }; }}
     * @memberof UsersPermissionsPermissionsTreeValue
     */
    'controllers'?: { [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue; }; };
}
/**
 * every action of every controller
 * @export
 * @interface UsersPermissionsPermissionsTreeValueControllersValueValue
 */
export interface UsersPermissionsPermissionsTreeValueControllersValueValue {
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
     */
    'policy'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRole
 */
export interface UsersPermissionsRole {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRole
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesGet200Response
 */
export interface UsersPermissionsRolesGet200Response {
    /**
     * 
     * @type {Array<UsersPermissionsRolesGet200ResponseRolesInner>}
     * @memberof UsersPermissionsRolesGet200Response
     */
    'roles'?: Array<UsersPermissionsRolesGet200ResponseRolesInner>;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesGet200ResponseRolesInner
 */
export interface UsersPermissionsRolesGet200ResponseRolesInner {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'nb_users'?: number;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesIdGet200Response
 */
export interface UsersPermissionsRolesIdGet200Response {
    /**
     * 
     * @type {UsersPermissionsRole}
     * @memberof UsersPermissionsRolesIdGet200Response
     */
    'role'?: UsersPermissionsRole;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsRolesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'type'?: string;
    /**
     * 
     * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'permissions'?: { [key: string]: UsersPermissionsPermissionsTreeValue; };
}
/**
 * 
 * @export
 * @interface UsersPermissionsUser
 */
export interface UsersPermissionsUser {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'provider'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUser
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUser
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsUserRegistration
 */
export interface UsersPermissionsUserRegistration {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserRegistration
     */
    'jwt'?: string;
    /**
     * 
     * @type {UsersPermissionsUser}
     * @memberof UsersPermissionsUserRegistration
     */
    'user'?: UsersPermissionsUser;
}
/**
 * 
 * @export
 * @interface UsersPost201Response
 */
export interface UsersPost201Response {
    /**
     * 
     * @type {number}
     * @memberof UsersPost201Response
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'provider'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPost201Response
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPost201Response
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {UsersPermissionsRole}
     * @memberof UsersPost201Response
     */
    'role'?: UsersPermissionsRole;
}
/**
 * 
 * @export
 * @interface UsersPostRequest
 */
export interface UsersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'password': string;
}

/**
 * ArticleApi - axios parameter creator
 * @export
 */
export const ArticleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticlesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteArticlesId', 'id', id)
            const localVarPath = `/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticles: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticlesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getArticlesId', 'id', id)
            const localVarPath = `/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ArticleRequest} articleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postArticles: async (articleRequest: ArticleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleRequest' is not null or undefined
            assertParamExists('postArticles', 'articleRequest', articleRequest)
            const localVarPath = `/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ArticleRequest} articleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putArticlesId: async (id: number, articleRequest: ArticleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putArticlesId', 'id', id)
            // verify required parameter 'articleRequest' is not null or undefined
            assertParamExists('putArticlesId', 'articleRequest', articleRequest)
            const localVarPath = `/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleApi - functional programming interface
 * @export
 */
export const ArticleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArticleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteArticlesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteArticlesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleApi.deleteArticlesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticles(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArticles(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleApi.getArticles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticlesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArticlesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleApi.getArticlesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ArticleRequest} articleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postArticles(articleRequest: ArticleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postArticles(articleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleApi.postArticles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ArticleRequest} articleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putArticlesId(id: number, articleRequest: ArticleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putArticlesId(id, articleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleApi.putArticlesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ArticleApi - factory interface
 * @export
 */
export const ArticleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArticleApiFp(configuration)
    return {
        /**
         * 
         * @param {ArticleApiDeleteArticlesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticlesId(requestParameters: ArticleApiDeleteArticlesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteArticlesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleApiGetArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticles(requestParameters: ArticleApiGetArticlesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ArticleListResponse> {
            return localVarFp.getArticles(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleApiGetArticlesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticlesId(requestParameters: ArticleApiGetArticlesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ArticleResponse> {
            return localVarFp.getArticlesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleApiPostArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postArticles(requestParameters: ArticleApiPostArticlesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ArticleResponse> {
            return localVarFp.postArticles(requestParameters.articleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleApiPutArticlesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putArticlesId(requestParameters: ArticleApiPutArticlesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ArticleResponse> {
            return localVarFp.putArticlesId(requestParameters.id, requestParameters.articleRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArticleApi - interface
 * @export
 * @interface ArticleApi
 */
export interface ArticleApiInterface {
    /**
     * 
     * @param {ArticleApiDeleteArticlesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApiInterface
     */
    deleteArticlesId(requestParameters: ArticleApiDeleteArticlesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {ArticleApiGetArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApiInterface
     */
    getArticles(requestParameters?: ArticleApiGetArticlesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ArticleListResponse>;

    /**
     * 
     * @param {ArticleApiGetArticlesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApiInterface
     */
    getArticlesId(requestParameters: ArticleApiGetArticlesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ArticleResponse>;

    /**
     * 
     * @param {ArticleApiPostArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApiInterface
     */
    postArticles(requestParameters: ArticleApiPostArticlesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ArticleResponse>;

    /**
     * 
     * @param {ArticleApiPutArticlesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApiInterface
     */
    putArticlesId(requestParameters: ArticleApiPutArticlesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ArticleResponse>;

}

/**
 * Request parameters for deleteArticlesId operation in ArticleApi.
 * @export
 * @interface ArticleApiDeleteArticlesIdRequest
 */
export interface ArticleApiDeleteArticlesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ArticleApiDeleteArticlesId
     */
    readonly id: number
}

/**
 * Request parameters for getArticles operation in ArticleApi.
 * @export
 * @interface ArticleApiGetArticlesRequest
 */
export interface ArticleApiGetArticlesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ArticleApiGetArticles
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof ArticleApiGetArticles
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ArticleApiGetArticles
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ArticleApiGetArticles
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ArticleApiGetArticles
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ArticleApiGetArticles
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ArticleApiGetArticles
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ArticleApiGetArticles
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof ArticleApiGetArticles
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof ArticleApiGetArticles
     */
    readonly locale?: string
}

/**
 * Request parameters for getArticlesId operation in ArticleApi.
 * @export
 * @interface ArticleApiGetArticlesIdRequest
 */
export interface ArticleApiGetArticlesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ArticleApiGetArticlesId
     */
    readonly id: number
}

/**
 * Request parameters for postArticles operation in ArticleApi.
 * @export
 * @interface ArticleApiPostArticlesRequest
 */
export interface ArticleApiPostArticlesRequest {
    /**
     * 
     * @type {ArticleRequest}
     * @memberof ArticleApiPostArticles
     */
    readonly articleRequest: ArticleRequest
}

/**
 * Request parameters for putArticlesId operation in ArticleApi.
 * @export
 * @interface ArticleApiPutArticlesIdRequest
 */
export interface ArticleApiPutArticlesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ArticleApiPutArticlesId
     */
    readonly id: number

    /**
     * 
     * @type {ArticleRequest}
     * @memberof ArticleApiPutArticlesId
     */
    readonly articleRequest: ArticleRequest
}

/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
export class ArticleApi extends BaseAPI implements ArticleApiInterface {
    /**
     * 
     * @param {ArticleApiDeleteArticlesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public deleteArticlesId(requestParameters: ArticleApiDeleteArticlesIdRequest, options?: RawAxiosRequestConfig) {
        return ArticleApiFp(this.configuration).deleteArticlesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleApiGetArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public getArticles(requestParameters: ArticleApiGetArticlesRequest = {}, options?: RawAxiosRequestConfig) {
        return ArticleApiFp(this.configuration).getArticles(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleApiGetArticlesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public getArticlesId(requestParameters: ArticleApiGetArticlesIdRequest, options?: RawAxiosRequestConfig) {
        return ArticleApiFp(this.configuration).getArticlesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleApiPostArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public postArticles(requestParameters: ArticleApiPostArticlesRequest, options?: RawAxiosRequestConfig) {
        return ArticleApiFp(this.configuration).postArticles(requestParameters.articleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleApiPutArticlesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public putArticlesId(requestParameters: ArticleApiPutArticlesIdRequest, options?: RawAxiosRequestConfig) {
        return ArticleApiFp(this.configuration).putArticlesId(requestParameters.id, requestParameters.articleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BlogPageApi - axios parameter creator
 * @export
 */
export const BlogPageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogPage: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blog-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogPage: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blog-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BlogPageRequest} blogPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogPage: async (blogPageRequest: BlogPageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blogPageRequest' is not null or undefined
            assertParamExists('putBlogPage', 'blogPageRequest', blogPageRequest)
            const localVarPath = `/blog-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogPageApi - functional programming interface
 * @export
 */
export const BlogPageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogPageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlogPage(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlogPage(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlogPageApi.deleteBlogPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlogPage(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlogPage(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlogPageApi.getBlogPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BlogPageRequest} blogPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBlogPage(blogPageRequest: BlogPageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBlogPage(blogPageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlogPageApi.putBlogPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BlogPageApi - factory interface
 * @export
 */
export const BlogPageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogPageApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogPage(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteBlogPage(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogPageApiGetBlogPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogPage(requestParameters: BlogPageApiGetBlogPageRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BlogPageResponse> {
            return localVarFp.getBlogPage(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogPageApiPutBlogPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogPage(requestParameters: BlogPageApiPutBlogPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<BlogPageResponse> {
            return localVarFp.putBlogPage(requestParameters.blogPageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlogPageApi - interface
 * @export
 * @interface BlogPageApi
 */
export interface BlogPageApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApiInterface
     */
    deleteBlogPage(options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {BlogPageApiGetBlogPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApiInterface
     */
    getBlogPage(requestParameters?: BlogPageApiGetBlogPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<BlogPageResponse>;

    /**
     * 
     * @param {BlogPageApiPutBlogPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApiInterface
     */
    putBlogPage(requestParameters: BlogPageApiPutBlogPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<BlogPageResponse>;

}

/**
 * Request parameters for getBlogPage operation in BlogPageApi.
 * @export
 * @interface BlogPageApiGetBlogPageRequest
 */
export interface BlogPageApiGetBlogPageRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof BlogPageApiGetBlogPage
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof BlogPageApiGetBlogPage
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof BlogPageApiGetBlogPage
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof BlogPageApiGetBlogPage
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof BlogPageApiGetBlogPage
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof BlogPageApiGetBlogPage
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof BlogPageApiGetBlogPage
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof BlogPageApiGetBlogPage
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof BlogPageApiGetBlogPage
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof BlogPageApiGetBlogPage
     */
    readonly locale?: string
}

/**
 * Request parameters for putBlogPage operation in BlogPageApi.
 * @export
 * @interface BlogPageApiPutBlogPageRequest
 */
export interface BlogPageApiPutBlogPageRequest {
    /**
     * 
     * @type {BlogPageRequest}
     * @memberof BlogPageApiPutBlogPage
     */
    readonly blogPageRequest: BlogPageRequest
}

/**
 * BlogPageApi - object-oriented interface
 * @export
 * @class BlogPageApi
 * @extends {BaseAPI}
 */
export class BlogPageApi extends BaseAPI implements BlogPageApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApi
     */
    public deleteBlogPage(options?: RawAxiosRequestConfig) {
        return BlogPageApiFp(this.configuration).deleteBlogPage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogPageApiGetBlogPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApi
     */
    public getBlogPage(requestParameters: BlogPageApiGetBlogPageRequest = {}, options?: RawAxiosRequestConfig) {
        return BlogPageApiFp(this.configuration).getBlogPage(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogPageApiPutBlogPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApi
     */
    public putBlogPage(requestParameters: BlogPageApiPutBlogPageRequest, options?: RawAxiosRequestConfig) {
        return BlogPageApiFp(this.configuration).putBlogPage(requestParameters.blogPageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCategoriesId', 'id', id)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCategoriesId', 'id', id)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategories: async (categoryRequest: CategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryRequest' is not null or undefined
            assertParamExists('postCategories', 'categoryRequest', categoryRequest)
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesId: async (id: number, categoryRequest: CategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putCategoriesId', 'id', id)
            // verify required parameter 'categoryRequest' is not null or undefined
            assertParamExists('putCategoriesId', 'categoryRequest', categoryRequest)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoriesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategoriesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.deleteCategoriesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.getCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoriesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoriesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.getCategoriesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategories(categoryRequest: CategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCategories(categoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.postCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCategoriesId(id: number, categoryRequest: CategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCategoriesId(id, categoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.putCategoriesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {CategoryApiDeleteCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesId(requestParameters: CategoryApiDeleteCategoriesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteCategoriesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiGetCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(requestParameters: CategoryApiGetCategoriesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CategoryListResponse> {
            return localVarFp.getCategories(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiGetCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesId(requestParameters: CategoryApiGetCategoriesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponse> {
            return localVarFp.getCategoriesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiPostCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategories(requestParameters: CategoryApiPostCategoriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponse> {
            return localVarFp.postCategories(requestParameters.categoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiPutCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesId(requestParameters: CategoryApiPutCategoriesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponse> {
            return localVarFp.putCategoriesId(requestParameters.id, requestParameters.categoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - interface
 * @export
 * @interface CategoryApi
 */
export interface CategoryApiInterface {
    /**
     * 
     * @param {CategoryApiDeleteCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiInterface
     */
    deleteCategoriesId(requestParameters: CategoryApiDeleteCategoriesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {CategoryApiGetCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiInterface
     */
    getCategories(requestParameters?: CategoryApiGetCategoriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryListResponse>;

    /**
     * 
     * @param {CategoryApiGetCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiInterface
     */
    getCategoriesId(requestParameters: CategoryApiGetCategoriesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponse>;

    /**
     * 
     * @param {CategoryApiPostCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiInterface
     */
    postCategories(requestParameters: CategoryApiPostCategoriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponse>;

    /**
     * 
     * @param {CategoryApiPutCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiInterface
     */
    putCategoriesId(requestParameters: CategoryApiPutCategoriesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponse>;

}

/**
 * Request parameters for deleteCategoriesId operation in CategoryApi.
 * @export
 * @interface CategoryApiDeleteCategoriesIdRequest
 */
export interface CategoryApiDeleteCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiDeleteCategoriesId
     */
    readonly id: number
}

/**
 * Request parameters for getCategories operation in CategoryApi.
 * @export
 * @interface CategoryApiGetCategoriesRequest
 */
export interface CategoryApiGetCategoriesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof CategoryApiGetCategories
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly locale?: string
}

/**
 * Request parameters for getCategoriesId operation in CategoryApi.
 * @export
 * @interface CategoryApiGetCategoriesIdRequest
 */
export interface CategoryApiGetCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiGetCategoriesId
     */
    readonly id: number
}

/**
 * Request parameters for postCategories operation in CategoryApi.
 * @export
 * @interface CategoryApiPostCategoriesRequest
 */
export interface CategoryApiPostCategoriesRequest {
    /**
     * 
     * @type {CategoryRequest}
     * @memberof CategoryApiPostCategories
     */
    readonly categoryRequest: CategoryRequest
}

/**
 * Request parameters for putCategoriesId operation in CategoryApi.
 * @export
 * @interface CategoryApiPutCategoriesIdRequest
 */
export interface CategoryApiPutCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiPutCategoriesId
     */
    readonly id: number

    /**
     * 
     * @type {CategoryRequest}
     * @memberof CategoryApiPutCategoriesId
     */
    readonly categoryRequest: CategoryRequest
}

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI implements CategoryApiInterface {
    /**
     * 
     * @param {CategoryApiDeleteCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public deleteCategoriesId(requestParameters: CategoryApiDeleteCategoriesIdRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).deleteCategoriesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiGetCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getCategories(requestParameters: CategoryApiGetCategoriesRequest = {}, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).getCategories(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiGetCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getCategoriesId(requestParameters: CategoryApiGetCategoriesIdRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).getCategoriesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiPostCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public postCategories(requestParameters: CategoryApiPostCategoriesRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).postCategories(requestParameters.categoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiPutCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public putCategoriesId(requestParameters: CategoryApiPutCategoriesIdRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).putCategoriesId(requestParameters.id, requestParameters.categoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClientStageApi - axios parameter creator
 * @export
 */
export const ClientStageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientStagesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteClientStagesId', 'id', id)
            const localVarPath = `/client-stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientStages: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/client-stages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientStagesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClientStagesId', 'id', id)
            const localVarPath = `/client-stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ClientStageRequest} clientStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClientStages: async (clientStageRequest: ClientStageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientStageRequest' is not null or undefined
            assertParamExists('postClientStages', 'clientStageRequest', clientStageRequest)
            const localVarPath = `/client-stages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ClientStageRequest} clientStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putClientStagesId: async (id: number, clientStageRequest: ClientStageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putClientStagesId', 'id', id)
            // verify required parameter 'clientStageRequest' is not null or undefined
            assertParamExists('putClientStagesId', 'clientStageRequest', clientStageRequest)
            const localVarPath = `/client-stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientStageApi - functional programming interface
 * @export
 */
export const ClientStageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientStageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClientStagesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClientStagesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientStageApi.deleteClientStagesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientStages(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientStageListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientStages(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientStageApi.getClientStages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientStagesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientStageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientStagesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientStageApi.getClientStagesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ClientStageRequest} clientStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postClientStages(clientStageRequest: ClientStageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientStageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postClientStages(clientStageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientStageApi.postClientStages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ClientStageRequest} clientStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putClientStagesId(id: number, clientStageRequest: ClientStageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientStageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putClientStagesId(id, clientStageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientStageApi.putClientStagesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClientStageApi - factory interface
 * @export
 */
export const ClientStageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientStageApiFp(configuration)
    return {
        /**
         * 
         * @param {ClientStageApiDeleteClientStagesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientStagesId(requestParameters: ClientStageApiDeleteClientStagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteClientStagesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ClientStageApiGetClientStagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientStages(requestParameters: ClientStageApiGetClientStagesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ClientStageListResponse> {
            return localVarFp.getClientStages(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ClientStageApiGetClientStagesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientStagesId(requestParameters: ClientStageApiGetClientStagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientStageResponse> {
            return localVarFp.getClientStagesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ClientStageApiPostClientStagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClientStages(requestParameters: ClientStageApiPostClientStagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientStageResponse> {
            return localVarFp.postClientStages(requestParameters.clientStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ClientStageApiPutClientStagesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putClientStagesId(requestParameters: ClientStageApiPutClientStagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientStageResponse> {
            return localVarFp.putClientStagesId(requestParameters.id, requestParameters.clientStageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientStageApi - interface
 * @export
 * @interface ClientStageApi
 */
export interface ClientStageApiInterface {
    /**
     * 
     * @param {ClientStageApiDeleteClientStagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientStageApiInterface
     */
    deleteClientStagesId(requestParameters: ClientStageApiDeleteClientStagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {ClientStageApiGetClientStagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientStageApiInterface
     */
    getClientStages(requestParameters?: ClientStageApiGetClientStagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientStageListResponse>;

    /**
     * 
     * @param {ClientStageApiGetClientStagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientStageApiInterface
     */
    getClientStagesId(requestParameters: ClientStageApiGetClientStagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientStageResponse>;

    /**
     * 
     * @param {ClientStageApiPostClientStagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientStageApiInterface
     */
    postClientStages(requestParameters: ClientStageApiPostClientStagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientStageResponse>;

    /**
     * 
     * @param {ClientStageApiPutClientStagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientStageApiInterface
     */
    putClientStagesId(requestParameters: ClientStageApiPutClientStagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientStageResponse>;

}

/**
 * Request parameters for deleteClientStagesId operation in ClientStageApi.
 * @export
 * @interface ClientStageApiDeleteClientStagesIdRequest
 */
export interface ClientStageApiDeleteClientStagesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ClientStageApiDeleteClientStagesId
     */
    readonly id: number
}

/**
 * Request parameters for getClientStages operation in ClientStageApi.
 * @export
 * @interface ClientStageApiGetClientStagesRequest
 */
export interface ClientStageApiGetClientStagesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ClientStageApiGetClientStages
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof ClientStageApiGetClientStages
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ClientStageApiGetClientStages
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ClientStageApiGetClientStages
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ClientStageApiGetClientStages
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ClientStageApiGetClientStages
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ClientStageApiGetClientStages
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ClientStageApiGetClientStages
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof ClientStageApiGetClientStages
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof ClientStageApiGetClientStages
     */
    readonly locale?: string
}

/**
 * Request parameters for getClientStagesId operation in ClientStageApi.
 * @export
 * @interface ClientStageApiGetClientStagesIdRequest
 */
export interface ClientStageApiGetClientStagesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ClientStageApiGetClientStagesId
     */
    readonly id: number
}

/**
 * Request parameters for postClientStages operation in ClientStageApi.
 * @export
 * @interface ClientStageApiPostClientStagesRequest
 */
export interface ClientStageApiPostClientStagesRequest {
    /**
     * 
     * @type {ClientStageRequest}
     * @memberof ClientStageApiPostClientStages
     */
    readonly clientStageRequest: ClientStageRequest
}

/**
 * Request parameters for putClientStagesId operation in ClientStageApi.
 * @export
 * @interface ClientStageApiPutClientStagesIdRequest
 */
export interface ClientStageApiPutClientStagesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ClientStageApiPutClientStagesId
     */
    readonly id: number

    /**
     * 
     * @type {ClientStageRequest}
     * @memberof ClientStageApiPutClientStagesId
     */
    readonly clientStageRequest: ClientStageRequest
}

/**
 * ClientStageApi - object-oriented interface
 * @export
 * @class ClientStageApi
 * @extends {BaseAPI}
 */
export class ClientStageApi extends BaseAPI implements ClientStageApiInterface {
    /**
     * 
     * @param {ClientStageApiDeleteClientStagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientStageApi
     */
    public deleteClientStagesId(requestParameters: ClientStageApiDeleteClientStagesIdRequest, options?: RawAxiosRequestConfig) {
        return ClientStageApiFp(this.configuration).deleteClientStagesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ClientStageApiGetClientStagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientStageApi
     */
    public getClientStages(requestParameters: ClientStageApiGetClientStagesRequest = {}, options?: RawAxiosRequestConfig) {
        return ClientStageApiFp(this.configuration).getClientStages(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ClientStageApiGetClientStagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientStageApi
     */
    public getClientStagesId(requestParameters: ClientStageApiGetClientStagesIdRequest, options?: RawAxiosRequestConfig) {
        return ClientStageApiFp(this.configuration).getClientStagesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ClientStageApiPostClientStagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientStageApi
     */
    public postClientStages(requestParameters: ClientStageApiPostClientStagesRequest, options?: RawAxiosRequestConfig) {
        return ClientStageApiFp(this.configuration).postClientStages(requestParameters.clientStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ClientStageApiPutClientStagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientStageApi
     */
    public putClientStagesId(requestParameters: ClientStageApiPutClientStagesIdRequest, options?: RawAxiosRequestConfig) {
        return ClientStageApiFp(this.configuration).putClientStagesId(requestParameters.id, requestParameters.clientStageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomersId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCustomersId', 'id', id)
            const localVarPath = `/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCustomersId', 'id', id)
            const localVarPath = `/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerRequest} customerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomers: async (customerRequest: CustomerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerRequest' is not null or undefined
            assertParamExists('postCustomers', 'customerRequest', customerRequest)
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CustomerRequest} customerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustomersId: async (id: number, customerRequest: CustomerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putCustomersId', 'id', id)
            // verify required parameter 'customerRequest' is not null or undefined
            assertParamExists('putCustomersId', 'customerRequest', customerRequest)
            const localVarPath = `/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomersId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomersId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApi.deleteCustomersId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomers(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomers(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApi.getCustomers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomersId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomersId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApi.getCustomersId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerRequest} customerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomers(customerRequest: CustomerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCustomers(customerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApi.postCustomers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CustomerRequest} customerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCustomersId(id: number, customerRequest: CustomerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCustomersId(id, customerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApi.putCustomersId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * 
         * @param {CustomerApiDeleteCustomersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomersId(requestParameters: CustomerApiDeleteCustomersIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteCustomersId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerApiGetCustomersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers(requestParameters: CustomerApiGetCustomersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CustomerListResponse> {
            return localVarFp.getCustomers(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerApiGetCustomersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersId(requestParameters: CustomerApiGetCustomersIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerResponse> {
            return localVarFp.getCustomersId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerApiPostCustomersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomers(requestParameters: CustomerApiPostCustomersRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerResponse> {
            return localVarFp.postCustomers(requestParameters.customerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerApiPutCustomersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCustomersId(requestParameters: CustomerApiPutCustomersIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerResponse> {
            return localVarFp.putCustomersId(requestParameters.id, requestParameters.customerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerApi - interface
 * @export
 * @interface CustomerApi
 */
export interface CustomerApiInterface {
    /**
     * 
     * @param {CustomerApiDeleteCustomersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    deleteCustomersId(requestParameters: CustomerApiDeleteCustomersIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {CustomerApiGetCustomersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomers(requestParameters?: CustomerApiGetCustomersRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerListResponse>;

    /**
     * 
     * @param {CustomerApiGetCustomersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomersId(requestParameters: CustomerApiGetCustomersIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerResponse>;

    /**
     * 
     * @param {CustomerApiPostCustomersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    postCustomers(requestParameters: CustomerApiPostCustomersRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerResponse>;

    /**
     * 
     * @param {CustomerApiPutCustomersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    putCustomersId(requestParameters: CustomerApiPutCustomersIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerResponse>;

}

/**
 * Request parameters for deleteCustomersId operation in CustomerApi.
 * @export
 * @interface CustomerApiDeleteCustomersIdRequest
 */
export interface CustomerApiDeleteCustomersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CustomerApiDeleteCustomersId
     */
    readonly id: number
}

/**
 * Request parameters for getCustomers operation in CustomerApi.
 * @export
 * @interface CustomerApiGetCustomersRequest
 */
export interface CustomerApiGetCustomersRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof CustomerApiGetCustomers
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof CustomerApiGetCustomers
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof CustomerApiGetCustomers
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof CustomerApiGetCustomers
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof CustomerApiGetCustomers
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof CustomerApiGetCustomers
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof CustomerApiGetCustomers
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof CustomerApiGetCustomers
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof CustomerApiGetCustomers
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof CustomerApiGetCustomers
     */
    readonly locale?: string
}

/**
 * Request parameters for getCustomersId operation in CustomerApi.
 * @export
 * @interface CustomerApiGetCustomersIdRequest
 */
export interface CustomerApiGetCustomersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CustomerApiGetCustomersId
     */
    readonly id: number
}

/**
 * Request parameters for postCustomers operation in CustomerApi.
 * @export
 * @interface CustomerApiPostCustomersRequest
 */
export interface CustomerApiPostCustomersRequest {
    /**
     * 
     * @type {CustomerRequest}
     * @memberof CustomerApiPostCustomers
     */
    readonly customerRequest: CustomerRequest
}

/**
 * Request parameters for putCustomersId operation in CustomerApi.
 * @export
 * @interface CustomerApiPutCustomersIdRequest
 */
export interface CustomerApiPutCustomersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CustomerApiPutCustomersId
     */
    readonly id: number

    /**
     * 
     * @type {CustomerRequest}
     * @memberof CustomerApiPutCustomersId
     */
    readonly customerRequest: CustomerRequest
}

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI implements CustomerApiInterface {
    /**
     * 
     * @param {CustomerApiDeleteCustomersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public deleteCustomersId(requestParameters: CustomerApiDeleteCustomersIdRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).deleteCustomersId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerApiGetCustomersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public getCustomers(requestParameters: CustomerApiGetCustomersRequest = {}, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getCustomers(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerApiGetCustomersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public getCustomersId(requestParameters: CustomerApiGetCustomersIdRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getCustomersId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerApiPostCustomersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public postCustomers(requestParameters: CustomerApiPostCustomersRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).postCustomers(requestParameters.customerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerApiPutCustomersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public putCustomersId(requestParameters: CustomerApiPutCustomersIdRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).putCustomersId(requestParameters.id, requestParameters.customerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DealApi - axios parameter creator
 * @export
 */
export const DealApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDealsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDealsId', 'id', id)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeals: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealsId', 'id', id)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DealRequest} dealRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDeals: async (dealRequest: DealRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dealRequest' is not null or undefined
            assertParamExists('postDeals', 'dealRequest', dealRequest)
            const localVarPath = `/deals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {DealRequest} dealRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDealsId: async (id: number, dealRequest: DealRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putDealsId', 'id', id)
            // verify required parameter 'dealRequest' is not null or undefined
            assertParamExists('putDealsId', 'dealRequest', dealRequest)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DealApi - functional programming interface
 * @export
 */
export const DealApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DealApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDealsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDealsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DealApi.deleteDealsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeals(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DealListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeals(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DealApi.getDeals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDealsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DealApi.getDealsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DealRequest} dealRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDeals(dealRequest: DealRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDeals(dealRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DealApi.postDeals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {DealRequest} dealRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDealsId(id: number, dealRequest: DealRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putDealsId(id, dealRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DealApi.putDealsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DealApi - factory interface
 * @export
 */
export const DealApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DealApiFp(configuration)
    return {
        /**
         * 
         * @param {DealApiDeleteDealsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDealsId(requestParameters: DealApiDeleteDealsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteDealsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DealApiGetDealsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeals(requestParameters: DealApiGetDealsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DealListResponse> {
            return localVarFp.getDeals(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DealApiGetDealsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealsId(requestParameters: DealApiGetDealsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<DealResponse> {
            return localVarFp.getDealsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DealApiPostDealsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDeals(requestParameters: DealApiPostDealsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DealResponse> {
            return localVarFp.postDeals(requestParameters.dealRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DealApiPutDealsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDealsId(requestParameters: DealApiPutDealsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<DealResponse> {
            return localVarFp.putDealsId(requestParameters.id, requestParameters.dealRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DealApi - interface
 * @export
 * @interface DealApi
 */
export interface DealApiInterface {
    /**
     * 
     * @param {DealApiDeleteDealsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApiInterface
     */
    deleteDealsId(requestParameters: DealApiDeleteDealsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {DealApiGetDealsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApiInterface
     */
    getDeals(requestParameters?: DealApiGetDealsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DealListResponse>;

    /**
     * 
     * @param {DealApiGetDealsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApiInterface
     */
    getDealsId(requestParameters: DealApiGetDealsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<DealResponse>;

    /**
     * 
     * @param {DealApiPostDealsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApiInterface
     */
    postDeals(requestParameters: DealApiPostDealsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DealResponse>;

    /**
     * 
     * @param {DealApiPutDealsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApiInterface
     */
    putDealsId(requestParameters: DealApiPutDealsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<DealResponse>;

}

/**
 * Request parameters for deleteDealsId operation in DealApi.
 * @export
 * @interface DealApiDeleteDealsIdRequest
 */
export interface DealApiDeleteDealsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DealApiDeleteDealsId
     */
    readonly id: number
}

/**
 * Request parameters for getDeals operation in DealApi.
 * @export
 * @interface DealApiGetDealsRequest
 */
export interface DealApiGetDealsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof DealApiGetDeals
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof DealApiGetDeals
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof DealApiGetDeals
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof DealApiGetDeals
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof DealApiGetDeals
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof DealApiGetDeals
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof DealApiGetDeals
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof DealApiGetDeals
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof DealApiGetDeals
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof DealApiGetDeals
     */
    readonly locale?: string
}

/**
 * Request parameters for getDealsId operation in DealApi.
 * @export
 * @interface DealApiGetDealsIdRequest
 */
export interface DealApiGetDealsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DealApiGetDealsId
     */
    readonly id: number
}

/**
 * Request parameters for postDeals operation in DealApi.
 * @export
 * @interface DealApiPostDealsRequest
 */
export interface DealApiPostDealsRequest {
    /**
     * 
     * @type {DealRequest}
     * @memberof DealApiPostDeals
     */
    readonly dealRequest: DealRequest
}

/**
 * Request parameters for putDealsId operation in DealApi.
 * @export
 * @interface DealApiPutDealsIdRequest
 */
export interface DealApiPutDealsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DealApiPutDealsId
     */
    readonly id: number

    /**
     * 
     * @type {DealRequest}
     * @memberof DealApiPutDealsId
     */
    readonly dealRequest: DealRequest
}

/**
 * DealApi - object-oriented interface
 * @export
 * @class DealApi
 * @extends {BaseAPI}
 */
export class DealApi extends BaseAPI implements DealApiInterface {
    /**
     * 
     * @param {DealApiDeleteDealsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApi
     */
    public deleteDealsId(requestParameters: DealApiDeleteDealsIdRequest, options?: RawAxiosRequestConfig) {
        return DealApiFp(this.configuration).deleteDealsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DealApiGetDealsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApi
     */
    public getDeals(requestParameters: DealApiGetDealsRequest = {}, options?: RawAxiosRequestConfig) {
        return DealApiFp(this.configuration).getDeals(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DealApiGetDealsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApi
     */
    public getDealsId(requestParameters: DealApiGetDealsIdRequest, options?: RawAxiosRequestConfig) {
        return DealApiFp(this.configuration).getDealsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DealApiPostDealsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApi
     */
    public postDeals(requestParameters: DealApiPostDealsRequest, options?: RawAxiosRequestConfig) {
        return DealApiFp(this.configuration).postDeals(requestParameters.dealRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DealApiPutDealsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApi
     */
    public putDealsId(requestParameters: DealApiPutDealsIdRequest, options?: RawAxiosRequestConfig) {
        return DealApiFp(this.configuration).putDealsId(requestParameters.id, requestParameters.dealRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FaqApi - axios parameter creator
 * @export
 */
export const FaqApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFaqsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFaqsId', 'id', id)
            const localVarPath = `/faqs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqs: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/faqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFaqsId', 'id', id)
            const localVarPath = `/faqs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FaqRequest} faqRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFaqs: async (faqRequest: FaqRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'faqRequest' is not null or undefined
            assertParamExists('postFaqs', 'faqRequest', faqRequest)
            const localVarPath = `/faqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {FaqRequest} faqRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFaqsId: async (id: number, faqRequest: FaqRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putFaqsId', 'id', id)
            // verify required parameter 'faqRequest' is not null or undefined
            assertParamExists('putFaqsId', 'faqRequest', faqRequest)
            const localVarPath = `/faqs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FaqApi - functional programming interface
 * @export
 */
export const FaqApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FaqApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFaqsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFaqsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaqApi.deleteFaqsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFaqs(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaqs(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaqApi.getFaqs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFaqsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaqsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaqApi.getFaqsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FaqRequest} faqRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFaqs(faqRequest: FaqRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFaqs(faqRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaqApi.postFaqs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {FaqRequest} faqRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFaqsId(id: number, faqRequest: FaqRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putFaqsId(id, faqRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaqApi.putFaqsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FaqApi - factory interface
 * @export
 */
export const FaqApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FaqApiFp(configuration)
    return {
        /**
         * 
         * @param {FaqApiDeleteFaqsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFaqsId(requestParameters: FaqApiDeleteFaqsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteFaqsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FaqApiGetFaqsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqs(requestParameters: FaqApiGetFaqsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FaqListResponse> {
            return localVarFp.getFaqs(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FaqApiGetFaqsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqsId(requestParameters: FaqApiGetFaqsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<FaqResponse> {
            return localVarFp.getFaqsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FaqApiPostFaqsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFaqs(requestParameters: FaqApiPostFaqsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FaqResponse> {
            return localVarFp.postFaqs(requestParameters.faqRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FaqApiPutFaqsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFaqsId(requestParameters: FaqApiPutFaqsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<FaqResponse> {
            return localVarFp.putFaqsId(requestParameters.id, requestParameters.faqRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FaqApi - interface
 * @export
 * @interface FaqApi
 */
export interface FaqApiInterface {
    /**
     * 
     * @param {FaqApiDeleteFaqsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApiInterface
     */
    deleteFaqsId(requestParameters: FaqApiDeleteFaqsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {FaqApiGetFaqsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApiInterface
     */
    getFaqs(requestParameters?: FaqApiGetFaqsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FaqListResponse>;

    /**
     * 
     * @param {FaqApiGetFaqsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApiInterface
     */
    getFaqsId(requestParameters: FaqApiGetFaqsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<FaqResponse>;

    /**
     * 
     * @param {FaqApiPostFaqsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApiInterface
     */
    postFaqs(requestParameters: FaqApiPostFaqsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FaqResponse>;

    /**
     * 
     * @param {FaqApiPutFaqsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApiInterface
     */
    putFaqsId(requestParameters: FaqApiPutFaqsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<FaqResponse>;

}

/**
 * Request parameters for deleteFaqsId operation in FaqApi.
 * @export
 * @interface FaqApiDeleteFaqsIdRequest
 */
export interface FaqApiDeleteFaqsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FaqApiDeleteFaqsId
     */
    readonly id: number
}

/**
 * Request parameters for getFaqs operation in FaqApi.
 * @export
 * @interface FaqApiGetFaqsRequest
 */
export interface FaqApiGetFaqsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof FaqApiGetFaqs
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof FaqApiGetFaqs
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof FaqApiGetFaqs
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof FaqApiGetFaqs
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof FaqApiGetFaqs
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof FaqApiGetFaqs
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof FaqApiGetFaqs
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof FaqApiGetFaqs
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof FaqApiGetFaqs
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof FaqApiGetFaqs
     */
    readonly locale?: string
}

/**
 * Request parameters for getFaqsId operation in FaqApi.
 * @export
 * @interface FaqApiGetFaqsIdRequest
 */
export interface FaqApiGetFaqsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FaqApiGetFaqsId
     */
    readonly id: number
}

/**
 * Request parameters for postFaqs operation in FaqApi.
 * @export
 * @interface FaqApiPostFaqsRequest
 */
export interface FaqApiPostFaqsRequest {
    /**
     * 
     * @type {FaqRequest}
     * @memberof FaqApiPostFaqs
     */
    readonly faqRequest: FaqRequest
}

/**
 * Request parameters for putFaqsId operation in FaqApi.
 * @export
 * @interface FaqApiPutFaqsIdRequest
 */
export interface FaqApiPutFaqsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FaqApiPutFaqsId
     */
    readonly id: number

    /**
     * 
     * @type {FaqRequest}
     * @memberof FaqApiPutFaqsId
     */
    readonly faqRequest: FaqRequest
}

/**
 * FaqApi - object-oriented interface
 * @export
 * @class FaqApi
 * @extends {BaseAPI}
 */
export class FaqApi extends BaseAPI implements FaqApiInterface {
    /**
     * 
     * @param {FaqApiDeleteFaqsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public deleteFaqsId(requestParameters: FaqApiDeleteFaqsIdRequest, options?: RawAxiosRequestConfig) {
        return FaqApiFp(this.configuration).deleteFaqsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FaqApiGetFaqsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public getFaqs(requestParameters: FaqApiGetFaqsRequest = {}, options?: RawAxiosRequestConfig) {
        return FaqApiFp(this.configuration).getFaqs(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FaqApiGetFaqsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public getFaqsId(requestParameters: FaqApiGetFaqsIdRequest, options?: RawAxiosRequestConfig) {
        return FaqApiFp(this.configuration).getFaqsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FaqApiPostFaqsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public postFaqs(requestParameters: FaqApiPostFaqsRequest, options?: RawAxiosRequestConfig) {
        return FaqApiFp(this.configuration).postFaqs(requestParameters.faqRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FaqApiPutFaqsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public putFaqsId(requestParameters: FaqApiPutFaqsIdRequest, options?: RawAxiosRequestConfig) {
        return FaqApiFp(this.configuration).putFaqsId(requestParameters.id, requestParameters.faqRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GlobalApi - axios parameter creator
 * @export
 */
export const GlobalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGlobal: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobal: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GlobalRequest} globalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGlobal: async (globalRequest: GlobalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'globalRequest' is not null or undefined
            assertParamExists('putGlobal', 'globalRequest', globalRequest)
            const localVarPath = `/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(globalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GlobalApi - functional programming interface
 * @export
 */
export const GlobalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GlobalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGlobal(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGlobal(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GlobalApi.deleteGlobal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGlobal(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobal(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GlobalApi.getGlobal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GlobalRequest} globalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGlobal(globalRequest: GlobalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putGlobal(globalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GlobalApi.putGlobal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GlobalApi - factory interface
 * @export
 */
export const GlobalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GlobalApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGlobal(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteGlobal(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GlobalApiGetGlobalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobal(requestParameters: GlobalApiGetGlobalRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GlobalResponse> {
            return localVarFp.getGlobal(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GlobalApiPutGlobalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGlobal(requestParameters: GlobalApiPutGlobalRequest, options?: RawAxiosRequestConfig): AxiosPromise<GlobalResponse> {
            return localVarFp.putGlobal(requestParameters.globalRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GlobalApi - interface
 * @export
 * @interface GlobalApi
 */
export interface GlobalApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApiInterface
     */
    deleteGlobal(options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {GlobalApiGetGlobalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApiInterface
     */
    getGlobal(requestParameters?: GlobalApiGetGlobalRequest, options?: RawAxiosRequestConfig): AxiosPromise<GlobalResponse>;

    /**
     * 
     * @param {GlobalApiPutGlobalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApiInterface
     */
    putGlobal(requestParameters: GlobalApiPutGlobalRequest, options?: RawAxiosRequestConfig): AxiosPromise<GlobalResponse>;

}

/**
 * Request parameters for getGlobal operation in GlobalApi.
 * @export
 * @interface GlobalApiGetGlobalRequest
 */
export interface GlobalApiGetGlobalRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof GlobalApiGetGlobal
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly locale?: string
}

/**
 * Request parameters for putGlobal operation in GlobalApi.
 * @export
 * @interface GlobalApiPutGlobalRequest
 */
export interface GlobalApiPutGlobalRequest {
    /**
     * 
     * @type {GlobalRequest}
     * @memberof GlobalApiPutGlobal
     */
    readonly globalRequest: GlobalRequest
}

/**
 * GlobalApi - object-oriented interface
 * @export
 * @class GlobalApi
 * @extends {BaseAPI}
 */
export class GlobalApi extends BaseAPI implements GlobalApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public deleteGlobal(options?: RawAxiosRequestConfig) {
        return GlobalApiFp(this.configuration).deleteGlobal(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GlobalApiGetGlobalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public getGlobal(requestParameters: GlobalApiGetGlobalRequest = {}, options?: RawAxiosRequestConfig) {
        return GlobalApiFp(this.configuration).getGlobal(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GlobalApiPutGlobalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public putGlobal(requestParameters: GlobalApiPutGlobalRequest, options?: RawAxiosRequestConfig) {
        return GlobalApiFp(this.configuration).putGlobal(requestParameters.globalRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LogoApi - axios parameter creator
 * @export
 */
export const LogoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLogosId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteLogosId', 'id', id)
            const localVarPath = `/logos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogos: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogosId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLogosId', 'id', id)
            const localVarPath = `/logos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LogoRequest} logoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogos: async (logoRequest: LogoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoRequest' is not null or undefined
            assertParamExists('postLogos', 'logoRequest', logoRequest)
            const localVarPath = `/logos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogoRequest} logoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLogosId: async (id: number, logoRequest: LogoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putLogosId', 'id', id)
            // verify required parameter 'logoRequest' is not null or undefined
            assertParamExists('putLogosId', 'logoRequest', logoRequest)
            const localVarPath = `/logos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogoApi - functional programming interface
 * @export
 */
export const LogoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLogosId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLogosId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogoApi.deleteLogosId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLogos(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLogos(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogoApi.getLogos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLogosId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLogosId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogoApi.getLogosId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LogoRequest} logoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogos(logoRequest: LogoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogos(logoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogoApi.postLogos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogoRequest} logoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putLogosId(id: number, logoRequest: LogoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putLogosId(id, logoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogoApi.putLogosId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LogoApi - factory interface
 * @export
 */
export const LogoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogoApiFp(configuration)
    return {
        /**
         * 
         * @param {LogoApiDeleteLogosIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLogosId(requestParameters: LogoApiDeleteLogosIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteLogosId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogoApiGetLogosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogos(requestParameters: LogoApiGetLogosRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<LogoListResponse> {
            return localVarFp.getLogos(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogoApiGetLogosIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogosId(requestParameters: LogoApiGetLogosIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogoResponse> {
            return localVarFp.getLogosId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogoApiPostLogosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogos(requestParameters: LogoApiPostLogosRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogoResponse> {
            return localVarFp.postLogos(requestParameters.logoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogoApiPutLogosIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLogosId(requestParameters: LogoApiPutLogosIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogoResponse> {
            return localVarFp.putLogosId(requestParameters.id, requestParameters.logoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogoApi - interface
 * @export
 * @interface LogoApi
 */
export interface LogoApiInterface {
    /**
     * 
     * @param {LogoApiDeleteLogosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoApiInterface
     */
    deleteLogosId(requestParameters: LogoApiDeleteLogosIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {LogoApiGetLogosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoApiInterface
     */
    getLogos(requestParameters?: LogoApiGetLogosRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogoListResponse>;

    /**
     * 
     * @param {LogoApiGetLogosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoApiInterface
     */
    getLogosId(requestParameters: LogoApiGetLogosIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogoResponse>;

    /**
     * 
     * @param {LogoApiPostLogosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoApiInterface
     */
    postLogos(requestParameters: LogoApiPostLogosRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogoResponse>;

    /**
     * 
     * @param {LogoApiPutLogosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoApiInterface
     */
    putLogosId(requestParameters: LogoApiPutLogosIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogoResponse>;

}

/**
 * Request parameters for deleteLogosId operation in LogoApi.
 * @export
 * @interface LogoApiDeleteLogosIdRequest
 */
export interface LogoApiDeleteLogosIdRequest {
    /**
     * 
     * @type {number}
     * @memberof LogoApiDeleteLogosId
     */
    readonly id: number
}

/**
 * Request parameters for getLogos operation in LogoApi.
 * @export
 * @interface LogoApiGetLogosRequest
 */
export interface LogoApiGetLogosRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof LogoApiGetLogos
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof LogoApiGetLogos
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof LogoApiGetLogos
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof LogoApiGetLogos
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof LogoApiGetLogos
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof LogoApiGetLogos
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof LogoApiGetLogos
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof LogoApiGetLogos
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof LogoApiGetLogos
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof LogoApiGetLogos
     */
    readonly locale?: string
}

/**
 * Request parameters for getLogosId operation in LogoApi.
 * @export
 * @interface LogoApiGetLogosIdRequest
 */
export interface LogoApiGetLogosIdRequest {
    /**
     * 
     * @type {number}
     * @memberof LogoApiGetLogosId
     */
    readonly id: number
}

/**
 * Request parameters for postLogos operation in LogoApi.
 * @export
 * @interface LogoApiPostLogosRequest
 */
export interface LogoApiPostLogosRequest {
    /**
     * 
     * @type {LogoRequest}
     * @memberof LogoApiPostLogos
     */
    readonly logoRequest: LogoRequest
}

/**
 * Request parameters for putLogosId operation in LogoApi.
 * @export
 * @interface LogoApiPutLogosIdRequest
 */
export interface LogoApiPutLogosIdRequest {
    /**
     * 
     * @type {number}
     * @memberof LogoApiPutLogosId
     */
    readonly id: number

    /**
     * 
     * @type {LogoRequest}
     * @memberof LogoApiPutLogosId
     */
    readonly logoRequest: LogoRequest
}

/**
 * LogoApi - object-oriented interface
 * @export
 * @class LogoApi
 * @extends {BaseAPI}
 */
export class LogoApi extends BaseAPI implements LogoApiInterface {
    /**
     * 
     * @param {LogoApiDeleteLogosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoApi
     */
    public deleteLogosId(requestParameters: LogoApiDeleteLogosIdRequest, options?: RawAxiosRequestConfig) {
        return LogoApiFp(this.configuration).deleteLogosId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogoApiGetLogosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoApi
     */
    public getLogos(requestParameters: LogoApiGetLogosRequest = {}, options?: RawAxiosRequestConfig) {
        return LogoApiFp(this.configuration).getLogos(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogoApiGetLogosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoApi
     */
    public getLogosId(requestParameters: LogoApiGetLogosIdRequest, options?: RawAxiosRequestConfig) {
        return LogoApiFp(this.configuration).getLogosId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogoApiPostLogosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoApi
     */
    public postLogos(requestParameters: LogoApiPostLogosRequest, options?: RawAxiosRequestConfig) {
        return LogoApiFp(this.configuration).postLogos(requestParameters.logoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogoApiPutLogosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoApi
     */
    public putLogosId(requestParameters: LogoApiPutLogosIdRequest, options?: RawAxiosRequestConfig) {
        return LogoApiFp(this.configuration).putLogosId(requestParameters.id, requestParameters.logoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NoteApi - axios parameter creator
 * @export
 */
export const NoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteNotesId', 'id', id)
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotes: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNotesId', 'id', id)
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NoteRequest} noteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotes: async (noteRequest: NoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteRequest' is not null or undefined
            assertParamExists('postNotes', 'noteRequest', noteRequest)
            const localVarPath = `/notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(noteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {NoteRequest} noteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putNotesId: async (id: number, noteRequest: NoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putNotesId', 'id', id)
            // verify required parameter 'noteRequest' is not null or undefined
            assertParamExists('putNotesId', 'noteRequest', noteRequest)
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(noteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NoteApi - functional programming interface
 * @export
 */
export const NoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NoteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNotesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNotesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NoteApi.deleteNotesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotes(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoteListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotes(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NoteApi.getNotes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NoteApi.getNotesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {NoteRequest} noteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNotes(noteRequest: NoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postNotes(noteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NoteApi.postNotes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {NoteRequest} noteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putNotesId(id: number, noteRequest: NoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putNotesId(id, noteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NoteApi.putNotesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NoteApi - factory interface
 * @export
 */
export const NoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NoteApiFp(configuration)
    return {
        /**
         * 
         * @param {NoteApiDeleteNotesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotesId(requestParameters: NoteApiDeleteNotesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteNotesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NoteApiGetNotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotes(requestParameters: NoteApiGetNotesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<NoteListResponse> {
            return localVarFp.getNotes(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NoteApiGetNotesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotesId(requestParameters: NoteApiGetNotesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<NoteResponse> {
            return localVarFp.getNotesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NoteApiPostNotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotes(requestParameters: NoteApiPostNotesRequest, options?: RawAxiosRequestConfig): AxiosPromise<NoteResponse> {
            return localVarFp.postNotes(requestParameters.noteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NoteApiPutNotesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putNotesId(requestParameters: NoteApiPutNotesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<NoteResponse> {
            return localVarFp.putNotesId(requestParameters.id, requestParameters.noteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NoteApi - interface
 * @export
 * @interface NoteApi
 */
export interface NoteApiInterface {
    /**
     * 
     * @param {NoteApiDeleteNotesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApiInterface
     */
    deleteNotesId(requestParameters: NoteApiDeleteNotesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {NoteApiGetNotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApiInterface
     */
    getNotes(requestParameters?: NoteApiGetNotesRequest, options?: RawAxiosRequestConfig): AxiosPromise<NoteListResponse>;

    /**
     * 
     * @param {NoteApiGetNotesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApiInterface
     */
    getNotesId(requestParameters: NoteApiGetNotesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<NoteResponse>;

    /**
     * 
     * @param {NoteApiPostNotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApiInterface
     */
    postNotes(requestParameters: NoteApiPostNotesRequest, options?: RawAxiosRequestConfig): AxiosPromise<NoteResponse>;

    /**
     * 
     * @param {NoteApiPutNotesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApiInterface
     */
    putNotesId(requestParameters: NoteApiPutNotesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<NoteResponse>;

}

/**
 * Request parameters for deleteNotesId operation in NoteApi.
 * @export
 * @interface NoteApiDeleteNotesIdRequest
 */
export interface NoteApiDeleteNotesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof NoteApiDeleteNotesId
     */
    readonly id: number
}

/**
 * Request parameters for getNotes operation in NoteApi.
 * @export
 * @interface NoteApiGetNotesRequest
 */
export interface NoteApiGetNotesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof NoteApiGetNotes
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof NoteApiGetNotes
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof NoteApiGetNotes
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof NoteApiGetNotes
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof NoteApiGetNotes
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof NoteApiGetNotes
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof NoteApiGetNotes
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof NoteApiGetNotes
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof NoteApiGetNotes
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof NoteApiGetNotes
     */
    readonly locale?: string
}

/**
 * Request parameters for getNotesId operation in NoteApi.
 * @export
 * @interface NoteApiGetNotesIdRequest
 */
export interface NoteApiGetNotesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof NoteApiGetNotesId
     */
    readonly id: number
}

/**
 * Request parameters for postNotes operation in NoteApi.
 * @export
 * @interface NoteApiPostNotesRequest
 */
export interface NoteApiPostNotesRequest {
    /**
     * 
     * @type {NoteRequest}
     * @memberof NoteApiPostNotes
     */
    readonly noteRequest: NoteRequest
}

/**
 * Request parameters for putNotesId operation in NoteApi.
 * @export
 * @interface NoteApiPutNotesIdRequest
 */
export interface NoteApiPutNotesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof NoteApiPutNotesId
     */
    readonly id: number

    /**
     * 
     * @type {NoteRequest}
     * @memberof NoteApiPutNotesId
     */
    readonly noteRequest: NoteRequest
}

/**
 * NoteApi - object-oriented interface
 * @export
 * @class NoteApi
 * @extends {BaseAPI}
 */
export class NoteApi extends BaseAPI implements NoteApiInterface {
    /**
     * 
     * @param {NoteApiDeleteNotesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public deleteNotesId(requestParameters: NoteApiDeleteNotesIdRequest, options?: RawAxiosRequestConfig) {
        return NoteApiFp(this.configuration).deleteNotesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NoteApiGetNotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public getNotes(requestParameters: NoteApiGetNotesRequest = {}, options?: RawAxiosRequestConfig) {
        return NoteApiFp(this.configuration).getNotes(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NoteApiGetNotesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public getNotesId(requestParameters: NoteApiGetNotesIdRequest, options?: RawAxiosRequestConfig) {
        return NoteApiFp(this.configuration).getNotesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NoteApiPostNotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public postNotes(requestParameters: NoteApiPostNotesRequest, options?: RawAxiosRequestConfig) {
        return NoteApiFp(this.configuration).postNotes(requestParameters.noteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NoteApiPutNotesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public putNotesId(requestParameters: NoteApiPutNotesIdRequest, options?: RawAxiosRequestConfig) {
        return NoteApiFp(this.configuration).putNotesId(requestParameters.id, requestParameters.noteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PageApi - axios parameter creator
 * @export
 */
export const PageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePagesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePagesId', 'id', id)
            const localVarPath = `/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPages: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPagesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPagesId', 'id', id)
            const localVarPath = `/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PageRequest} pageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPages: async (pageRequest: PageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageRequest' is not null or undefined
            assertParamExists('postPages', 'pageRequest', pageRequest)
            const localVarPath = `/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PageRequest} pageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPagesId: async (id: number, pageRequest: PageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putPagesId', 'id', id)
            // verify required parameter 'pageRequest' is not null or undefined
            assertParamExists('putPagesId', 'pageRequest', pageRequest)
            const localVarPath = `/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageApi - functional programming interface
 * @export
 */
export const PageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePagesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePagesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.deletePagesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPages(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPages(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.getPages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPagesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPagesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.getPagesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PageRequest} pageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPages(pageRequest: PageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPages(pageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.postPages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PageRequest} pageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPagesId(id: number, pageRequest: PageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPagesId(id, pageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.putPagesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PageApi - factory interface
 * @export
 */
export const PageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageApiFp(configuration)
    return {
        /**
         * 
         * @param {PageApiDeletePagesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePagesId(requestParameters: PageApiDeletePagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deletePagesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageApiGetPagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPages(requestParameters: PageApiGetPagesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageListResponse> {
            return localVarFp.getPages(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageApiGetPagesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPagesId(requestParameters: PageApiGetPagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageResponse> {
            return localVarFp.getPagesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageApiPostPagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPages(requestParameters: PageApiPostPagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageResponse> {
            return localVarFp.postPages(requestParameters.pageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageApiPutPagesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPagesId(requestParameters: PageApiPutPagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageResponse> {
            return localVarFp.putPagesId(requestParameters.id, requestParameters.pageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageApi - interface
 * @export
 * @interface PageApi
 */
export interface PageApiInterface {
    /**
     * 
     * @param {PageApiDeletePagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApiInterface
     */
    deletePagesId(requestParameters: PageApiDeletePagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {PageApiGetPagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApiInterface
     */
    getPages(requestParameters?: PageApiGetPagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageListResponse>;

    /**
     * 
     * @param {PageApiGetPagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApiInterface
     */
    getPagesId(requestParameters: PageApiGetPagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageResponse>;

    /**
     * 
     * @param {PageApiPostPagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApiInterface
     */
    postPages(requestParameters: PageApiPostPagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageResponse>;

    /**
     * 
     * @param {PageApiPutPagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApiInterface
     */
    putPagesId(requestParameters: PageApiPutPagesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageResponse>;

}

/**
 * Request parameters for deletePagesId operation in PageApi.
 * @export
 * @interface PageApiDeletePagesIdRequest
 */
export interface PageApiDeletePagesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PageApiDeletePagesId
     */
    readonly id: number
}

/**
 * Request parameters for getPages operation in PageApi.
 * @export
 * @interface PageApiGetPagesRequest
 */
export interface PageApiGetPagesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof PageApiGetPages
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof PageApiGetPages
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof PageApiGetPages
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof PageApiGetPages
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof PageApiGetPages
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof PageApiGetPages
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof PageApiGetPages
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof PageApiGetPages
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof PageApiGetPages
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof PageApiGetPages
     */
    readonly locale?: string
}

/**
 * Request parameters for getPagesId operation in PageApi.
 * @export
 * @interface PageApiGetPagesIdRequest
 */
export interface PageApiGetPagesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PageApiGetPagesId
     */
    readonly id: number
}

/**
 * Request parameters for postPages operation in PageApi.
 * @export
 * @interface PageApiPostPagesRequest
 */
export interface PageApiPostPagesRequest {
    /**
     * 
     * @type {PageRequest}
     * @memberof PageApiPostPages
     */
    readonly pageRequest: PageRequest
}

/**
 * Request parameters for putPagesId operation in PageApi.
 * @export
 * @interface PageApiPutPagesIdRequest
 */
export interface PageApiPutPagesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PageApiPutPagesId
     */
    readonly id: number

    /**
     * 
     * @type {PageRequest}
     * @memberof PageApiPutPagesId
     */
    readonly pageRequest: PageRequest
}

/**
 * PageApi - object-oriented interface
 * @export
 * @class PageApi
 * @extends {BaseAPI}
 */
export class PageApi extends BaseAPI implements PageApiInterface {
    /**
     * 
     * @param {PageApiDeletePagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public deletePagesId(requestParameters: PageApiDeletePagesIdRequest, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).deletePagesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageApiGetPagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getPages(requestParameters: PageApiGetPagesRequest = {}, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).getPages(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageApiGetPagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getPagesId(requestParameters: PageApiGetPagesIdRequest, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).getPagesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageApiPostPagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public postPages(requestParameters: PageApiPostPagesRequest, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).postPages(requestParameters.pageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageApiPutPagesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public putPagesId(requestParameters: PageApiPutPagesIdRequest, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).putPagesId(requestParameters.id, requestParameters.pageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlanApi - axios parameter creator
 * @export
 */
export const PlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlansId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePlansId', 'id', id)
            const localVarPath = `/plans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlans: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlansId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPlansId', 'id', id)
            const localVarPath = `/plans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PlanRequest} planRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlans: async (planRequest: PlanRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planRequest' is not null or undefined
            assertParamExists('postPlans', 'planRequest', planRequest)
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(planRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PlanRequest} planRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPlansId: async (id: number, planRequest: PlanRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putPlansId', 'id', id)
            // verify required parameter 'planRequest' is not null or undefined
            assertParamExists('putPlansId', 'planRequest', planRequest)
            const localVarPath = `/plans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(planRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlanApi - functional programming interface
 * @export
 */
export const PlanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlansId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlansId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanApi.deletePlansId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlans(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlans(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanApi.getPlans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlansId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlansId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanApi.getPlansId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PlanRequest} planRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPlans(planRequest: PlanRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPlans(planRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanApi.postPlans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PlanRequest} planRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPlansId(id: number, planRequest: PlanRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPlansId(id, planRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanApi.putPlansId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlanApi - factory interface
 * @export
 */
export const PlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlanApiFp(configuration)
    return {
        /**
         * 
         * @param {PlanApiDeletePlansIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlansId(requestParameters: PlanApiDeletePlansIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deletePlansId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlanApiGetPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlans(requestParameters: PlanApiGetPlansRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PlanListResponse> {
            return localVarFp.getPlans(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlanApiGetPlansIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlansId(requestParameters: PlanApiGetPlansIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlanResponse> {
            return localVarFp.getPlansId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlanApiPostPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlans(requestParameters: PlanApiPostPlansRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlanResponse> {
            return localVarFp.postPlans(requestParameters.planRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlanApiPutPlansIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPlansId(requestParameters: PlanApiPutPlansIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlanResponse> {
            return localVarFp.putPlansId(requestParameters.id, requestParameters.planRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlanApi - interface
 * @export
 * @interface PlanApi
 */
export interface PlanApiInterface {
    /**
     * 
     * @param {PlanApiDeletePlansIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApiInterface
     */
    deletePlansId(requestParameters: PlanApiDeletePlansIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {PlanApiGetPlansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApiInterface
     */
    getPlans(requestParameters?: PlanApiGetPlansRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlanListResponse>;

    /**
     * 
     * @param {PlanApiGetPlansIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApiInterface
     */
    getPlansId(requestParameters: PlanApiGetPlansIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlanResponse>;

    /**
     * 
     * @param {PlanApiPostPlansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApiInterface
     */
    postPlans(requestParameters: PlanApiPostPlansRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlanResponse>;

    /**
     * 
     * @param {PlanApiPutPlansIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApiInterface
     */
    putPlansId(requestParameters: PlanApiPutPlansIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlanResponse>;

}

/**
 * Request parameters for deletePlansId operation in PlanApi.
 * @export
 * @interface PlanApiDeletePlansIdRequest
 */
export interface PlanApiDeletePlansIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PlanApiDeletePlansId
     */
    readonly id: number
}

/**
 * Request parameters for getPlans operation in PlanApi.
 * @export
 * @interface PlanApiGetPlansRequest
 */
export interface PlanApiGetPlansRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof PlanApiGetPlans
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof PlanApiGetPlans
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof PlanApiGetPlans
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof PlanApiGetPlans
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof PlanApiGetPlans
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof PlanApiGetPlans
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof PlanApiGetPlans
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof PlanApiGetPlans
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof PlanApiGetPlans
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof PlanApiGetPlans
     */
    readonly locale?: string
}

/**
 * Request parameters for getPlansId operation in PlanApi.
 * @export
 * @interface PlanApiGetPlansIdRequest
 */
export interface PlanApiGetPlansIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PlanApiGetPlansId
     */
    readonly id: number
}

/**
 * Request parameters for postPlans operation in PlanApi.
 * @export
 * @interface PlanApiPostPlansRequest
 */
export interface PlanApiPostPlansRequest {
    /**
     * 
     * @type {PlanRequest}
     * @memberof PlanApiPostPlans
     */
    readonly planRequest: PlanRequest
}

/**
 * Request parameters for putPlansId operation in PlanApi.
 * @export
 * @interface PlanApiPutPlansIdRequest
 */
export interface PlanApiPutPlansIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PlanApiPutPlansId
     */
    readonly id: number

    /**
     * 
     * @type {PlanRequest}
     * @memberof PlanApiPutPlansId
     */
    readonly planRequest: PlanRequest
}

/**
 * PlanApi - object-oriented interface
 * @export
 * @class PlanApi
 * @extends {BaseAPI}
 */
export class PlanApi extends BaseAPI implements PlanApiInterface {
    /**
     * 
     * @param {PlanApiDeletePlansIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApi
     */
    public deletePlansId(requestParameters: PlanApiDeletePlansIdRequest, options?: RawAxiosRequestConfig) {
        return PlanApiFp(this.configuration).deletePlansId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlanApiGetPlansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApi
     */
    public getPlans(requestParameters: PlanApiGetPlansRequest = {}, options?: RawAxiosRequestConfig) {
        return PlanApiFp(this.configuration).getPlans(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlanApiGetPlansIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApi
     */
    public getPlansId(requestParameters: PlanApiGetPlansIdRequest, options?: RawAxiosRequestConfig) {
        return PlanApiFp(this.configuration).getPlansId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlanApiPostPlansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApi
     */
    public postPlans(requestParameters: PlanApiPostPlansRequest, options?: RawAxiosRequestConfig) {
        return PlanApiFp(this.configuration).postPlans(requestParameters.planRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlanApiPutPlansIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanApi
     */
    public putPlansId(requestParameters: PlanApiPutPlansIdRequest, options?: RawAxiosRequestConfig) {
        return PlanApiFp(this.configuration).putPlansId(requestParameters.id, requestParameters.planRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProductsId', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductsId', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProducts: async (productRequest: ProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productRequest' is not null or undefined
            assertParamExists('postProducts', 'productRequest', productRequest)
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductsId: async (id: number, productRequest: ProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProductsId', 'id', id)
            // verify required parameter 'productRequest' is not null or undefined
            assertParamExists('putProductsId', 'productRequest', productRequest)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.deleteProductsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProducts(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProducts(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.getProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.getProductsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProducts(productRequest: ProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProducts(productRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.postProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductRequest} productRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProductsId(id: number, productRequest: ProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProductsId(id, productRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.putProductsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @param {ProductApiDeleteProductsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductsId(requestParameters: ProductApiDeleteProductsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteProductsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductApiGetProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(requestParameters: ProductApiGetProductsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ProductListResponse> {
            return localVarFp.getProducts(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductApiGetProductsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsId(requestParameters: ProductApiGetProductsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductResponse> {
            return localVarFp.getProductsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductApiPostProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProducts(requestParameters: ProductApiPostProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductResponse> {
            return localVarFp.postProducts(requestParameters.productRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductApiPutProductsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductsId(requestParameters: ProductApiPutProductsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductResponse> {
            return localVarFp.putProductsId(requestParameters.id, requestParameters.productRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - interface
 * @export
 * @interface ProductApi
 */
export interface ProductApiInterface {
    /**
     * 
     * @param {ProductApiDeleteProductsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    deleteProductsId(requestParameters: ProductApiDeleteProductsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {ProductApiGetProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    getProducts(requestParameters?: ProductApiGetProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductListResponse>;

    /**
     * 
     * @param {ProductApiGetProductsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    getProductsId(requestParameters: ProductApiGetProductsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductResponse>;

    /**
     * 
     * @param {ProductApiPostProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    postProducts(requestParameters: ProductApiPostProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductResponse>;

    /**
     * 
     * @param {ProductApiPutProductsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    putProductsId(requestParameters: ProductApiPutProductsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductResponse>;

}

/**
 * Request parameters for deleteProductsId operation in ProductApi.
 * @export
 * @interface ProductApiDeleteProductsIdRequest
 */
export interface ProductApiDeleteProductsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductApiDeleteProductsId
     */
    readonly id: number
}

/**
 * Request parameters for getProducts operation in ProductApi.
 * @export
 * @interface ProductApiGetProductsRequest
 */
export interface ProductApiGetProductsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ProductApiGetProducts
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof ProductApiGetProducts
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ProductApiGetProducts
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ProductApiGetProducts
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ProductApiGetProducts
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ProductApiGetProducts
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ProductApiGetProducts
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ProductApiGetProducts
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof ProductApiGetProducts
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof ProductApiGetProducts
     */
    readonly locale?: string
}

/**
 * Request parameters for getProductsId operation in ProductApi.
 * @export
 * @interface ProductApiGetProductsIdRequest
 */
export interface ProductApiGetProductsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductApiGetProductsId
     */
    readonly id: number
}

/**
 * Request parameters for postProducts operation in ProductApi.
 * @export
 * @interface ProductApiPostProductsRequest
 */
export interface ProductApiPostProductsRequest {
    /**
     * 
     * @type {ProductRequest}
     * @memberof ProductApiPostProducts
     */
    readonly productRequest: ProductRequest
}

/**
 * Request parameters for putProductsId operation in ProductApi.
 * @export
 * @interface ProductApiPutProductsIdRequest
 */
export interface ProductApiPutProductsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductApiPutProductsId
     */
    readonly id: number

    /**
     * 
     * @type {ProductRequest}
     * @memberof ProductApiPutProductsId
     */
    readonly productRequest: ProductRequest
}

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI implements ProductApiInterface {
    /**
     * 
     * @param {ProductApiDeleteProductsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public deleteProductsId(requestParameters: ProductApiDeleteProductsIdRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).deleteProductsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductApiGetProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProducts(requestParameters: ProductApiGetProductsRequest = {}, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProducts(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductApiGetProductsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductsId(requestParameters: ProductApiGetProductsIdRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProductsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductApiPostProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public postProducts(requestParameters: ProductApiPostProductsRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).postProducts(requestParameters.productRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductApiPutProductsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public putProductsId(requestParameters: ProductApiPutProductsIdRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).putProductsId(requestParameters.id, requestParameters.productRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductPageApi - axios parameter creator
 * @export
 */
export const ProductPageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductPage: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductPage: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductPageRequest} productPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductPage: async (productPageRequest: ProductPageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productPageRequest' is not null or undefined
            assertParamExists('putProductPage', 'productPageRequest', productPageRequest)
            const localVarPath = `/product-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductPageApi - functional programming interface
 * @export
 */
export const ProductPageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductPageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductPage(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductPage(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductPageApi.deleteProductPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductPage(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductPage(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductPageApi.getProductPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ProductPageRequest} productPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProductPage(productPageRequest: ProductPageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProductPage(productPageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductPageApi.putProductPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductPageApi - factory interface
 * @export
 */
export const ProductPageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductPageApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductPage(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteProductPage(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductPageApiGetProductPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductPage(requestParameters: ProductPageApiGetProductPageRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ProductPageResponse> {
            return localVarFp.getProductPage(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductPageApiPutProductPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductPage(requestParameters: ProductPageApiPutProductPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductPageResponse> {
            return localVarFp.putProductPage(requestParameters.productPageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductPageApi - interface
 * @export
 * @interface ProductPageApi
 */
export interface ProductPageApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPageApiInterface
     */
    deleteProductPage(options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {ProductPageApiGetProductPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPageApiInterface
     */
    getProductPage(requestParameters?: ProductPageApiGetProductPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductPageResponse>;

    /**
     * 
     * @param {ProductPageApiPutProductPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPageApiInterface
     */
    putProductPage(requestParameters: ProductPageApiPutProductPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductPageResponse>;

}

/**
 * Request parameters for getProductPage operation in ProductPageApi.
 * @export
 * @interface ProductPageApiGetProductPageRequest
 */
export interface ProductPageApiGetProductPageRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ProductPageApiGetProductPage
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof ProductPageApiGetProductPage
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ProductPageApiGetProductPage
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ProductPageApiGetProductPage
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ProductPageApiGetProductPage
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ProductPageApiGetProductPage
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ProductPageApiGetProductPage
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ProductPageApiGetProductPage
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof ProductPageApiGetProductPage
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof ProductPageApiGetProductPage
     */
    readonly locale?: string
}

/**
 * Request parameters for putProductPage operation in ProductPageApi.
 * @export
 * @interface ProductPageApiPutProductPageRequest
 */
export interface ProductPageApiPutProductPageRequest {
    /**
     * 
     * @type {ProductPageRequest}
     * @memberof ProductPageApiPutProductPage
     */
    readonly productPageRequest: ProductPageRequest
}

/**
 * ProductPageApi - object-oriented interface
 * @export
 * @class ProductPageApi
 * @extends {BaseAPI}
 */
export class ProductPageApi extends BaseAPI implements ProductPageApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPageApi
     */
    public deleteProductPage(options?: RawAxiosRequestConfig) {
        return ProductPageApiFp(this.configuration).deleteProductPage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductPageApiGetProductPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPageApi
     */
    public getProductPage(requestParameters: ProductPageApiGetProductPageRequest = {}, options?: RawAxiosRequestConfig) {
        return ProductPageApiFp(this.configuration).getProductPage(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductPageApiPutProductPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPageApi
     */
    public putProductPage(requestParameters: ProductPageApiPutProductPageRequest, options?: RawAxiosRequestConfig) {
        return ProductPageApiFp(this.configuration).putProductPage(requestParameters.productPageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PropertyApi - axios parameter creator
 * @export
 */
export const PropertyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertiesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertiesId', 'id', id)
            const localVarPath = `/properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProperties: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/properties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertiesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPropertiesId', 'id', id)
            const localVarPath = `/properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PropertyRequest} propertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProperties: async (propertyRequest: PropertyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'propertyRequest' is not null or undefined
            assertParamExists('postProperties', 'propertyRequest', propertyRequest)
            const localVarPath = `/properties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(propertyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PropertyRequest} propertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPropertiesId: async (id: number, propertyRequest: PropertyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putPropertiesId', 'id', id)
            // verify required parameter 'propertyRequest' is not null or undefined
            assertParamExists('putPropertiesId', 'propertyRequest', propertyRequest)
            const localVarPath = `/properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(propertyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PropertyApi - functional programming interface
 * @export
 */
export const PropertyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PropertyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertiesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertiesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PropertyApi.deletePropertiesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProperties(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProperties(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PropertyApi.getProperties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPropertiesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPropertiesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PropertyApi.getPropertiesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PropertyRequest} propertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProperties(propertyRequest: PropertyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProperties(propertyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PropertyApi.postProperties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PropertyRequest} propertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPropertiesId(id: number, propertyRequest: PropertyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPropertiesId(id, propertyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PropertyApi.putPropertiesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PropertyApi - factory interface
 * @export
 */
export const PropertyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PropertyApiFp(configuration)
    return {
        /**
         * 
         * @param {PropertyApiDeletePropertiesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertiesId(requestParameters: PropertyApiDeletePropertiesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deletePropertiesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PropertyApiGetPropertiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProperties(requestParameters: PropertyApiGetPropertiesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PropertyListResponse> {
            return localVarFp.getProperties(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PropertyApiGetPropertiesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertiesId(requestParameters: PropertyApiGetPropertiesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PropertyResponse> {
            return localVarFp.getPropertiesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PropertyApiPostPropertiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProperties(requestParameters: PropertyApiPostPropertiesRequest, options?: RawAxiosRequestConfig): AxiosPromise<PropertyResponse> {
            return localVarFp.postProperties(requestParameters.propertyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PropertyApiPutPropertiesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPropertiesId(requestParameters: PropertyApiPutPropertiesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PropertyResponse> {
            return localVarFp.putPropertiesId(requestParameters.id, requestParameters.propertyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PropertyApi - interface
 * @export
 * @interface PropertyApi
 */
export interface PropertyApiInterface {
    /**
     * 
     * @param {PropertyApiDeletePropertiesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyApiInterface
     */
    deletePropertiesId(requestParameters: PropertyApiDeletePropertiesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {PropertyApiGetPropertiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyApiInterface
     */
    getProperties(requestParameters?: PropertyApiGetPropertiesRequest, options?: RawAxiosRequestConfig): AxiosPromise<PropertyListResponse>;

    /**
     * 
     * @param {PropertyApiGetPropertiesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyApiInterface
     */
    getPropertiesId(requestParameters: PropertyApiGetPropertiesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PropertyResponse>;

    /**
     * 
     * @param {PropertyApiPostPropertiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyApiInterface
     */
    postProperties(requestParameters: PropertyApiPostPropertiesRequest, options?: RawAxiosRequestConfig): AxiosPromise<PropertyResponse>;

    /**
     * 
     * @param {PropertyApiPutPropertiesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyApiInterface
     */
    putPropertiesId(requestParameters: PropertyApiPutPropertiesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PropertyResponse>;

}

/**
 * Request parameters for deletePropertiesId operation in PropertyApi.
 * @export
 * @interface PropertyApiDeletePropertiesIdRequest
 */
export interface PropertyApiDeletePropertiesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PropertyApiDeletePropertiesId
     */
    readonly id: number
}

/**
 * Request parameters for getProperties operation in PropertyApi.
 * @export
 * @interface PropertyApiGetPropertiesRequest
 */
export interface PropertyApiGetPropertiesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof PropertyApiGetProperties
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof PropertyApiGetProperties
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof PropertyApiGetProperties
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof PropertyApiGetProperties
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof PropertyApiGetProperties
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof PropertyApiGetProperties
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof PropertyApiGetProperties
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof PropertyApiGetProperties
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof PropertyApiGetProperties
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof PropertyApiGetProperties
     */
    readonly locale?: string
}

/**
 * Request parameters for getPropertiesId operation in PropertyApi.
 * @export
 * @interface PropertyApiGetPropertiesIdRequest
 */
export interface PropertyApiGetPropertiesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PropertyApiGetPropertiesId
     */
    readonly id: number
}

/**
 * Request parameters for postProperties operation in PropertyApi.
 * @export
 * @interface PropertyApiPostPropertiesRequest
 */
export interface PropertyApiPostPropertiesRequest {
    /**
     * 
     * @type {PropertyRequest}
     * @memberof PropertyApiPostProperties
     */
    readonly propertyRequest: PropertyRequest
}

/**
 * Request parameters for putPropertiesId operation in PropertyApi.
 * @export
 * @interface PropertyApiPutPropertiesIdRequest
 */
export interface PropertyApiPutPropertiesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PropertyApiPutPropertiesId
     */
    readonly id: number

    /**
     * 
     * @type {PropertyRequest}
     * @memberof PropertyApiPutPropertiesId
     */
    readonly propertyRequest: PropertyRequest
}

/**
 * PropertyApi - object-oriented interface
 * @export
 * @class PropertyApi
 * @extends {BaseAPI}
 */
export class PropertyApi extends BaseAPI implements PropertyApiInterface {
    /**
     * 
     * @param {PropertyApiDeletePropertiesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyApi
     */
    public deletePropertiesId(requestParameters: PropertyApiDeletePropertiesIdRequest, options?: RawAxiosRequestConfig) {
        return PropertyApiFp(this.configuration).deletePropertiesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PropertyApiGetPropertiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyApi
     */
    public getProperties(requestParameters: PropertyApiGetPropertiesRequest = {}, options?: RawAxiosRequestConfig) {
        return PropertyApiFp(this.configuration).getProperties(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PropertyApiGetPropertiesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyApi
     */
    public getPropertiesId(requestParameters: PropertyApiGetPropertiesIdRequest, options?: RawAxiosRequestConfig) {
        return PropertyApiFp(this.configuration).getPropertiesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PropertyApiPostPropertiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyApi
     */
    public postProperties(requestParameters: PropertyApiPostPropertiesRequest, options?: RawAxiosRequestConfig) {
        return PropertyApiFp(this.configuration).postProperties(requestParameters.propertyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PropertyApiPutPropertiesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyApi
     */
    public putPropertiesId(requestParameters: PropertyApiPutPropertiesIdRequest, options?: RawAxiosRequestConfig) {
        return PropertyApiFp(this.configuration).putPropertiesId(requestParameters.id, requestParameters.propertyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RedirectionApi - axios parameter creator
 * @export
 */
export const RedirectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRedirectionsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRedirectionsId', 'id', id)
            const localVarPath = `/redirections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirections: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/redirections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectionsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRedirectionsId', 'id', id)
            const localVarPath = `/redirections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RedirectionRequest} redirectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRedirections: async (redirectionRequest: RedirectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'redirectionRequest' is not null or undefined
            assertParamExists('postRedirections', 'redirectionRequest', redirectionRequest)
            const localVarPath = `/redirections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(redirectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RedirectionRequest} redirectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRedirectionsId: async (id: number, redirectionRequest: RedirectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putRedirectionsId', 'id', id)
            // verify required parameter 'redirectionRequest' is not null or undefined
            assertParamExists('putRedirectionsId', 'redirectionRequest', redirectionRequest)
            const localVarPath = `/redirections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(redirectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RedirectionApi - functional programming interface
 * @export
 */
export const RedirectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RedirectionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRedirectionsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRedirectionsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedirectionApi.deleteRedirectionsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedirections(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedirections(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedirectionApi.getRedirections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedirectionsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedirectionsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedirectionApi.getRedirectionsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RedirectionRequest} redirectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRedirections(redirectionRequest: RedirectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRedirections(redirectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedirectionApi.postRedirections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {RedirectionRequest} redirectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRedirectionsId(id: number, redirectionRequest: RedirectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRedirectionsId(id, redirectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedirectionApi.putRedirectionsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RedirectionApi - factory interface
 * @export
 */
export const RedirectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RedirectionApiFp(configuration)
    return {
        /**
         * 
         * @param {RedirectionApiDeleteRedirectionsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRedirectionsId(requestParameters: RedirectionApiDeleteRedirectionsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteRedirectionsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RedirectionApiGetRedirectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirections(requestParameters: RedirectionApiGetRedirectionsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionListResponse> {
            return localVarFp.getRedirections(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RedirectionApiGetRedirectionsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectionsId(requestParameters: RedirectionApiGetRedirectionsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionResponse> {
            return localVarFp.getRedirectionsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RedirectionApiPostRedirectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRedirections(requestParameters: RedirectionApiPostRedirectionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionResponse> {
            return localVarFp.postRedirections(requestParameters.redirectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RedirectionApiPutRedirectionsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRedirectionsId(requestParameters: RedirectionApiPutRedirectionsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionResponse> {
            return localVarFp.putRedirectionsId(requestParameters.id, requestParameters.redirectionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RedirectionApi - interface
 * @export
 * @interface RedirectionApi
 */
export interface RedirectionApiInterface {
    /**
     * 
     * @param {RedirectionApiDeleteRedirectionsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApiInterface
     */
    deleteRedirectionsId(requestParameters: RedirectionApiDeleteRedirectionsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {RedirectionApiGetRedirectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApiInterface
     */
    getRedirections(requestParameters?: RedirectionApiGetRedirectionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionListResponse>;

    /**
     * 
     * @param {RedirectionApiGetRedirectionsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApiInterface
     */
    getRedirectionsId(requestParameters: RedirectionApiGetRedirectionsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionResponse>;

    /**
     * 
     * @param {RedirectionApiPostRedirectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApiInterface
     */
    postRedirections(requestParameters: RedirectionApiPostRedirectionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionResponse>;

    /**
     * 
     * @param {RedirectionApiPutRedirectionsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApiInterface
     */
    putRedirectionsId(requestParameters: RedirectionApiPutRedirectionsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionResponse>;

}

/**
 * Request parameters for deleteRedirectionsId operation in RedirectionApi.
 * @export
 * @interface RedirectionApiDeleteRedirectionsIdRequest
 */
export interface RedirectionApiDeleteRedirectionsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RedirectionApiDeleteRedirectionsId
     */
    readonly id: number
}

/**
 * Request parameters for getRedirections operation in RedirectionApi.
 * @export
 * @interface RedirectionApiGetRedirectionsRequest
 */
export interface RedirectionApiGetRedirectionsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof RedirectionApiGetRedirections
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof RedirectionApiGetRedirections
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof RedirectionApiGetRedirections
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof RedirectionApiGetRedirections
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof RedirectionApiGetRedirections
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof RedirectionApiGetRedirections
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof RedirectionApiGetRedirections
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof RedirectionApiGetRedirections
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof RedirectionApiGetRedirections
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof RedirectionApiGetRedirections
     */
    readonly locale?: string
}

/**
 * Request parameters for getRedirectionsId operation in RedirectionApi.
 * @export
 * @interface RedirectionApiGetRedirectionsIdRequest
 */
export interface RedirectionApiGetRedirectionsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RedirectionApiGetRedirectionsId
     */
    readonly id: number
}

/**
 * Request parameters for postRedirections operation in RedirectionApi.
 * @export
 * @interface RedirectionApiPostRedirectionsRequest
 */
export interface RedirectionApiPostRedirectionsRequest {
    /**
     * 
     * @type {RedirectionRequest}
     * @memberof RedirectionApiPostRedirections
     */
    readonly redirectionRequest: RedirectionRequest
}

/**
 * Request parameters for putRedirectionsId operation in RedirectionApi.
 * @export
 * @interface RedirectionApiPutRedirectionsIdRequest
 */
export interface RedirectionApiPutRedirectionsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RedirectionApiPutRedirectionsId
     */
    readonly id: number

    /**
     * 
     * @type {RedirectionRequest}
     * @memberof RedirectionApiPutRedirectionsId
     */
    readonly redirectionRequest: RedirectionRequest
}

/**
 * RedirectionApi - object-oriented interface
 * @export
 * @class RedirectionApi
 * @extends {BaseAPI}
 */
export class RedirectionApi extends BaseAPI implements RedirectionApiInterface {
    /**
     * 
     * @param {RedirectionApiDeleteRedirectionsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApi
     */
    public deleteRedirectionsId(requestParameters: RedirectionApiDeleteRedirectionsIdRequest, options?: RawAxiosRequestConfig) {
        return RedirectionApiFp(this.configuration).deleteRedirectionsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RedirectionApiGetRedirectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApi
     */
    public getRedirections(requestParameters: RedirectionApiGetRedirectionsRequest = {}, options?: RawAxiosRequestConfig) {
        return RedirectionApiFp(this.configuration).getRedirections(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RedirectionApiGetRedirectionsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApi
     */
    public getRedirectionsId(requestParameters: RedirectionApiGetRedirectionsIdRequest, options?: RawAxiosRequestConfig) {
        return RedirectionApiFp(this.configuration).getRedirectionsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RedirectionApiPostRedirectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApi
     */
    public postRedirections(requestParameters: RedirectionApiPostRedirectionsRequest, options?: RawAxiosRequestConfig) {
        return RedirectionApiFp(this.configuration).postRedirections(requestParameters.redirectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RedirectionApiPutRedirectionsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApi
     */
    public putRedirectionsId(requestParameters: RedirectionApiPutRedirectionsIdRequest, options?: RawAxiosRequestConfig) {
        return RedirectionApiFp(this.configuration).putRedirectionsId(requestParameters.id, requestParameters.redirectionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTasksId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTasksId', 'id', id)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTasksId', 'id', id)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TaskRequest} taskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTasks: async (taskRequest: TaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskRequest' is not null or undefined
            assertParamExists('postTasks', 'taskRequest', taskRequest)
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TaskRequest} taskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTasksId: async (id: number, taskRequest: TaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTasksId', 'id', id)
            // verify required parameter 'taskRequest' is not null or undefined
            assertParamExists('putTasksId', 'taskRequest', taskRequest)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTasksId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTasksId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.deleteTasksId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasks(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasks(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.getTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasksId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasksId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.getTasksId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TaskRequest} taskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTasks(taskRequest: TaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTasks(taskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.postTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TaskRequest} taskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTasksId(id: number, taskRequest: TaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTasksId(id, taskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.putTasksId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * 
         * @param {TaskApiDeleteTasksIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTasksId(requestParameters: TaskApiDeleteTasksIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteTasksId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TaskApiGetTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks(requestParameters: TaskApiGetTasksRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TaskListResponse> {
            return localVarFp.getTasks(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TaskApiGetTasksIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksId(requestParameters: TaskApiGetTasksIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse> {
            return localVarFp.getTasksId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TaskApiPostTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTasks(requestParameters: TaskApiPostTasksRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse> {
            return localVarFp.postTasks(requestParameters.taskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TaskApiPutTasksIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTasksId(requestParameters: TaskApiPutTasksIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse> {
            return localVarFp.putTasksId(requestParameters.id, requestParameters.taskRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - interface
 * @export
 * @interface TaskApi
 */
export interface TaskApiInterface {
    /**
     * 
     * @param {TaskApiDeleteTasksIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    deleteTasksId(requestParameters: TaskApiDeleteTasksIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {TaskApiGetTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    getTasks(requestParameters?: TaskApiGetTasksRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskListResponse>;

    /**
     * 
     * @param {TaskApiGetTasksIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    getTasksId(requestParameters: TaskApiGetTasksIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse>;

    /**
     * 
     * @param {TaskApiPostTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    postTasks(requestParameters: TaskApiPostTasksRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse>;

    /**
     * 
     * @param {TaskApiPutTasksIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    putTasksId(requestParameters: TaskApiPutTasksIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse>;

}

/**
 * Request parameters for deleteTasksId operation in TaskApi.
 * @export
 * @interface TaskApiDeleteTasksIdRequest
 */
export interface TaskApiDeleteTasksIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TaskApiDeleteTasksId
     */
    readonly id: number
}

/**
 * Request parameters for getTasks operation in TaskApi.
 * @export
 * @interface TaskApiGetTasksRequest
 */
export interface TaskApiGetTasksRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TaskApiGetTasks
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof TaskApiGetTasks
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TaskApiGetTasks
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TaskApiGetTasks
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TaskApiGetTasks
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TaskApiGetTasks
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TaskApiGetTasks
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TaskApiGetTasks
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof TaskApiGetTasks
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof TaskApiGetTasks
     */
    readonly locale?: string
}

/**
 * Request parameters for getTasksId operation in TaskApi.
 * @export
 * @interface TaskApiGetTasksIdRequest
 */
export interface TaskApiGetTasksIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TaskApiGetTasksId
     */
    readonly id: number
}

/**
 * Request parameters for postTasks operation in TaskApi.
 * @export
 * @interface TaskApiPostTasksRequest
 */
export interface TaskApiPostTasksRequest {
    /**
     * 
     * @type {TaskRequest}
     * @memberof TaskApiPostTasks
     */
    readonly taskRequest: TaskRequest
}

/**
 * Request parameters for putTasksId operation in TaskApi.
 * @export
 * @interface TaskApiPutTasksIdRequest
 */
export interface TaskApiPutTasksIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TaskApiPutTasksId
     */
    readonly id: number

    /**
     * 
     * @type {TaskRequest}
     * @memberof TaskApiPutTasksId
     */
    readonly taskRequest: TaskRequest
}

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI implements TaskApiInterface {
    /**
     * 
     * @param {TaskApiDeleteTasksIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public deleteTasksId(requestParameters: TaskApiDeleteTasksIdRequest, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).deleteTasksId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TaskApiGetTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getTasks(requestParameters: TaskApiGetTasksRequest = {}, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).getTasks(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TaskApiGetTasksIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getTasksId(requestParameters: TaskApiGetTasksIdRequest, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).getTasksId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TaskApiPostTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public postTasks(requestParameters: TaskApiPostTasksRequest, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).postTasks(requestParameters.taskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TaskApiPutTasksIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public putTasksId(requestParameters: TaskApiPutTasksIdRequest, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).putTasksId(requestParameters.id, requestParameters.taskRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestimonialApi - axios parameter creator
 * @export
 */
export const TestimonialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestimonialsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTestimonialsId', 'id', id)
            const localVarPath = `/testimonials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimonials: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/testimonials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimonialsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTestimonialsId', 'id', id)
            const localVarPath = `/testimonials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TestimonialRequest} testimonialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTestimonials: async (testimonialRequest: TestimonialRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testimonialRequest' is not null or undefined
            assertParamExists('postTestimonials', 'testimonialRequest', testimonialRequest)
            const localVarPath = `/testimonials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testimonialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TestimonialRequest} testimonialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTestimonialsId: async (id: number, testimonialRequest: TestimonialRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTestimonialsId', 'id', id)
            // verify required parameter 'testimonialRequest' is not null or undefined
            assertParamExists('putTestimonialsId', 'testimonialRequest', testimonialRequest)
            const localVarPath = `/testimonials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testimonialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestimonialApi - functional programming interface
 * @export
 */
export const TestimonialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestimonialApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTestimonialsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTestimonialsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestimonialApi.deleteTestimonialsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestimonials(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonialListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestimonials(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestimonialApi.getTestimonials']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestimonialsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonialResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestimonialsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestimonialApi.getTestimonialsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TestimonialRequest} testimonialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTestimonials(testimonialRequest: TestimonialRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonialResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTestimonials(testimonialRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestimonialApi.postTestimonials']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TestimonialRequest} testimonialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTestimonialsId(id: number, testimonialRequest: TestimonialRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonialResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTestimonialsId(id, testimonialRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestimonialApi.putTestimonialsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestimonialApi - factory interface
 * @export
 */
export const TestimonialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestimonialApiFp(configuration)
    return {
        /**
         * 
         * @param {TestimonialApiDeleteTestimonialsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestimonialsId(requestParameters: TestimonialApiDeleteTestimonialsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteTestimonialsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonialApiGetTestimonialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimonials(requestParameters: TestimonialApiGetTestimonialsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TestimonialListResponse> {
            return localVarFp.getTestimonials(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonialApiGetTestimonialsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimonialsId(requestParameters: TestimonialApiGetTestimonialsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestimonialResponse> {
            return localVarFp.getTestimonialsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonialApiPostTestimonialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTestimonials(requestParameters: TestimonialApiPostTestimonialsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestimonialResponse> {
            return localVarFp.postTestimonials(requestParameters.testimonialRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonialApiPutTestimonialsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTestimonialsId(requestParameters: TestimonialApiPutTestimonialsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestimonialResponse> {
            return localVarFp.putTestimonialsId(requestParameters.id, requestParameters.testimonialRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestimonialApi - interface
 * @export
 * @interface TestimonialApi
 */
export interface TestimonialApiInterface {
    /**
     * 
     * @param {TestimonialApiDeleteTestimonialsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApiInterface
     */
    deleteTestimonialsId(requestParameters: TestimonialApiDeleteTestimonialsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {TestimonialApiGetTestimonialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApiInterface
     */
    getTestimonials(requestParameters?: TestimonialApiGetTestimonialsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestimonialListResponse>;

    /**
     * 
     * @param {TestimonialApiGetTestimonialsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApiInterface
     */
    getTestimonialsId(requestParameters: TestimonialApiGetTestimonialsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestimonialResponse>;

    /**
     * 
     * @param {TestimonialApiPostTestimonialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApiInterface
     */
    postTestimonials(requestParameters: TestimonialApiPostTestimonialsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestimonialResponse>;

    /**
     * 
     * @param {TestimonialApiPutTestimonialsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApiInterface
     */
    putTestimonialsId(requestParameters: TestimonialApiPutTestimonialsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestimonialResponse>;

}

/**
 * Request parameters for deleteTestimonialsId operation in TestimonialApi.
 * @export
 * @interface TestimonialApiDeleteTestimonialsIdRequest
 */
export interface TestimonialApiDeleteTestimonialsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TestimonialApiDeleteTestimonialsId
     */
    readonly id: number
}

/**
 * Request parameters for getTestimonials operation in TestimonialApi.
 * @export
 * @interface TestimonialApiGetTestimonialsRequest
 */
export interface TestimonialApiGetTestimonialsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly locale?: string
}

/**
 * Request parameters for getTestimonialsId operation in TestimonialApi.
 * @export
 * @interface TestimonialApiGetTestimonialsIdRequest
 */
export interface TestimonialApiGetTestimonialsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TestimonialApiGetTestimonialsId
     */
    readonly id: number
}

/**
 * Request parameters for postTestimonials operation in TestimonialApi.
 * @export
 * @interface TestimonialApiPostTestimonialsRequest
 */
export interface TestimonialApiPostTestimonialsRequest {
    /**
     * 
     * @type {TestimonialRequest}
     * @memberof TestimonialApiPostTestimonials
     */
    readonly testimonialRequest: TestimonialRequest
}

/**
 * Request parameters for putTestimonialsId operation in TestimonialApi.
 * @export
 * @interface TestimonialApiPutTestimonialsIdRequest
 */
export interface TestimonialApiPutTestimonialsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TestimonialApiPutTestimonialsId
     */
    readonly id: number

    /**
     * 
     * @type {TestimonialRequest}
     * @memberof TestimonialApiPutTestimonialsId
     */
    readonly testimonialRequest: TestimonialRequest
}

/**
 * TestimonialApi - object-oriented interface
 * @export
 * @class TestimonialApi
 * @extends {BaseAPI}
 */
export class TestimonialApi extends BaseAPI implements TestimonialApiInterface {
    /**
     * 
     * @param {TestimonialApiDeleteTestimonialsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApi
     */
    public deleteTestimonialsId(requestParameters: TestimonialApiDeleteTestimonialsIdRequest, options?: RawAxiosRequestConfig) {
        return TestimonialApiFp(this.configuration).deleteTestimonialsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonialApiGetTestimonialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApi
     */
    public getTestimonials(requestParameters: TestimonialApiGetTestimonialsRequest = {}, options?: RawAxiosRequestConfig) {
        return TestimonialApiFp(this.configuration).getTestimonials(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonialApiGetTestimonialsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApi
     */
    public getTestimonialsId(requestParameters: TestimonialApiGetTestimonialsIdRequest, options?: RawAxiosRequestConfig) {
        return TestimonialApiFp(this.configuration).getTestimonialsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonialApiPostTestimonialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApi
     */
    public postTestimonials(requestParameters: TestimonialApiPostTestimonialsRequest, options?: RawAxiosRequestConfig) {
        return TestimonialApiFp(this.configuration).postTestimonials(requestParameters.testimonialRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonialApiPutTestimonialsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApi
     */
    public putTestimonialsId(requestParameters: TestimonialApiPutTestimonialsIdRequest, options?: RawAxiosRequestConfig) {
        return TestimonialApiFp(this.configuration).putTestimonialsId(requestParameters.id, requestParameters.testimonialRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UploadFileApi - axios parameter creator
 * @export
 */
export const UploadFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/upload/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadFilesIdDelete', 'id', id)
            const localVarPath = `/upload/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadFilesIdGet', 'id', id)
            const localVarPath = `/upload/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload files
         * @summary 
         * @param {Array<File>} files 
         * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
         * @param {string} [refId] The ID of the entry which the file(s) will be linked to
         * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
         * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPost: async (files: Array<File>, path?: string, refId?: string, ref?: string, field?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'files' is not null or undefined
            assertParamExists('uploadPost', 'files', files)
            const localVarPath = `/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (path !== undefined) { 
                localVarFormParams.append('path', path as any);
            }
    
            if (refId !== undefined) { 
                localVarFormParams.append('refId', refId as any);
            }
    
            if (ref !== undefined) { 
                localVarFormParams.append('ref', ref as any);
            }
    
            if (field !== undefined) { 
                localVarFormParams.append('field', field as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload file information
         * @summary 
         * @param {string} id File id
         * @param {UploadIdIdPostRequestFileInfo} [fileInfo] 
         * @param {File} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadididPost: async (id: string, fileInfo?: UploadIdIdPostRequestFileInfo, files?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadididPost', 'id', id)
            const localVarPath = `/upload?id={id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


            if (fileInfo !== undefined) { 
                localVarFormParams.append('fileInfo', new Blob([JSON.stringify(fileInfo)], { type: "application/json", }));
            }
    
            if (files !== undefined) { 
                localVarFormParams.append('files', files as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadFileApi - functional programming interface
 * @export
 */
export const UploadFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadFileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFilesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadFileApi.uploadFilesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFilesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadFileApi.uploadFilesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFilesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadFileApi.uploadFilesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload files
         * @summary 
         * @param {Array<File>} files 
         * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
         * @param {string} [refId] The ID of the entry which the file(s) will be linked to
         * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
         * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPost(files: Array<File>, path?: string, refId?: string, ref?: string, field?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPost(files, path, refId, ref, field, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadFileApi.uploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload file information
         * @summary 
         * @param {string} id File id
         * @param {UploadIdIdPostRequestFileInfo} [fileInfo] 
         * @param {File} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadididPost(id: string, fileInfo?: UploadIdIdPostRequestFileInfo, files?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadididPost(id, fileInfo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadFileApi.uploadididPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UploadFileApi - factory interface
 * @export
 */
export const UploadFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadFileApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UploadFile>> {
            return localVarFp.uploadFilesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadFileApiUploadFilesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdDelete(requestParameters: UploadFileApiUploadFilesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadFile> {
            return localVarFp.uploadFilesIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadFileApiUploadFilesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdGet(requestParameters: UploadFileApiUploadFilesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadFile> {
            return localVarFp.uploadFilesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload files
         * @summary 
         * @param {UploadFileApiUploadPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPost(requestParameters: UploadFileApiUploadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UploadFile>> {
            return localVarFp.uploadPost(requestParameters.files, requestParameters.path, requestParameters.refId, requestParameters.ref, requestParameters.field, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload file information
         * @summary 
         * @param {UploadFileApiUploadididPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadididPost(requestParameters: UploadFileApiUploadididPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UploadFile>> {
            return localVarFp.uploadididPost(requestParameters.id, requestParameters.fileInfo, requestParameters.files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UploadFileApi - interface
 * @export
 * @interface UploadFileApi
 */
export interface UploadFileApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApiInterface
     */
    uploadFilesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UploadFile>>;

    /**
     * 
     * @param {UploadFileApiUploadFilesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApiInterface
     */
    uploadFilesIdDelete(requestParameters: UploadFileApiUploadFilesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadFile>;

    /**
     * 
     * @param {UploadFileApiUploadFilesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApiInterface
     */
    uploadFilesIdGet(requestParameters: UploadFileApiUploadFilesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadFile>;

    /**
     * Upload files
     * @summary 
     * @param {UploadFileApiUploadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApiInterface
     */
    uploadPost(requestParameters: UploadFileApiUploadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UploadFile>>;

    /**
     * Upload file information
     * @summary 
     * @param {UploadFileApiUploadididPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApiInterface
     */
    uploadididPost(requestParameters: UploadFileApiUploadididPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UploadFile>>;

}

/**
 * Request parameters for uploadFilesIdDelete operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadFilesIdDeleteRequest
 */
export interface UploadFileApiUploadFilesIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadFileApiUploadFilesIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for uploadFilesIdGet operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadFilesIdGetRequest
 */
export interface UploadFileApiUploadFilesIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadFileApiUploadFilesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for uploadPost operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadPostRequest
 */
export interface UploadFileApiUploadPostRequest {
    /**
     * 
     * @type {Array<File>}
     * @memberof UploadFileApiUploadPost
     */
    readonly files: Array<File>

    /**
     * The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly path?: string

    /**
     * The ID of the entry which the file(s) will be linked to
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly refId?: string

    /**
     * The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly ref?: string

    /**
     * The field of the entry which the file(s) will be precisely linked to.
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly field?: string
}

/**
 * Request parameters for uploadididPost operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadididPostRequest
 */
export interface UploadFileApiUploadididPostRequest {
    /**
     * File id
     * @type {string}
     * @memberof UploadFileApiUploadididPost
     */
    readonly id: string

    /**
     * 
     * @type {UploadIdIdPostRequestFileInfo}
     * @memberof UploadFileApiUploadididPost
     */
    readonly fileInfo?: UploadIdIdPostRequestFileInfo

    /**
     * 
     * @type {File}
     * @memberof UploadFileApiUploadididPost
     */
    readonly files?: File
}

/**
 * UploadFileApi - object-oriented interface
 * @export
 * @class UploadFileApi
 * @extends {BaseAPI}
 */
export class UploadFileApi extends BaseAPI implements UploadFileApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadFilesGet(options?: RawAxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadFilesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadFileApiUploadFilesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadFilesIdDelete(requestParameters: UploadFileApiUploadFilesIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadFilesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadFileApiUploadFilesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadFilesIdGet(requestParameters: UploadFileApiUploadFilesIdGetRequest, options?: RawAxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadFilesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload files
     * @summary 
     * @param {UploadFileApiUploadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadPost(requestParameters: UploadFileApiUploadPostRequest, options?: RawAxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadPost(requestParameters.files, requestParameters.path, requestParameters.refId, requestParameters.ref, requestParameters.field, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload file information
     * @summary 
     * @param {UploadFileApiUploadididPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadididPost(requestParameters: UploadFileApiUploadididPostRequest, options?: RawAxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadididPost(requestParameters.id, requestParameters.fileInfo, requestParameters.files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersPermissionsAuthApi - axios parameter creator
 * @export
 */
export const UsersPermissionsAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordPost: async (authChangePasswordPostRequest: AuthChangePasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authChangePasswordPostRequest' is not null or undefined
            assertParamExists('authChangePasswordPost', 'authChangePasswordPostRequest', authChangePasswordPostRequest)
            const localVarPath = `/auth/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authChangePasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm user email
         * @param {string} [confirmation] confirmation token received by email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet: async (confirmation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (confirmation !== undefined) {
                localVarQueryParameter['confirmation'] = confirmation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send rest password email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost: async (authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
            assertParamExists('authForgotPasswordPost', 'authForgotPasswordPostRequest', authForgotPasswordPostRequest)
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {AuthLocalPostRequest} authLocalPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost: async (authLocalPostRequest: AuthLocalPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLocalPostRequest' is not null or undefined
            assertParamExists('authLocalPost', 'authLocalPostRequest', authLocalPostRequest)
            const localVarPath = `/auth/local`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLocalPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost: async (authLocalRegisterPostRequest: AuthLocalRegisterPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLocalRegisterPostRequest' is not null or undefined
            assertParamExists('authLocalRegisterPost', 'authLocalRegisterPostRequest', authLocalRegisterPostRequest)
            const localVarPath = `/auth/local/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLocalRegisterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet: async (provider: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('authProviderCallbackGet', 'provider', provider)
            const localVarPath = `/auth/{provider}/callback`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rest user password
         * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost: async (authResetPasswordPostRequest: AuthResetPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authResetPasswordPostRequest' is not null or undefined
            assertParamExists('authResetPasswordPost', 'authResetPasswordPostRequest', authResetPasswordPostRequest)
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost: async (authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
            assertParamExists('authSendEmailConfirmationPost', 'authForgotPasswordPostRequest', authForgotPasswordPostRequest)
            const localVarPath = `/auth/send-email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectProviderGet: async (provider: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('connectProviderGet', 'provider', provider)
            const localVarPath = `/connect/{provider}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPermissionsAuthApi - functional programming interface
 * @export
 */
export const UsersPermissionsAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersPermissionsAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authChangePasswordPost(authChangePasswordPostRequest: AuthChangePasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authChangePasswordPost(authChangePasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authChangePasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Confirm user email
         * @param {string} [confirmation] confirmation token received by email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authEmailConfirmationGet(confirmation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authEmailConfirmationGet(confirmation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authEmailConfirmationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send rest password email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authForgotPasswordPost(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authForgotPasswordPost(authForgotPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authForgotPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {AuthLocalPostRequest} authLocalPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalPost(authLocalPostRequest: AuthLocalPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalPost(authLocalPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authLocalPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalRegisterPost(authLocalRegisterPostRequest: AuthLocalRegisterPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalRegisterPost(authLocalRegisterPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authLocalRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authProviderCallbackGet(provider: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authProviderCallbackGet(provider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authProviderCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Rest user password
         * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authResetPasswordPost(authResetPasswordPostRequest: AuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authResetPasswordPost(authResetPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSendEmailConfirmationPost(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSendEmailConfirmationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSendEmailConfirmationPost(authForgotPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authSendEmailConfirmationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectProviderGet(provider: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectProviderGet(provider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.connectProviderGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersPermissionsAuthApi - factory interface
 * @export
 */
export const UsersPermissionsAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersPermissionsAuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordPost(requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm user email
         * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet(requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.authEmailConfirmationGet(requestParameters.confirmation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send rest password email
         * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost(requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost(requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authLocalPost(requestParameters.authLocalPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost(requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet(requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authProviderCallbackGet(requestParameters.provider, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rest user password
         * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost(requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost(requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthSendEmailConfirmationPost200Response> {
            return localVarFp.authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {UsersPermissionsAuthApiConnectProviderGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectProviderGet(requestParameters: UsersPermissionsAuthApiConnectProviderGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.connectProviderGet(requestParameters.provider, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersPermissionsAuthApi - interface
 * @export
 * @interface UsersPermissionsAuthApi
 */
export interface UsersPermissionsAuthApiInterface {
    /**
     * 
     * @summary Update user\'s own password
     * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApiInterface
     */
    authChangePasswordPost(requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration>;

    /**
     * 
     * @summary Confirm user email
     * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApiInterface
     */
    authEmailConfirmationGet(requestParameters?: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Error>;

    /**
     * 
     * @summary Send rest password email
     * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApiInterface
     */
    authForgotPasswordPost(requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response>;

    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApiInterface
     */
    authLocalPost(requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration>;

    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApiInterface
     */
    authLocalRegisterPost(requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration>;

    /**
     * 
     * @summary Default Callback from provider auth
     * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApiInterface
     */
    authProviderCallbackGet(requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration>;

    /**
     * 
     * @summary Rest user password
     * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApiInterface
     */
    authResetPasswordPost(requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration>;

    /**
     * 
     * @summary Send confirmation email
     * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApiInterface
     */
    authSendEmailConfirmationPost(requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthSendEmailConfirmationPost200Response>;

    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {UsersPermissionsAuthApiConnectProviderGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApiInterface
     */
    connectProviderGet(requestParameters: UsersPermissionsAuthApiConnectProviderGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Error>;

}

/**
 * Request parameters for authChangePasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthChangePasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthChangePasswordPostRequest {
    /**
     * 
     * @type {AuthChangePasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthChangePasswordPost
     */
    readonly authChangePasswordPostRequest: AuthChangePasswordPostRequest
}

/**
 * Request parameters for authEmailConfirmationGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest
 */
export interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest {
    /**
     * confirmation token received by email
     * @type {string}
     * @memberof UsersPermissionsAuthApiAuthEmailConfirmationGet
     */
    readonly confirmation?: string
}

/**
 * Request parameters for authForgotPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest {
    /**
     * 
     * @type {AuthForgotPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthForgotPasswordPost
     */
    readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest
}

/**
 * Request parameters for authLocalPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalPostRequest {
    /**
     * 
     * @type {AuthLocalPostRequest}
     * @memberof UsersPermissionsAuthApiAuthLocalPost
     */
    readonly authLocalPostRequest: AuthLocalPostRequest
}

/**
 * Request parameters for authLocalRegisterPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest {
    /**
     * 
     * @type {AuthLocalRegisterPostRequest}
     * @memberof UsersPermissionsAuthApiAuthLocalRegisterPost
     */
    readonly authLocalRegisterPostRequest: AuthLocalRegisterPostRequest
}

/**
 * Request parameters for authProviderCallbackGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest
 */
export interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof UsersPermissionsAuthApiAuthProviderCallbackGet
     */
    readonly provider: string
}

/**
 * Request parameters for authResetPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthResetPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthResetPasswordPostRequest {
    /**
     * 
     * @type {AuthResetPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthResetPasswordPost
     */
    readonly authResetPasswordPostRequest: AuthResetPasswordPostRequest
}

/**
 * Request parameters for authSendEmailConfirmationPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest
 */
export interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest {
    /**
     * 
     * @type {AuthForgotPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthSendEmailConfirmationPost
     */
    readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest
}

/**
 * Request parameters for connectProviderGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiConnectProviderGetRequest
 */
export interface UsersPermissionsAuthApiConnectProviderGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof UsersPermissionsAuthApiConnectProviderGet
     */
    readonly provider: string
}

/**
 * UsersPermissionsAuthApi - object-oriented interface
 * @export
 * @class UsersPermissionsAuthApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsAuthApi extends BaseAPI implements UsersPermissionsAuthApiInterface {
    /**
     * 
     * @summary Update user\'s own password
     * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authChangePasswordPost(requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm user email
     * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authEmailConfirmationGet(requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {}, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authEmailConfirmationGet(requestParameters.confirmation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send rest password email
     * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authForgotPasswordPost(requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authLocalPost(requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authLocalPost(requestParameters.authLocalPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authLocalRegisterPost(requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Default Callback from provider auth
     * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authProviderCallbackGet(requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authProviderCallbackGet(requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rest user password
     * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authResetPasswordPost(requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send confirmation email
     * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authSendEmailConfirmationPost(requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {UsersPermissionsAuthApiConnectProviderGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public connectProviderGet(requestParameters: UsersPermissionsAuthApiConnectProviderGetRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).connectProviderGet(requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersPermissionsUsersRolesApi - axios parameter creator
 * @export
 */
export const UsersPermissionsUsersRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCountGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdDelete', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id user Id
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (id: string, usersPostRequest: UsersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPut', 'id', id)
            // verify required parameter 'usersPostRequest' is not null or undefined
            assertParamExists('usersIdPut', 'usersPostRequest', usersPostRequest)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsPermissionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users-permissions/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users-permissions/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a role
         * @param {string} id role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersPermissionsRolesIdGet', 'id', id)
            const localVarPath = `/users-permissions/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesPost: async (usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
            assertParamExists('usersPermissionsRolesPost', 'usersPermissionsRolesPostRequest', usersPermissionsRolesPostRequest)
            const localVarPath = `/users-permissions/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPermissionsRolesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} role role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRoleDelete: async (role: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('usersPermissionsRolesRoleDelete', 'role', role)
            const localVarPath = `/users-permissions/roles/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a role
         * @param {string} role role Id
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRolePut: async (role: string, usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('usersPermissionsRolesRolePut', 'role', role)
            // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
            assertParamExists('usersPermissionsRolesRolePut', 'usersPermissionsRolesPostRequest', usersPermissionsRolesPostRequest)
            const localVarPath = `/users-permissions/roles/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPermissionsRolesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (usersPostRequest: UsersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersPostRequest' is not null or undefined
            assertParamExists('usersPost', 'usersPostRequest', usersPostRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPermissionsUsersRolesApi - functional programming interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersPermissionsUsersRolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCountGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCountGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsersPermissionsUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id user Id
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(id: string, usersPostRequest: UsersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(id, usersPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsPermissionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsPermissionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsPermissionsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsPermissionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a role
         * @param {string} id role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesPost(usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesPost(usersPermissionsRolesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} role role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesRoleDelete(role: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesRoleDelete(role, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesRoleDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a role
         * @param {string} role role Id
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesRolePut(role: string, usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesRolePut(role, usersPermissionsRolesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesRolePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(usersPostRequest: UsersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(usersPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersPermissionsUsersRolesApi - factory interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersPermissionsUsersRolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCountGet(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.usersCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UsersPermissionsUser>> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {UsersPermissionsUsersRolesApiUsersIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(requestParameters: UsersPermissionsUsersRolesApiUsersIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser> {
            return localVarFp.usersIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user
         * @param {UsersPermissionsUsersRolesApiUsersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser> {
            return localVarFp.usersIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user
         * @param {UsersPermissionsUsersRolesApiUsersIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(requestParameters: UsersPermissionsUsersRolesApiUsersIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPost201Response> {
            return localVarFp.usersIdPut(requestParameters.id, requestParameters.usersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser> {
            return localVarFp.usersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsPermissionsGet(options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsPermissionsGet200Response> {
            return localVarFp.usersPermissionsPermissionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesGet(options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsRolesGet200Response> {
            return localVarFp.usersPermissionsRolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsRolesIdGet200Response> {
            return localVarFp.usersPermissionsRolesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesPost(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.usersPermissionsRolesPost(requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRoleDelete(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.usersPermissionsRolesRoleDelete(requestParameters.role, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRolePut(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.usersPermissionsRolesRolePut(requestParameters.role, requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPermissionsUsersRolesApiUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(requestParameters: UsersPermissionsUsersRolesApiUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPost201Response> {
            return localVarFp.usersPost(requestParameters.usersPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersPermissionsUsersRolesApi - interface
 * @export
 * @interface UsersPermissionsUsersRolesApi
 */
export interface UsersPermissionsUsersRolesApiInterface {
    /**
     * 
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersCountGet(options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UsersPermissionsUser>>;

    /**
     * 
     * @summary Delete a user
     * @param {UsersPermissionsUsersRolesApiUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersIdDelete(requestParameters: UsersPermissionsUsersRolesApiUsersIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser>;

    /**
     * 
     * @summary Get a user
     * @param {UsersPermissionsUsersRolesApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser>;

    /**
     * 
     * @summary Update a user
     * @param {UsersPermissionsUsersRolesApiUsersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersIdPut(requestParameters: UsersPermissionsUsersRolesApiUsersIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPost201Response>;

    /**
     * 
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser>;

    /**
     * 
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersPermissionsPermissionsGet(options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsPermissionsGet200Response>;

    /**
     * 
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersPermissionsRolesGet(options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsRolesGet200Response>;

    /**
     * 
     * @summary Get a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersPermissionsRolesIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsRolesIdGet200Response>;

    /**
     * 
     * @summary Create a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersPermissionsRolesPost(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response>;

    /**
     * 
     * @summary Delete a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersPermissionsRolesRoleDelete(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response>;

    /**
     * 
     * @summary Update a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersPermissionsRolesRolePut(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response>;

    /**
     * 
     * @summary Create a user
     * @param {UsersPermissionsUsersRolesApiUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApiInterface
     */
    usersPost(requestParameters: UsersPermissionsUsersRolesApiUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPost201Response>;

}

/**
 * Request parameters for usersIdDelete operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdDeleteRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdDeleteRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for usersIdGet operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdGetRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdGetRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdGet
     */
    readonly id: string
}

/**
 * Request parameters for usersIdPut operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdPutRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdPutRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdPut
     */
    readonly id: string

    /**
     * 
     * @type {UsersPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersIdPut
     */
    readonly usersPostRequest: UsersPostRequest
}

/**
 * Request parameters for usersPermissionsRolesIdGet operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for usersPermissionsRolesPost operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest {
    /**
     * 
     * @type {UsersPermissionsRolesPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesPost
     */
    readonly usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest
}

/**
 * Request parameters for usersPermissionsRolesRoleDelete operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDelete
     */
    readonly role: string
}

/**
 * Request parameters for usersPermissionsRolesRolePut operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePut
     */
    readonly role: string

    /**
     * 
     * @type {UsersPermissionsRolesPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePut
     */
    readonly usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest
}

/**
 * Request parameters for usersPost operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPostRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPostRequest {
    /**
     * 
     * @type {UsersPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPost
     */
    readonly usersPostRequest: UsersPostRequest
}

/**
 * UsersPermissionsUsersRolesApi - object-oriented interface
 * @export
 * @class UsersPermissionsUsersRolesApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsUsersRolesApi extends BaseAPI implements UsersPermissionsUsersRolesApiInterface {
    /**
     * 
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersCountGet(options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersGet(options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {UsersPermissionsUsersRolesApiUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdDelete(requestParameters: UsersPermissionsUsersRolesApiUsersIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user
     * @param {UsersPermissionsUsersRolesApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersIdGetRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user
     * @param {UsersPermissionsUsersRolesApiUsersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdPut(requestParameters: UsersPermissionsUsersRolesApiUsersIdPutRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdPut(requestParameters.id, requestParameters.usersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersMeGet(options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsPermissionsGet(options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsPermissionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesGet(options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesPost(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesPost(requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesRoleDelete(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesRoleDelete(requestParameters.role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesRolePut(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesRolePut(requestParameters.role, requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a user
     * @param {UsersPermissionsUsersRolesApiUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPost(requestParameters: UsersPermissionsUsersRolesApiUsersPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPost(requestParameters.usersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



