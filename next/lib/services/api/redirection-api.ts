/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RedirectionListResponse } from '../models';
// @ts-ignore
import type { RedirectionRequest } from '../models';
// @ts-ignore
import type { RedirectionResponse } from '../models';
/**
 * RedirectionApi - axios parameter creator
 * @export
 */
export const RedirectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRedirectionsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRedirectionsId', 'id', id)
            const localVarPath = `/redirections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirections: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/redirections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectionsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRedirectionsId', 'id', id)
            const localVarPath = `/redirections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RedirectionRequest} redirectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRedirections: async (redirectionRequest: RedirectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'redirectionRequest' is not null or undefined
            assertParamExists('postRedirections', 'redirectionRequest', redirectionRequest)
            const localVarPath = `/redirections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(redirectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RedirectionRequest} redirectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRedirectionsId: async (id: number, redirectionRequest: RedirectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putRedirectionsId', 'id', id)
            // verify required parameter 'redirectionRequest' is not null or undefined
            assertParamExists('putRedirectionsId', 'redirectionRequest', redirectionRequest)
            const localVarPath = `/redirections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(redirectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RedirectionApi - functional programming interface
 * @export
 */
export const RedirectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RedirectionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRedirectionsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRedirectionsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedirectionApi.deleteRedirectionsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedirections(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedirections(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedirectionApi.getRedirections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedirectionsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedirectionsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedirectionApi.getRedirectionsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RedirectionRequest} redirectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRedirections(redirectionRequest: RedirectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRedirections(redirectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedirectionApi.postRedirections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {RedirectionRequest} redirectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRedirectionsId(id: number, redirectionRequest: RedirectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRedirectionsId(id, redirectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedirectionApi.putRedirectionsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RedirectionApi - factory interface
 * @export
 */
export const RedirectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RedirectionApiFp(configuration)
    return {
        /**
         * 
         * @param {RedirectionApiDeleteRedirectionsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRedirectionsId(requestParameters: RedirectionApiDeleteRedirectionsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteRedirectionsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RedirectionApiGetRedirectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirections(requestParameters: RedirectionApiGetRedirectionsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionListResponse> {
            return localVarFp.getRedirections(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RedirectionApiGetRedirectionsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectionsId(requestParameters: RedirectionApiGetRedirectionsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionResponse> {
            return localVarFp.getRedirectionsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RedirectionApiPostRedirectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRedirections(requestParameters: RedirectionApiPostRedirectionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionResponse> {
            return localVarFp.postRedirections(requestParameters.redirectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RedirectionApiPutRedirectionsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRedirectionsId(requestParameters: RedirectionApiPutRedirectionsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<RedirectionResponse> {
            return localVarFp.putRedirectionsId(requestParameters.id, requestParameters.redirectionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteRedirectionsId operation in RedirectionApi.
 * @export
 * @interface RedirectionApiDeleteRedirectionsIdRequest
 */
export interface RedirectionApiDeleteRedirectionsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RedirectionApiDeleteRedirectionsId
     */
    readonly id: number
}

/**
 * Request parameters for getRedirections operation in RedirectionApi.
 * @export
 * @interface RedirectionApiGetRedirectionsRequest
 */
export interface RedirectionApiGetRedirectionsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof RedirectionApiGetRedirections
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof RedirectionApiGetRedirections
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof RedirectionApiGetRedirections
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof RedirectionApiGetRedirections
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof RedirectionApiGetRedirections
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof RedirectionApiGetRedirections
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof RedirectionApiGetRedirections
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof RedirectionApiGetRedirections
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof RedirectionApiGetRedirections
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof RedirectionApiGetRedirections
     */
    readonly locale?: string
}

/**
 * Request parameters for getRedirectionsId operation in RedirectionApi.
 * @export
 * @interface RedirectionApiGetRedirectionsIdRequest
 */
export interface RedirectionApiGetRedirectionsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RedirectionApiGetRedirectionsId
     */
    readonly id: number
}

/**
 * Request parameters for postRedirections operation in RedirectionApi.
 * @export
 * @interface RedirectionApiPostRedirectionsRequest
 */
export interface RedirectionApiPostRedirectionsRequest {
    /**
     * 
     * @type {RedirectionRequest}
     * @memberof RedirectionApiPostRedirections
     */
    readonly redirectionRequest: RedirectionRequest
}

/**
 * Request parameters for putRedirectionsId operation in RedirectionApi.
 * @export
 * @interface RedirectionApiPutRedirectionsIdRequest
 */
export interface RedirectionApiPutRedirectionsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RedirectionApiPutRedirectionsId
     */
    readonly id: number

    /**
     * 
     * @type {RedirectionRequest}
     * @memberof RedirectionApiPutRedirectionsId
     */
    readonly redirectionRequest: RedirectionRequest
}

/**
 * RedirectionApi - object-oriented interface
 * @export
 * @class RedirectionApi
 * @extends {BaseAPI}
 */
export class RedirectionApi extends BaseAPI {
    /**
     * 
     * @param {RedirectionApiDeleteRedirectionsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApi
     */
    public deleteRedirectionsId(requestParameters: RedirectionApiDeleteRedirectionsIdRequest, options?: RawAxiosRequestConfig) {
        return RedirectionApiFp(this.configuration).deleteRedirectionsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RedirectionApiGetRedirectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApi
     */
    public getRedirections(requestParameters: RedirectionApiGetRedirectionsRequest = {}, options?: RawAxiosRequestConfig) {
        return RedirectionApiFp(this.configuration).getRedirections(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RedirectionApiGetRedirectionsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApi
     */
    public getRedirectionsId(requestParameters: RedirectionApiGetRedirectionsIdRequest, options?: RawAxiosRequestConfig) {
        return RedirectionApiFp(this.configuration).getRedirectionsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RedirectionApiPostRedirectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApi
     */
    public postRedirections(requestParameters: RedirectionApiPostRedirectionsRequest, options?: RawAxiosRequestConfig) {
        return RedirectionApiFp(this.configuration).postRedirections(requestParameters.redirectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RedirectionApiPutRedirectionsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectionApi
     */
    public putRedirectionsId(requestParameters: RedirectionApiPutRedirectionsIdRequest, options?: RawAxiosRequestConfig) {
        return RedirectionApiFp(this.configuration).putRedirectionsId(requestParameters.id, requestParameters.redirectionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

