/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DealListResponse } from '../models';
// @ts-ignore
import type { DealRequest } from '../models';
// @ts-ignore
import type { DealResponse } from '../models';
/**
 * DealApi - axios parameter creator
 * @export
 */
export const DealApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDealsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDealsId', 'id', id)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeals: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealsId', 'id', id)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DealRequest} dealRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDeals: async (dealRequest: DealRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dealRequest' is not null or undefined
            assertParamExists('postDeals', 'dealRequest', dealRequest)
            const localVarPath = `/deals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {DealRequest} dealRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDealsId: async (id: number, dealRequest: DealRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putDealsId', 'id', id)
            // verify required parameter 'dealRequest' is not null or undefined
            assertParamExists('putDealsId', 'dealRequest', dealRequest)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DealApi - functional programming interface
 * @export
 */
export const DealApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DealApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDealsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDealsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DealApi.deleteDealsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeals(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DealListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeals(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DealApi.getDeals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDealsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DealApi.getDealsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DealRequest} dealRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDeals(dealRequest: DealRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDeals(dealRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DealApi.postDeals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {DealRequest} dealRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDealsId(id: number, dealRequest: DealRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putDealsId(id, dealRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DealApi.putDealsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DealApi - factory interface
 * @export
 */
export const DealApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DealApiFp(configuration)
    return {
        /**
         * 
         * @param {DealApiDeleteDealsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDealsId(requestParameters: DealApiDeleteDealsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteDealsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DealApiGetDealsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeals(requestParameters: DealApiGetDealsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DealListResponse> {
            return localVarFp.getDeals(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DealApiGetDealsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealsId(requestParameters: DealApiGetDealsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<DealResponse> {
            return localVarFp.getDealsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DealApiPostDealsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDeals(requestParameters: DealApiPostDealsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DealResponse> {
            return localVarFp.postDeals(requestParameters.dealRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DealApiPutDealsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDealsId(requestParameters: DealApiPutDealsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<DealResponse> {
            return localVarFp.putDealsId(requestParameters.id, requestParameters.dealRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteDealsId operation in DealApi.
 * @export
 * @interface DealApiDeleteDealsIdRequest
 */
export interface DealApiDeleteDealsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DealApiDeleteDealsId
     */
    readonly id: number
}

/**
 * Request parameters for getDeals operation in DealApi.
 * @export
 * @interface DealApiGetDealsRequest
 */
export interface DealApiGetDealsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof DealApiGetDeals
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof DealApiGetDeals
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof DealApiGetDeals
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof DealApiGetDeals
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof DealApiGetDeals
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof DealApiGetDeals
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof DealApiGetDeals
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof DealApiGetDeals
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof DealApiGetDeals
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof DealApiGetDeals
     */
    readonly locale?: string
}

/**
 * Request parameters for getDealsId operation in DealApi.
 * @export
 * @interface DealApiGetDealsIdRequest
 */
export interface DealApiGetDealsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DealApiGetDealsId
     */
    readonly id: number
}

/**
 * Request parameters for postDeals operation in DealApi.
 * @export
 * @interface DealApiPostDealsRequest
 */
export interface DealApiPostDealsRequest {
    /**
     * 
     * @type {DealRequest}
     * @memberof DealApiPostDeals
     */
    readonly dealRequest: DealRequest
}

/**
 * Request parameters for putDealsId operation in DealApi.
 * @export
 * @interface DealApiPutDealsIdRequest
 */
export interface DealApiPutDealsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DealApiPutDealsId
     */
    readonly id: number

    /**
     * 
     * @type {DealRequest}
     * @memberof DealApiPutDealsId
     */
    readonly dealRequest: DealRequest
}

/**
 * DealApi - object-oriented interface
 * @export
 * @class DealApi
 * @extends {BaseAPI}
 */
export class DealApi extends BaseAPI {
    /**
     * 
     * @param {DealApiDeleteDealsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApi
     */
    public deleteDealsId(requestParameters: DealApiDeleteDealsIdRequest, options?: RawAxiosRequestConfig) {
        return DealApiFp(this.configuration).deleteDealsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DealApiGetDealsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApi
     */
    public getDeals(requestParameters: DealApiGetDealsRequest = {}, options?: RawAxiosRequestConfig) {
        return DealApiFp(this.configuration).getDeals(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DealApiGetDealsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApi
     */
    public getDealsId(requestParameters: DealApiGetDealsIdRequest, options?: RawAxiosRequestConfig) {
        return DealApiFp(this.configuration).getDealsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DealApiPostDealsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApi
     */
    public postDeals(requestParameters: DealApiPostDealsRequest, options?: RawAxiosRequestConfig) {
        return DealApiFp(this.configuration).postDeals(requestParameters.dealRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DealApiPutDealsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealApi
     */
    public putDealsId(requestParameters: DealApiPutDealsIdRequest, options?: RawAxiosRequestConfig) {
        return DealApiFp(this.configuration).putDealsId(requestParameters.id, requestParameters.dealRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

