/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AuthChangePasswordPostRequest } from '../models';
// @ts-ignore
import type { AuthForgotPasswordPost200Response } from '../models';
// @ts-ignore
import type { AuthForgotPasswordPostRequest } from '../models';
// @ts-ignore
import type { AuthLocalPostRequest } from '../models';
// @ts-ignore
import type { AuthLocalRegisterPostRequest } from '../models';
// @ts-ignore
import type { AuthResetPasswordPostRequest } from '../models';
// @ts-ignore
import type { AuthSendEmailConfirmationPost200Response } from '../models';
// @ts-ignore
import type { UsersPermissionsUserRegistration } from '../models';
/**
 * UsersPermissionsAuthApi - axios parameter creator
 * @export
 */
export const UsersPermissionsAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordPost: async (authChangePasswordPostRequest: AuthChangePasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authChangePasswordPostRequest' is not null or undefined
            assertParamExists('authChangePasswordPost', 'authChangePasswordPostRequest', authChangePasswordPostRequest)
            const localVarPath = `/auth/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authChangePasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm user email
         * @param {string} [confirmation] confirmation token received by email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet: async (confirmation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (confirmation !== undefined) {
                localVarQueryParameter['confirmation'] = confirmation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send rest password email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost: async (authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
            assertParamExists('authForgotPasswordPost', 'authForgotPasswordPostRequest', authForgotPasswordPostRequest)
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {AuthLocalPostRequest} authLocalPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost: async (authLocalPostRequest: AuthLocalPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLocalPostRequest' is not null or undefined
            assertParamExists('authLocalPost', 'authLocalPostRequest', authLocalPostRequest)
            const localVarPath = `/auth/local`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLocalPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost: async (authLocalRegisterPostRequest: AuthLocalRegisterPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLocalRegisterPostRequest' is not null or undefined
            assertParamExists('authLocalRegisterPost', 'authLocalRegisterPostRequest', authLocalRegisterPostRequest)
            const localVarPath = `/auth/local/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLocalRegisterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet: async (provider: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('authProviderCallbackGet', 'provider', provider)
            const localVarPath = `/auth/{provider}/callback`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rest user password
         * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost: async (authResetPasswordPostRequest: AuthResetPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authResetPasswordPostRequest' is not null or undefined
            assertParamExists('authResetPasswordPost', 'authResetPasswordPostRequest', authResetPasswordPostRequest)
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost: async (authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
            assertParamExists('authSendEmailConfirmationPost', 'authForgotPasswordPostRequest', authForgotPasswordPostRequest)
            const localVarPath = `/auth/send-email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectProviderGet: async (provider: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('connectProviderGet', 'provider', provider)
            const localVarPath = `/connect/{provider}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPermissionsAuthApi - functional programming interface
 * @export
 */
export const UsersPermissionsAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersPermissionsAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authChangePasswordPost(authChangePasswordPostRequest: AuthChangePasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authChangePasswordPost(authChangePasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authChangePasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Confirm user email
         * @param {string} [confirmation] confirmation token received by email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authEmailConfirmationGet(confirmation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authEmailConfirmationGet(confirmation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authEmailConfirmationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send rest password email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authForgotPasswordPost(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authForgotPasswordPost(authForgotPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authForgotPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {AuthLocalPostRequest} authLocalPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalPost(authLocalPostRequest: AuthLocalPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalPost(authLocalPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authLocalPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalRegisterPost(authLocalRegisterPostRequest: AuthLocalRegisterPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalRegisterPost(authLocalRegisterPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authLocalRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authProviderCallbackGet(provider: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authProviderCallbackGet(provider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authProviderCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Rest user password
         * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authResetPasswordPost(authResetPasswordPostRequest: AuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authResetPasswordPost(authResetPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSendEmailConfirmationPost(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSendEmailConfirmationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSendEmailConfirmationPost(authForgotPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authSendEmailConfirmationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectProviderGet(provider: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectProviderGet(provider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.connectProviderGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersPermissionsAuthApi - factory interface
 * @export
 */
export const UsersPermissionsAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersPermissionsAuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordPost(requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm user email
         * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet(requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.authEmailConfirmationGet(requestParameters.confirmation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send rest password email
         * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost(requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost(requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authLocalPost(requestParameters.authLocalPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost(requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet(requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authProviderCallbackGet(requestParameters.provider, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rest user password
         * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost(requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost(requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthSendEmailConfirmationPost200Response> {
            return localVarFp.authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {UsersPermissionsAuthApiConnectProviderGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectProviderGet(requestParameters: UsersPermissionsAuthApiConnectProviderGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.connectProviderGet(requestParameters.provider, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authChangePasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthChangePasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthChangePasswordPostRequest {
    /**
     * 
     * @type {AuthChangePasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthChangePasswordPost
     */
    readonly authChangePasswordPostRequest: AuthChangePasswordPostRequest
}

/**
 * Request parameters for authEmailConfirmationGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest
 */
export interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest {
    /**
     * confirmation token received by email
     * @type {string}
     * @memberof UsersPermissionsAuthApiAuthEmailConfirmationGet
     */
    readonly confirmation?: string
}

/**
 * Request parameters for authForgotPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest {
    /**
     * 
     * @type {AuthForgotPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthForgotPasswordPost
     */
    readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest
}

/**
 * Request parameters for authLocalPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalPostRequest {
    /**
     * 
     * @type {AuthLocalPostRequest}
     * @memberof UsersPermissionsAuthApiAuthLocalPost
     */
    readonly authLocalPostRequest: AuthLocalPostRequest
}

/**
 * Request parameters for authLocalRegisterPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest {
    /**
     * 
     * @type {AuthLocalRegisterPostRequest}
     * @memberof UsersPermissionsAuthApiAuthLocalRegisterPost
     */
    readonly authLocalRegisterPostRequest: AuthLocalRegisterPostRequest
}

/**
 * Request parameters for authProviderCallbackGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest
 */
export interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof UsersPermissionsAuthApiAuthProviderCallbackGet
     */
    readonly provider: string
}

/**
 * Request parameters for authResetPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthResetPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthResetPasswordPostRequest {
    /**
     * 
     * @type {AuthResetPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthResetPasswordPost
     */
    readonly authResetPasswordPostRequest: AuthResetPasswordPostRequest
}

/**
 * Request parameters for authSendEmailConfirmationPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest
 */
export interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest {
    /**
     * 
     * @type {AuthForgotPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthSendEmailConfirmationPost
     */
    readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest
}

/**
 * Request parameters for connectProviderGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiConnectProviderGetRequest
 */
export interface UsersPermissionsAuthApiConnectProviderGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof UsersPermissionsAuthApiConnectProviderGet
     */
    readonly provider: string
}

/**
 * UsersPermissionsAuthApi - object-oriented interface
 * @export
 * @class UsersPermissionsAuthApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsAuthApi extends BaseAPI {
    /**
     * 
     * @summary Update user\'s own password
     * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authChangePasswordPost(requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm user email
     * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authEmailConfirmationGet(requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {}, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authEmailConfirmationGet(requestParameters.confirmation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send rest password email
     * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authForgotPasswordPost(requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authLocalPost(requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authLocalPost(requestParameters.authLocalPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authLocalRegisterPost(requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Default Callback from provider auth
     * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authProviderCallbackGet(requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authProviderCallbackGet(requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rest user password
     * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authResetPasswordPost(requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send confirmation email
     * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authSendEmailConfirmationPost(requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {UsersPermissionsAuthApiConnectProviderGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public connectProviderGet(requestParameters: UsersPermissionsAuthApiConnectProviderGetRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).connectProviderGet(requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }
}

