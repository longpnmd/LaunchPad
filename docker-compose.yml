services:
  nextjs:
    container_name: launchpad-nextjs
    restart: always
    env_file:
      - .env
    build:
      context: ./next
      dockerfile: Dockerfile
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
    ports:
      - "${NEXT_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=${NEXT_PORT}
      - WEBSITE_URL=${NEXT_WEBSITE_URL}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - PREVIEW_SECRET=${NEXT_PREVIEW_SECRET}
      - IMAGE_HOSTNAME=${NEXT_IMAGE_HOSTNAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextjs.rule=Host(`beta.${BASE_DOMAIN}`)"
      - "traefik.http.routers.nextjs.entrypoints=websecure"
      - "traefik.http.routers.nextjs.tls.certresolver=myresolver"
      - "traefik.http.services.nextjs.loadbalancer.server.port=${NEXT_PORT}"
    depends_on:
      - strapi
    networks:
      - web

  strapi:
    container_name: launchpad-strapi
    restart: unless-stopped
    env_file:
      - .env
    build:
      context: ./strapi
      dockerfile: Dockerfile
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
    ports:
      - "${STRAPI_PORT:-1337}:1337"
    environment:
      - NODE_ENV=production
      - HOST=${STRAPI_HOST}
      - PORT=${STRAPI_PORT}
      - APP_KEYS=${STRAPI_APP_KEYS}
      - API_TOKEN_SALT=${STRAPI_API_TOKEN_SALT}
      - TRANSFER_TOKEN_SALT=${STRAPI_TRANSFER_TOKEN_SALT}
      - ADMIN_JWT_SECRET=${STRAPI_ADMIN_JWT_SECRET}
      - JWT_SECRET=${STRAPI_JWT_SECRET}
      - STRAPI_ADMIN_CLIENT_URL=${STRAPI_ADMIN_CLIENT_URL}
      - STRAPI_ADMIN_CLIENT_PREVIEW_SECRET=${STRAPI_ADMIN_CLIENT_PREVIEW_SECRET}
      - CLIENT_URL=${STRAPI_CLIENT_URL}
      - PREVIEW_SECRET=${STRAPI_PREVIEW_SECRET}
      - STRAPI_ADMIN_BACKEND_URL=${STRAPI_ADMIN_BACKEND_URL}
      - STRAPI_TELEMETRY_DISABLED=${STRAPI_TELEMETRY_DISABLED}
      - ADMIN_PATH=${STRAPI_ADMIN_PATH}
      - DATABASE_CLIENT=${DATABASE_CLIENT}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.strapi.rule=Host(`beta-admin.${BASE_DOMAIN}`)"
      - "traefik.http.routers.strapi.entrypoints=websecure"
      - "traefik.http.routers.strapi.tls.certresolver=myresolver"
      - "traefik.http.services.strapi.loadbalancer.server.port=${STRAPI_PORT}"
    volumes:
      - ~/apps/strapi/public/uploads:/opt/app/public/uploads
    networks:
      - web

  traefik:
    container_name: traefik
    image: traefik:v2.10
    restart: always
    env_file:
      - .env
    environment:
      - TRAEFIK_CERTIFICATESRESOLVERS_LE_ACME_STORAGE=/letsencrypt/acme.json
      - BASE_DOMAIN=${BASE_DOMAIN:-localhost.dev}
    command:
      - --api.insecure=true
      - --api.dashboard=true
      - --api.debug=true
      - --entryPoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --providers.docker=true
      - --providers.docker.watch=true
      - --providers.docker.network=web
      - --providers.file.watch=true
      - --providers.file.directory=/config/
      - --certificatesresolvers.myresolver.acme.email=${CER_ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      # TODO : Use Staging Environment for Testing
      # - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ~/apps/config/traefik.yaml:/config/traefik.yaml
      - ~/apps/config/.htpasswd:/config/.htpasswd
      - ~/apps/letsencrypt:/letsencrypt
    networks:
      - web

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-postgres}
      - POSTGRES_USER=${DATABASE_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=${N8N_DB_NAME:-n8n}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ~/apps/postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - web

  n8n:
    container_name: n8n
    image: n8nio/n8n:latest
    restart: unless-stopped
    env_file:
      - .env
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      - N8N_HOST=${N8N_HOST:-n8n.${BASE_DOMAIN}}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
      - NODE_ENV=production
      - WEBHOOK_URL=https://${N8N_HOST:-n8n.${BASE_DOMAIN}}/
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=${DATABASE_HOST:-postgres}
      - DB_POSTGRESDB_PORT=${DATABASE_PORT:-5432}
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME:-n8n}
      - DB_POSTGRESDB_USER=${DATABASE_USERNAME:-postgres}
      - DB_POSTGRESDB_PASSWORD=${DATABASE_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_EMAIL_MODE=smtp
      - N8N_SMTP_HOST=${N8N_SMTP_HOST}
      - N8N_SMTP_PORT=${N8N_SMTP_PORT:-587}
      - N8N_SMTP_USER=${N8N_SMTP_USER}
      - N8N_SMTP_PASS=${N8N_SMTP_PASS}
      - N8N_SMTP_SENDER=${N8N_SMTP_SENDER}
      - N8N_SMTP_SSL=${N8N_SMTP_SSL}
      - N8N_ALLOW_CUSTOM_NODES=true
      - N8N_ALLOW_COMMUNITY_NODES=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_AUTH_EXCLUDE_ENDPOINTS=
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n-beta.${BASE_DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=myresolver"
      - "traefik.http.services.n8n.loadbalancer.server.port=${N8N_PORT:-5678}"
      - "traefik.http.middlewares.n8n-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.n8n.middlewares=n8n-redirect"
    volumes:
      - ~/apps/n8n_data:/home/node/.n8n
    depends_on:
      - postgres
    networks:
      - web

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`monitor.${BASE_DOMAIN}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=myresolver"
      - "traefik.http.middlewares.portainer-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.portainer.middlewares=portainer-redirect"
    networks:
      - web

networks:
  web:
    name: web
    external: false

volumes:
  postgres-data:
  portainer_data: