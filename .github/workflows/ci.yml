name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache Node.js dependencies
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Install dependencies
      - name: Install dependencies
        run: npm install

  docker-build:
    runs-on: self-hosted
    needs: build

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Create .env file for Docker Compose
      - name: Set up environment variables
        run: |
          echo "BASE_DOMAIN=${{ vars.BASE_DOMAIN }}" >> .env
          echo "CER_ACME_EMAIL=${{ vars.CER_ACME_EMAIL }}" >> .env
          echo "NEXT_WEBSITE_URL=${{ vars.NEXT_WEBSITE_URL }}" >> .env
          echo "NEXT_PORT=${{ vars.NEXT_PORT }}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}" >> .env
          echo "NEXT_IMAGE_HOSTNAME=${{ vars.NEXT_IMAGE_HOSTNAME }}" >> .env
          echo "NEXT_PREVIEW_SECRET=${{ secrets.NEXT_PREVIEW_SECRET }}" >> .env
          echo "STRAPI_HOST=${{ vars.STRAPI_HOST }}" >> .env
          echo "STRAPI_PORT=${{ vars.STRAPI_PORT }}" >> .env
          echo "STRAPI_APP_KEYS=${{ secrets.STRAPI_APP_KEYS }}" >> .env
          echo "STRAPI_API_TOKEN_SALT=${{ secrets.STRAPI_API_TOKEN_SALT }}" >> .env
          echo "STRAPI_TRANSFER_TOKEN_SALT=${{ secrets.STRAPI_TRANSFER_TOKEN_SALT }}" >> .env
          echo "STRAPI_ADMIN_JWT_SECRET=${{ secrets.STRAPI_ADMIN_JWT_SECRET }}" >> .env
          echo "STRAPI_JWT_SECRET=${{ secrets.STRAPI_JWT_SECRET }}" >> .env
          echo "STRAPI_ADMIN_CLIENT_URL=${{ vars.STRAPI_ADMIN_CLIENT_URL }}" >> .env
          echo "STRAPI_ADMIN_CLIENT_PREVIEW_SECRET=${{ secrets.STRAPI_ADMIN_CLIENT_PREVIEW_SECRET }}" >> .env
          echo "STRAPI_CLIENT_URL=${{ vars.STRAPI_CLIENT_URL }}" >> .env
          echo "STRAPI_PREVIEW_SECRET=${{ secrets.STRAPI_PREVIEW_SECRET }}" >> .env
          echo "STRAPI_ADMIN_BACKEND_URL=${{ vars.STRAPI_ADMIN_BACKEND_URL }}" >> .env
          echo "STRAPI_TELEMETRY_DISABLED=${{ vars.STRAPI_TELEMETRY_DISABLED }}" >> .env
          echo "STRAPI_ADMIN_PATH=${{ vars.STRAPI_ADMIN_PATH }}" >> .env

      # Build and run using run.sh script
      - name: Build and run using run.sh
        run: |
          chmod +x ./run.sh
          ./run.sh

      # Health check with retry and timeout
      - name: Verify health status
        run: |
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Health check attempt $i of $MAX_RETRIES"
            if docker ps | grep -q "launchpad-strapi"; then
              STATUS=$(docker inspect --format='{{json .State.Health.Status}}' launchpad-strapi)
              echo "Container health status: $STATUS"
              
              if [ "$STATUS" = '"healthy"' ]; then
                echo "Container is healthy!"
                exit 0
              fi
            else
              echo "Container not running yet"
            fi
            
            echo "Waiting ${RETRY_DELAY}s before next check"
            sleep $RETRY_DELAY
          done
          
          echo "Health check failed after $MAX_RETRIES attempts"
          docker compose logs
          exit 1

      # Fix permissions for .tmp directory
      - name: Fix permissions
        run: |
          if [ -d ./strapi/.tmp ]; then
            chown -R $(whoami):$(whoami) ./strapi/.tmp
            chmod -R 775 ./strapi/.tmp
          fi

      # Check Docker status and logs
      - name: Check Docker status and logs
        run: |
          docker info
          docker ps
          docker compose logs --tail 50

      # Capture artifacts for logging and monitoring
      - name: Capture logs as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: container-logs
          path: ./job-logs.txt
          retention-days: 5