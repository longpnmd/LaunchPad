name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache Node.js dependencies
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Install dependencies
      - name: Install dependencies
        run: npm install

  test:
    runs-on: self-hosted
    needs: build

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Run tests
      - name: Run tests
        run: npm test

  docker-build:
    runs-on: self-hosted
    needs: build

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Build Docker image
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: my-app:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      # Health check
      - name: Verify health status
        run: |
          docker inspect --format='{{json .State.Health.Status}}' my-app

      # Create .env file for Docker Compose
      - name: Set up environment variables
        run: |
          echo "BASE_DOMAIN=${{ vars.BASE_DOMAIN }}" >> .env
          echo "CER_ACME_EMAIL=${{ vars.CER_ACME_EMAIL }}" >> .env
          echo "NEXT_WEBSITE_URL=${{ vars.NEXT_WEBSITE_URL }}" >> .env
          echo "NEXT_PORT=${{ vars.NEXT_PORT }}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}" >> .env
          echo "NEXT_IMAGE_HOSTNAME=${{ vars.NEXT_IMAGE_HOSTNAME }}" >> .env
          echo "NEXT_PREVIEW_SECRET=${{ secrets.NEXT_PREVIEW_SECRET }}" >> .env
          echo "STRAPI_HOST=${{ vars.STRAPI_HOST }}" >> .env
          echo "STRAPI_PORT=${{ vars.STRAPI_PORT }}" >> .env
          echo "STRAPI_APP_KEYS=${{ secrets.STRAPI_APP_KEYS }}" >> .env
          echo "STRAPI_API_TOKEN_SALT=${{ secrets.STRAPI_API_TOKEN_SALT }}" >> .env
          echo "STRAPI_TRANSFER_TOKEN_SALT=${{ secrets.STRAPI_TRANSFER_TOKEN_SALT }}" >> .env
          echo "STRAPI_ADMIN_JWT_SECRET=${{ secrets.STRAPI_ADMIN_JWT_SECRET }}" >> .env
          echo "STRAPI_JWT_SECRET=${{ secrets.STRAPI_JWT_SECRET }}" >> .env
          echo "STRAPI_ADMIN_CLIENT_URL=${{ vars.STRAPI_ADMIN_CLIENT_URL }}" >> .env
          echo "STRAPI_ADMIN_CLIENT_PREVIEW_SECRET=${{ secrets.STRAPI_ADMIN_CLIENT_PREVIEW_SECRET }}" >> .env
          echo "STRAPI_CLIENT_URL=${{ vars.STRAPI_CLIENT_URL }}" >> .env
          echo "STRAPI_PREVIEW_SECRET=${{ secrets.STRAPI_PREVIEW_SECRET }}" >> .env
          echo "STRAPI_ADMIN_BACKEND_URL=${{ vars.STRAPI_ADMIN_BACKEND_URL }}" >> .env
          echo "STRAPI_TELEMETRY_DISABLED=${{ vars.STRAPI_TELEMETRY_DISABLED }}" >> .env
          echo "STRAPI_ADMIN_PATH=${{ vars.STRAPI_ADMIN_PATH }}" >> .env

      # Fix permissions for .tmp directory
      - name: Fix permissions
        run: |
          if [ -d ./strapi/.tmp ]; then
            chown -R $(whoami):$(whoami) ./strapi/.tmp
            chmod -R 775 ./strapi/.tmp
          fi

      # Build and run Docker Compose using run.sh
      - name: Build and run Docker Compose
        run: sh ./run.sh

      # Check logs
      - name: Check logs
        run: |
          docker compose logs

      # Verify health status
      # - name: Verify health status
      #   run: |
      #     docker inspect --format='{{json .State.Health.Status}}' strapi

      # Debug .env file
      - name: Debug .env file
        run: cat .env