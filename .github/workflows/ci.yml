name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4  # Updated from v3

      # Cache Node.js dependencies
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Install dependencies
      - name: Install dependencies
        run: npm install

  docker-build:
    environment: RELEASE
    runs-on: self-hosted
    needs: build

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4  # Updated from v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Create .env file for Docker Compose
      - name: Set up environment variables
        run: |
          touch .env
          echo "BASE_DOMAIN=${{ vars.BASE_DOMAIN }}" >> .env
          echo "CER_ACME_EMAIL=${{ vars.CER_ACME_EMAIL }}" >> .env
          # Next config
          echo "NEXT_WEBSITE_URL=${{ vars.NEXT_WEBSITE_URL }}" >> .env
          echo "NEXT_PORT=${{ vars.NEXT_PORT }}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}" >> .env
          echo "NEXT_IMAGE_HOSTNAME=${{ vars.NEXT_IMAGE_HOSTNAME }}" >> .env
          echo "NEXT_PREVIEW_SECRET=${{ secrets.NEXT_PREVIEW_SECRET }}" >> .env
          # Strapi config
          echo "STRAPI_HOST=${{ vars.STRAPI_HOST }}" >> .env
          echo "STRAPI_PORT=${{ vars.STRAPI_PORT }}" >> .env
          echo "STRAPI_APP_KEYS=${{ secrets.STRAPI_APP_KEYS }}" >> .env
          echo "STRAPI_API_TOKEN_SALT=${{ secrets.STRAPI_API_TOKEN_SALT }}" >> .env
          echo "STRAPI_TRANSFER_TOKEN_SALT=${{ secrets.STRAPI_TRANSFER_TOKEN_SALT }}" >> .env
          echo "STRAPI_ADMIN_JWT_SECRET=${{ secrets.STRAPI_ADMIN_JWT_SECRET }}" >> .env
          echo "STRAPI_JWT_SECRET=${{ secrets.STRAPI_JWT_SECRET }}" >> .env
          echo "STRAPI_ADMIN_CLIENT_URL=${{ vars.STRAPI_ADMIN_CLIENT_URL }}" >> .env
          echo "STRAPI_ADMIN_CLIENT_PREVIEW_SECRET=${{ secrets.STRAPI_ADMIN_CLIENT_PREVIEW_SECRET }}" >> .env
          echo "STRAPI_CLIENT_URL=${{ vars.STRAPI_CLIENT_URL }}" >> .env
          echo "STRAPI_PREVIEW_SECRET=${{ secrets.STRAPI_PREVIEW_SECRET }}" >> .env
          echo "STRAPI_ADMIN_BACKEND_URL=${{ vars.STRAPI_ADMIN_BACKEND_URL }}" >> .env
          echo "STRAPI_TELEMETRY_DISABLED=${{ vars.STRAPI_TELEMETRY_DISABLED }}" >> .env
          echo "STRAPI_ADMIN_PATH=${{ vars.STRAPI_ADMIN_PATH }}" >> .env
          
          # Database config
          echo "DATABASE_CLIENT=${{ vars.DATABASE_CLIENT || 'postgres' }}" >> .env
          echo "DATABASE_HOST=${{ vars.DATABASE_HOST || 'postgres' }}" >> .env
          echo "DATABASE_PORT=${{ vars.DATABASE_PORT || '5432' }}" >> .env
          echo "DATABASE_NAME=${{ vars.DATABASE_NAME || 'strapi' }}" >> .env
          echo "DATABASE_USERNAME=${{ vars.DATABASE_USERNAME || 'postgres' }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          
          # n8n config
          echo "N8N_PORT=${{ vars.N8N_PORT || '5678' }}" >> .env
          echo "N8N_HOST=n8n.${{ vars.BASE_DOMAIN }}" >> .env
          echo "N8N_PROTOCOL=${{ vars.N8N_PROTOCOL || 'https' }}" >> .env
          echo "N8N_WEBHOOK_URL=https://n8n.${{ vars.BASE_DOMAIN }}/" >> .env
          echo "N8N_DB_NAME=${{ vars.N8N_DB_NAME || 'n8n' }}" >> .env
          echo "N8N_ENCRYPTION_KEY=${{ secrets.N8N_ENCRYPTION_KEY }}" >> .env
          
          # n8n SMTP settings
          echo "N8N_SMTP_HOST=${{ vars.N8N_SMTP_HOST || 'smtp.example.com' }}" >> .env
          echo "N8N_SMTP_PORT=${{ vars.N8N_SMTP_PORT || '587' }}" >> .env
          echo "N8N_SMTP_USER=${{ vars.N8N_SMTP_USER }}" >> .env
          echo "N8N_SMTP_PASS=${{ secrets.N8N_SMTP_PASS }}" >> .env
          echo "N8N_SMTP_SENDER=${{ vars.N8N_SMTP_SENDER }}" >> .env

      # Build and run using run.sh script
      - name: Build and run using run.sh
        run: |
          chmod +x ./run.sh
          ./run.sh

      # Check Docker status and logs
      - name: Check Docker status and logs
        run: |
          docker info
          docker ps
          docker compose logs --tail 50

      # Capture artifacts for logging and monitoring
      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build-artifacts
      #     path: |
      #       job-logs.txt
      #       # Thêm các đường dẫn khác cần upload